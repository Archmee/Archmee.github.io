<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Archmee</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://archmee.github.io/"/>
  <updated>2017-04-24T16:20:55.188Z</updated>
  <id>http://archmee.github.io/</id>
  
  <author>
    <name>archmee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端之旅第 286 天</title>
    <link href="http://archmee.github.io/201704/2017-04-21.html"/>
    <id>http://archmee.github.io/201704/2017-04-21.html</id>
    <published>2017-04-20T16:00:00.000Z</published>
    <updated>2017-04-24T16:20:55.188Z</updated>
    
    <content type="html">&lt;h2 id=&quot;mocha&quot;&gt;&lt;a href=&quot;#mocha&quot; class=&quot;headerlink&quot; title=&quot;mocha&quot;&gt;&lt;/a&gt;mocha&lt;/h2&gt;&lt;p&gt;mocha是一个测试框架，使用入门都是很简单的，通过阮一峰的博客可以快速入门 &lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;测试框架 Mocha 实例教程&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;ES6&quot;&gt;&lt;a href=&quot;#ES6&quot; class=&quot;headerlink&quot; title=&quot;ES6&quot;&gt;&lt;/a&gt;ES6&lt;/h2&gt;&lt;p&gt;由于ES6新增内容其实是很多的，但是我们不能全部都学，而且很大一部分只适用于Nodejs，所以暂时只需要学习20%的部分来应付80%的工作即可&lt;/p&gt;
&lt;h3 id=&quot;let&quot;&gt;&lt;a href=&quot;#let&quot; class=&quot;headerlink&quot; title=&quot;let&quot;&gt;&lt;/a&gt;let&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;实际上为js提供了块级作用域，用它所声明的变量，只在let命令所在的代码块内有效。&lt;/li&gt;
&lt;li&gt;解决了以前在循环中需要闭包才能解决的对循环变量的引用问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;const&quot;&gt;&lt;a href=&quot;#const&quot; class=&quot;headerlink&quot; title=&quot;const&quot;&gt;&lt;/a&gt;const&lt;/h3&gt;&lt;p&gt;也用来声明变量，但是声明的是常量。一旦声明，常量的值就不能改变。const有一个很好的应用场景，就是当我们引用第三方库的时声明的变量，用const来声明可以避免未来不小心重命名而导致出现bug&lt;/p&gt;
&lt;h3 id=&quot;class-extends-super&quot;&gt;&lt;a href=&quot;#class-extends-super&quot; class=&quot;headerlink&quot; title=&quot;class, extends, super&quot;&gt;&lt;/a&gt;class, extends, super&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;class 声明类&lt;/li&gt;
&lt;li&gt;extends 继承&lt;/li&gt;
&lt;li&gt;&lt;p&gt;super 它指代父类的实例（即父类的this对象）。子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象。&lt;/p&gt;
&lt;p&gt;  ES6的继承机制，实质是先创造父类的实例对象this（所以必须先调用super方法），然后再用子类的构造函数修改this。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;arrow-function-箭头函数&quot;&gt;&lt;a href=&quot;#arrow-function-箭头函数&quot; class=&quot;headerlink&quot; title=&quot;arrow function(箭头函数)&quot;&gt;&lt;/a&gt;arrow function(箭头函数)&lt;/h3&gt;&lt;p&gt;箭头函数简化了编程工作，对比：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;i&lt;/span&gt;)&lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &amp;#125; &lt;span class=&quot;comment&quot;&gt;//ES5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(i) =&amp;gt; &amp;#123;i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&amp;#125; &lt;span class=&quot;comment&quot;&gt;//ES6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以前在setTimeout中的this指向全局对象，为了解决这个问题可以&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在setTimeout调用前保存对this的引用&lt;/li&gt;
&lt;li&gt;或者用bind方法 method.bind(this)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是现在有了箭头函数就不用麻烦了&lt;br&gt;&lt;code&gt;() =&amp;gt; { this is outer this }&lt;/code&gt;&lt;br&gt;当我们使用箭头函数时，函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。并不是因为箭头函数内部有绑定this的机制，实际原因是箭头函数根本没有自己的this，它的this是继承外面的，因此内部的this就是外层代码块的this。&lt;/p&gt;
&lt;h3 id=&quot;template-string&quot;&gt;&lt;a href=&quot;#template-string&quot; class=&quot;headerlink&quot; title=&quot;template string&quot;&gt;&lt;/a&gt;template string&lt;/h3&gt;&lt;p&gt;用``符号包起来的字符串中可以像模板中一样在&lt;code&gt;${}&lt;/code&gt;中插值&lt;code&gt;&amp;lt;span&amp;gt;${data.name}&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;destructuring（解构）&quot;&gt;&lt;a href=&quot;#destructuring（解构）&quot; class=&quot;headerlink&quot; title=&quot;destructuring（解构）&quot;&gt;&lt;/a&gt;destructuring（解构）&lt;/h3&gt;&lt;p&gt;ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; cat = &lt;span class=&quot;string&quot;&gt;&#39;ken&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; dog = &lt;span class=&quot;string&quot;&gt;&#39;lili&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; zoo = &amp;#123;cat, dog&amp;#125; &lt;span class=&quot;comment&quot;&gt;//相当于将后面所有对象拷贝到zoo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// zoo = &amp;#123;cat: &#39;ken&#39;, dog: &#39;lili&#39;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; dog = &amp;#123;type: &lt;span class=&quot;string&quot;&gt;&#39;animal&#39;&lt;/span&gt;, many: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &amp;#123; type, many&amp;#125; = dog &lt;span class=&quot;comment&quot;&gt;//将dog对象中的值分别拷贝到前面的变量中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 现在type 和 many分别是两个变量其值为dog中对应值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意上面代码中提取值时key值要保证相同，因为对象内部属性是无序的，所以不要设想是按照循序赋值&lt;/p&gt;
&lt;h3 id=&quot;default，rest&quot;&gt;&lt;a href=&quot;#default，rest&quot; class=&quot;headerlink&quot; title=&quot;default，rest&quot;&gt;&lt;/a&gt;default，rest&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;default(函数形参默认值)&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sum&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a = 1, b = 2&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a+b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sum(); &lt;span class=&quot;comment&quot;&gt;//3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sum(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sum(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;rest arguments&lt;br&gt;有点类似于ES6以前的arguments可以获取形参集合，不过arguments是个对象，而rest是个数组&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;...types&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(types);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test(&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;ES6-Module：import，export&quot;&gt;&lt;a href=&quot;#ES6-Module：import，export&quot; class=&quot;headerlink&quot; title=&quot;ES6 Module：import，export&quot;&gt;&lt;/a&gt;ES6 Module：import，export&lt;/h3&gt;&lt;p&gt;之前我们可以用AMD、CMD、UMD、CommonJs等规范来实现模块化，而现在，ES6 Module还是不能用，所以还是继续用原来的吧，不过ES6 Module规范已经出了，接下来就是看各个厂商的实现了。&lt;/p&gt;
&lt;p&gt;顾名思义，import导入模块，export到处模块，如果熟悉模块化编程的话很容易理解它们是如何工作的&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//index.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123;animal, ...&amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./content&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//content.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function animal()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;string&quot;&gt;&#39;Hello!&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export &amp;#123;animal, ...&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;export命令除了输出变量，还可以输出函数，甚至是类&lt;/li&gt;
&lt;li&gt;大括号里面的变量名，必须与被导入模块（content.js）对外接口的名称相同。&lt;/li&gt;
&lt;li&gt;as关键字可以指定别名&lt;/li&gt;
&lt;li&gt;整体导入用星号（*）指定一个对象，所有输出值都导入在这个对象上面。要使用as指定别名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ES6模块系统和AMD相比有一些不一样的思想，总结一下就是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;按需引入 vs 全局引入&lt;/li&gt;
&lt;li&gt;多点暴漏 vs 全局暴漏&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h3&gt;&lt;p&gt;以上内容皆来自博客&lt;br&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000004365693&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;30分钟掌握ES6/ES2015核心内容（上）&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000004368132&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;30分钟掌握ES6/ES2015核心内容（下）&lt;/a&gt;&lt;br&gt;如果需要深入学习，可以看：&lt;br&gt;&lt;a href=&quot;http://es6.ruanyifeng.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ECMAScript 6入门&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.infoq.com/cn/es6-in-depth/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入浅出ES6&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;mocha&quot;&gt;&lt;a href=&quot;#mocha&quot; class=&quot;headerlink&quot; title=&quot;mocha&quot;&gt;&lt;/a&gt;mocha&lt;/h2&gt;&lt;p&gt;mocha是一个测试框架，使用入门都是很简单的，通过阮一峰的博客可以快速入门 &lt;a href=&quot;http://www
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 281~285 天——模块化</title>
    <link href="http://archmee.github.io/201704/2017-04-20-3.html"/>
    <id>http://archmee.github.io/201704/2017-04-20-3.html</id>
    <published>2017-04-19T17:43:00.000Z</published>
    <updated>2017-04-24T16:21:54.085Z</updated>
    
    <content type="html">&lt;h2 id=&quot;最主要的目的：&quot;&gt;&lt;a href=&quot;#最主要的目的：&quot; class=&quot;headerlink&quot; title=&quot;最主要的目的：&quot;&gt;&lt;/a&gt;最主要的目的：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;解决命名冲突&lt;/li&gt;
&lt;li&gt;依赖管理&lt;/li&gt;
&lt;li&gt;提高代码可读性&lt;/li&gt;
&lt;li&gt;代码解耦，提高复用性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前端模块化框架肩负着 模块管理、资源加载 两项重要的功能，这两项功能与工具、性能、业务、部署等工程环节都有着非常紧密的联系。因此，模块化框架的设计应该最高优先级考虑工程需要。&lt;/p&gt;
&lt;h2 id=&quot;CMD-or-AMD-or-xMD&quot;&gt;&lt;a href=&quot;#CMD-or-AMD-or-xMD&quot; class=&quot;headerlink&quot; title=&quot;CMD or AMD or xMD&quot;&gt;&lt;/a&gt;CMD or AMD or xMD&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;CommonJS 主要用于服务器端，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于”假死”状态。由于CommonJS无法直接应用于浏览器端，所以在CommonJS从服务端向前端进军的过程中，分裂出了：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Modules/1.x派 认为，在现有基础上进行改进即可满足浏览器端的需要，既然浏览器端需要function包装，需要异步加载，那么新增一个方案，能把现有模块转化为适合浏览器端的就行了。&lt;/li&gt;
&lt;li&gt;Modules/Async派 认为浏览器与服务器环境差别太大，不能沿用旧的模块标准。既然浏览器必须异步加载代码，那么模块在定义的时候就必须指明所依赖的模块，然后把本模块的代码写在回调函数里。这就是后来从CommonJS分离出去的AMD&lt;/li&gt;
&lt;li&gt;Modules/2.0派 有点像“中间派”，既不想丢掉旧的规范，也不想像AMD那样推到重来。最终采用了Modules/Wrappings的方式&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UMD 是 “Universal Module Definition” 的缩写，提供了一系列模式同时兼容 CommonJS 和 AMD ，代价是代码有些丑陋。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。&lt;br&gt;由于requirejs有不甚优雅的地方，所以必然会有新东西来完善它，这就是后起之秀seajs，seajs的作者是国内大牛淘宝前端布道者玉伯。seajs全面拥抱Modules/Wrappings规范，不用requirejs那样回调的方式来编写模块。而它也不是完全按照Modules/Wrappings规范&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;AMD和CMD的区别&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible.
2. CMD 推崇依赖就近，AMD 推崇依赖前置。
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;前端工程化&quot;&gt;&lt;a href=&quot;#前端工程化&quot; class=&quot;headerlink&quot; title=&quot;前端工程化&quot;&gt;&lt;/a&gt;前端工程化&lt;/h2&gt;&lt;p&gt;对于前端工程化的内容，内容太对不是三言两语可以讲清楚的，而且它也不像其他几个方面那样可以通过看一时半会别人的博客就能够学会的。当然如果是相关工具的话，在我前面博客中提到的gulp就算是前端工程化的一方面了，还有后面应该会学习的Webpack。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/lvdabao/p/js-modules-develop.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/lvdabao/p/js-modules-develop.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/jinguangguo/archive/2013/04/06/3002515.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/jinguangguo/archive/2013/04/06/3002515.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/seajs/seajs/issues/588&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/seajs/seajs/issues/588&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/seajs/seajs/issues/547&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/seajs/seajs/issues/547&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/fouber/blog/issues/4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/fouber/blog/issues/4&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/seajs/seajs/issues/277&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/seajs/seajs/issues/277&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/seajs/seajs/issues/454&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/seajs/seajs/issues/454&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/seajs/seajs/issues/1605&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/seajs/seajs/issues/1605&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://div.io/topic/430&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://div.io/topic/430&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://div.io/topic/439&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://div.io/topic/439&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000000733959&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://segmentfault.com/a/1190000000733959&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/10/javascript_module.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.ruanyifeng.com/blog/2012/10/javascript_module.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/11/require_js.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.ruanyifeng.com/blog/2012/11/require_js.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://lishaopeng.com/2016/02/05/js-module/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://lishaopeng.com/2016/02/05/js-module/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://lishaopeng.com/2016/02/11/js-module2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://lishaopeng.com/2016/02/11/js-module2/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://lishaopeng.com/2016/02/19/js-module3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://lishaopeng.com/2016/02/19/js-module3/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://justineo.github.io/singles/writing-modular-js/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://justineo.github.io/singles/writing-modular-js/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/amdjs/amdjs-api/wiki/AMD-(%E4%B8%AD%E6%96%87%E7%89%88&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/amdjs/amdjs-api/wiki/AMD-(%E4%B8%AD%E6%96%87%E7%89%88&lt;/a&gt;)&lt;br&gt;&lt;a href=&quot;https://github.com/amdjs/amdjs-api/wiki/require-(%E4%B8%AD%E6%96%87%E7%89%88&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/amdjs/amdjs-api/wiki/require-(%E4%B8%AD%E6%96%87%E7%89%88&lt;/a&gt;)&lt;br&gt;&lt;a href=&quot;http://requirejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://requirejs.org/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.requirejs.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.requirejs.cn/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://cyj.me/why-seajs/requirejs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://cyj.me/why-seajs/requirejs/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://huangxuan.me/2015/07/09/js-module-7day/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://huangxuan.me/2015/07/09/js-module-7day/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://ecomfe.github.io/blog/dissecting-amd-preface/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://ecomfe.github.io/blog/dissecting-amd-preface/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://ecomfe.github.io/blog/dissecting-amd-what/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://ecomfe.github.io/blog/dissecting-amd-what/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://ecomfe.github.io/blog/dissecting-amd-how/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://ecomfe.github.io/blog/dissecting-amd-how/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://ecomfe.github.io/blog/dissecting-amd-loader/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://ecomfe.github.io/blog/dissecting-amd-loader/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/snandy/archive/2012/05/22/2513652.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/snandy/archive/2012/05/22/2513652.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/snandy/archive/2012/05/23/2513712.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/snandy/archive/2012/05/23/2513712.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/snandy/archive/2012/05/24/2514700.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/snandy/archive/2012/05/24/2514700.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/snandy/archive/2012/06/06/2536969.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/snandy/archive/2012/06/06/2536969.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/snandy/archive/2012/06/07/2537477.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/snandy/archive/2012/06/07/2537477.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/snandy/archive/2012/06/08/2538001.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/snandy/archive/2012/06/08/2538001.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://div.io/topic/586&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://div.io/topic/586&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/yunlong-on-fis&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.infoq.com/cn/articles/yunlong-on-fis&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;—-IFE2015 task4的终结线——-&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;最主要的目的：&quot;&gt;&lt;a href=&quot;#最主要的目的：&quot; class=&quot;headerlink&quot; title=&quot;最主要的目的：&quot;&gt;&lt;/a&gt;最主要的目的：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;解决命名冲突&lt;/li&gt;
&lt;li&gt;依赖管理&lt;/li&gt;
&lt;li&gt;提高代码可读性&lt;/li&gt;
&lt;
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 281~285 天——性能</title>
    <link href="http://archmee.github.io/201704/2017-04-20-2.html"/>
    <id>http://archmee.github.io/201704/2017-04-20-2.html</id>
    <published>2017-04-19T17:42:00.000Z</published>
    <updated>2017-04-24T16:21:46.401Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Yahoo军规&quot;&gt;&lt;a href=&quot;#Yahoo军规&quot; class=&quot;headerlink&quot; title=&quot;Yahoo军规&quot;&gt;&lt;/a&gt;Yahoo军规&lt;/h2&gt;&lt;h3 id=&quot;网页内容&quot;&gt;&lt;a href=&quot;#网页内容&quot; class=&quot;headerlink&quot; title=&quot;网页内容&quot;&gt;&lt;/a&gt;网页内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;减少http请求次数&lt;ul&gt;
&lt;li&gt;组合文件：将所有同类型文件组合到一起(images, css, js等)&lt;/li&gt;
&lt;li&gt;CSS Sprites&lt;/li&gt;
&lt;li&gt;Image Maps&lt;/li&gt;
&lt;li&gt;Inline images(比如base64格式)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;减少DNS查询次数：每个引用的新域名(比如cdn)具有DNS查询的前端代价，你必须确保这个代价确实是值得的。&lt;/li&gt;
&lt;li&gt;避免页面跳转&lt;/li&gt;
&lt;li&gt;缓存Ajax&lt;/li&gt;
&lt;li&gt;延迟加载&lt;/li&gt;
&lt;li&gt;提前加载&lt;ul&gt;
&lt;li&gt;有条件&lt;/li&gt;
&lt;li&gt;无条件&lt;/li&gt;
&lt;li&gt;有预期的加载&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;减少DOM元素数量&lt;/li&gt;
&lt;li&gt;根据域名划分内容（动静分离）&lt;/li&gt;
&lt;li&gt;减少iframe数量&lt;/li&gt;
&lt;li&gt;避免404&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;服务器&quot;&gt;&lt;a href=&quot;#服务器&quot; class=&quot;headerlink&quot; title=&quot;服务器&quot;&gt;&lt;/a&gt;服务器&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用CDN&lt;/li&gt;
&lt;li&gt;添加Expires 或Cache-Control报文头&lt;/li&gt;
&lt;li&gt;Gzip压缩传输文件（对pdf作用不大）&lt;/li&gt;
&lt;li&gt;配置ETags&lt;/li&gt;
&lt;li&gt;尽早flush输出&lt;/li&gt;
&lt;li&gt;使用GET Ajax请求数据&lt;/li&gt;
&lt;li&gt;避免空的图片src&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Cookie&quot;&gt;&lt;a href=&quot;#Cookie&quot; class=&quot;headerlink&quot; title=&quot;Cookie&quot;&gt;&lt;/a&gt;Cookie&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;减少Cookie大小&lt;/li&gt;
&lt;li&gt;页面内容使用无cookie域名（动静分离）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;CSS&quot;&gt;&lt;a href=&quot;#CSS&quot; class=&quot;headerlink&quot; title=&quot;CSS&quot;&gt;&lt;/a&gt;CSS&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;将样式表置顶&lt;/li&gt;
&lt;li&gt;用&lt;link&gt;代替@import&lt;/li&gt;
&lt;li&gt;避免CSS表达式（IE）&lt;/li&gt;
&lt;li&gt;避免使用Filters（IE）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Javascript&quot;&gt;&lt;a href=&quot;#Javascript&quot; class=&quot;headerlink&quot; title=&quot;Javascript&quot;&gt;&lt;/a&gt;Javascript&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;将脚本置底或者使用deffer、async关键字&lt;/li&gt;
&lt;li&gt;使用外部Javascirpt和CSS文件（尤其是会重复访问的网页）&lt;/li&gt;
&lt;li&gt;精简Javascript和CSS（打包压缩）&lt;/li&gt;
&lt;li&gt;去除重复脚本&lt;/li&gt;
&lt;li&gt;减少DOM访问&lt;/li&gt;
&lt;li&gt;使用智能事件处理（比如事件代理）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;图片&quot;&gt;&lt;a href=&quot;#图片&quot; class=&quot;headerlink&quot; title=&quot;图片&quot;&gt;&lt;/a&gt;图片&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;优化图像（去除一些无用信息）&lt;/li&gt;
&lt;li&gt;优化CSS Sprite&lt;/li&gt;
&lt;li&gt;不要在HTML中缩放图片&lt;/li&gt;
&lt;li&gt;使用小且可缓存的favicon.ico&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;移动客户端&quot;&gt;&lt;a href=&quot;#移动客户端&quot; class=&quot;headerlink&quot; title=&quot;移动客户端&quot;&gt;&lt;/a&gt;移动客户端&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;保持单个内容小于25KB&lt;/li&gt;
&lt;li&gt;打包组建成符合文档&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;给网页设计师和前端开发者看的前端性能优化&quot;&gt;&lt;a href=&quot;#给网页设计师和前端开发者看的前端性能优化&quot; class=&quot;headerlink&quot; title=&quot;给网页设计师和前端开发者看的前端性能优化&quot;&gt;&lt;/a&gt;给网页设计师和前端开发者看的前端性能优化&lt;/h2&gt;&lt;h3 id=&quot;基础知识：&quot;&gt;&lt;a href=&quot;#基础知识：&quot; class=&quot;headerlink&quot; title=&quot;基础知识：&quot;&gt;&lt;/a&gt;基础知识：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;将样式表放在文档的顶部&lt;/li&gt;
&lt;li&gt;将JavaScript放在底部（可能的地方）&lt;/li&gt;
&lt;li&gt;尽可能减少HTTP请求&lt;/li&gt;
&lt;li&gt;从多个域名提供资源服务能增加浏览器并行下载的资源数量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;HTTP-请求与-DNS-查询&quot;&gt;&lt;a href=&quot;#HTTP-请求与-DNS-查询&quot; class=&quot;headerlink&quot; title=&quot;HTTP 请求与 DNS 查询&quot;&gt;&lt;/a&gt;HTTP 请求与 DNS 查询&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;浏览器受限于有多少请求可以并行发生。这也是为什么我们经常要使用子域名或者CDN；以便允许这些请求在数个域名上发生，允许同时发生多得多数量的请求。然而，一个新的域名被引用，HTTP请求会受制于一个耗时的DNS查询（某个介于20到120毫秒之间的值）&lt;/li&gt;
&lt;li&gt;DNS查询代价很高，因此你需要决定什么才是对你的网站更合适的；承担查询的消耗或者只是由一个域名提供所有服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;DNS-预取&quot;&gt;&lt;a href=&quot;#DNS-预取&quot; class=&quot;headerlink&quot; title=&quot;DNS 预取&quot;&gt;&lt;/a&gt;DNS 预取&lt;/h3&gt;&lt;p&gt;如果你的网站不得不访问第三方域名的资源，这就牵涉到了DNS查询。幸运的是，有一个相当快又简单的办法来加速这个过程：DNS预取。DNS预取所做的恰恰就是凭证领餐，如下html&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;dns-prefetch&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;foo.com&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;那行简单的内容将会告诉支持的浏览器去开始预取那个域名的DNS&lt;/p&gt;
&lt;h3 id=&quot;资源预取&quot;&gt;&lt;a href=&quot;#资源预取&quot; class=&quot;headerlink&quot; title=&quot;资源预取&quot;&gt;&lt;/a&gt;资源预取&lt;/h3&gt;&lt;p&gt;虽然作者给出了和DNS预取类似的方法，但是作者似乎也不太肯定，所以可以看下作者推荐的资料&lt;/p&gt;
&lt;h3 id=&quot;CSS-与性能&quot;&gt;&lt;a href=&quot;#CSS-与性能&quot; class=&quot;headerlink&quot; title=&quot;CSS 与性能&quot;&gt;&lt;/a&gt;CSS 与性能&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;永远不要从其他资源域名提供服务 因为这会引起DNS查询并进一步延迟渲染。&lt;/li&gt;
&lt;li&gt;先提供服务 因此浏览器可以继续忙下去。&lt;/li&gt;
&lt;li&gt;合并它 因为不管怎样浏览器会获取所有CSS，你最好将所有这些压缩于一个HTTP请求。&lt;/li&gt;
&lt;li&gt;压缩并简化它 以便浏览器需要下载的少一些。&lt;/li&gt;
&lt;li&gt;缓存它的一切 以便上述的过程尽可能少的发生。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;压缩与简化&quot;&gt;&lt;a href=&quot;#压缩与简化&quot; class=&quot;headerlink&quot; title=&quot;压缩与简化&quot;&gt;&lt;/a&gt;压缩与简化&lt;/h3&gt;&lt;p&gt;对于你的文本资源，有两个实在很简单的事情是你能（而且也应该）做的；简化他们移除任何注释和空格，并且进一步的压缩它们大小。&lt;/p&gt;
&lt;p&gt;.htaccess评估每一个到达请求，因此实际它有很多开销。这取自 Apache 文档 ：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你应该完全避免使用.htaccess文件，如果你可以直接访问http主服务器的配置文件的话。 使用.htaccess文件使你的Apache http server慢下来。任何你能包含进一个.htaccess文件的指令最好设置在一个&lt;a href=&quot;http://httpd.apache.org/docs/2.2/mod/core.html#directory&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;字典块&lt;/a&gt;,因为它具有同样的效用并且有更好的性能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;压缩（Gzip）将任何基于文本的输入，基于重复的/可重复的字符串对其进行压缩。&lt;/p&gt;
&lt;h3 id=&quot;优化图像&quot;&gt;&lt;a href=&quot;#优化图像&quot; class=&quot;headerlink&quot; title=&quot;优化图像&quot;&gt;&lt;/a&gt;优化图像&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Spriting (精灵)&lt;/li&gt;
&lt;li&gt;视网膜图像&lt;br&gt;  一旦图像解压并在浏览器中渲染，有四倍数量于平常的像素需要存储于内存，视网膜图像消耗了内存并不很多的移动设备&lt;br&gt;  如果统计数据表明有足够富余，你就可以针对矢量图形优化，或者用字体图标代替位图。&lt;/li&gt;
&lt;li&gt;渐进的 JPGs&lt;/li&gt;
&lt;li&gt;完全不用图片，如果用适量纯CSS可以完成某种效果，那么久应该使用纯CSS来实现&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;CSS-Sprites：鱼翅还是三鹿？&quot;&gt;&lt;a href=&quot;#CSS-Sprites：鱼翅还是三鹿？&quot; class=&quot;headerlink&quot; title=&quot;CSS Sprites：鱼翅还是三鹿？&quot;&gt;&lt;/a&gt;CSS Sprites：鱼翅还是三鹿？&lt;/h2&gt;&lt;p&gt;缺点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拼合图片的时间成本会增加&lt;/li&gt;
&lt;li&gt;编码和维护的时间成本会增加&lt;/li&gt;
&lt;li&gt;不是所有图片都是背景&lt;/li&gt;
&lt;li&gt;错误的使用 Sprites 影响可访问性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;编写高效的-CSS-选择器&quot;&gt;&lt;a href=&quot;#编写高效的-CSS-选择器&quot; class=&quot;headerlink&quot; title=&quot;编写高效的 CSS 选择器&quot;&gt;&lt;/a&gt;编写高效的 CSS 选择器&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;浏览器解析选择器是从右到左的方式。&lt;/li&gt;
&lt;li&gt;你的关键选择器会决定浏览器的工作量，因此，我们应该重视一下关键选择器（即匹配规则的最右一个选择器）&lt;/li&gt;
&lt;li&gt;拥有一个明确的关键选择器最大的好处就是你可以避免使用过度限制选择器&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/developersupport/p/webpage-performance-best-practices.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/developersupport/p/webpage-performance-best-practices.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.oschina.net/translate/front-end-performance-for-web-designers-and-front-end-developers&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.oschina.net/translate/front-end-performance-for-web-designers-and-front-end-developers&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.yahoo.com/performance/rules.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.yahoo.com/performance/rules.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.zhangxinxu.com/wordpress/2013/04/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.zhangxinxu.com/wordpress/2013/04/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/mofish/archive/2010/10/12/1849062.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/mofish/archive/2010/10/12/1849062.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.qianduan.net/css-sprites-useful-technique-or-potential-nuisance/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.qianduan.net/css-sprites-useful-technique-or-potential-nuisance/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/leefreeman/p/3993449.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/leefreeman/p/3993449.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/leefreeman/p/3998757.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/leefreeman/p/3998757.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://web.jobbole.com/35339/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://web.jobbole.com/35339/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Yahoo军规&quot;&gt;&lt;a href=&quot;#Yahoo军规&quot; class=&quot;headerlink&quot; title=&quot;Yahoo军规&quot;&gt;&lt;/a&gt;Yahoo军规&lt;/h2&gt;&lt;h3 id=&quot;网页内容&quot;&gt;&lt;a href=&quot;#网页内容&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 281~285 天——安全</title>
    <link href="http://archmee.github.io/201704/2017-04-20-1.html"/>
    <id>http://archmee.github.io/201704/2017-04-20-1.html</id>
    <published>2017-04-19T17:41:00.000Z</published>
    <updated>2017-04-24T16:21:49.507Z</updated>
    
    <content type="html">&lt;p&gt;这几天主要学习了JavaScript模块化的前世今生，工程化等方面知识，还包括安全防护、性能优化等方面知识，算是正式完成了&lt;a href=&quot;https://github.com/baidu-ife/ife/tree/master/2015_spring/task/task0004&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IFE2015 spring task4&lt;/a&gt;，由于主要任务是优化，所以从软件界面上几乎没什么变化，不再截图。&lt;br&gt;由于每篇内容相对独立，所以上面所述方面的学习笔记，将分别记录在接下来的几篇博客中。&lt;/p&gt;
&lt;h2 id=&quot;Web安全&quot;&gt;&lt;a href=&quot;#Web安全&quot; class=&quot;headerlink&quot; title=&quot;Web安全&quot;&gt;&lt;/a&gt;Web安全&lt;/h2&gt;&lt;h3 id=&quot;浅谈Web安全性（前端向）&quot;&gt;&lt;a href=&quot;#浅谈Web安全性（前端向）&quot; class=&quot;headerlink&quot; title=&quot;浅谈Web安全性（前端向）&quot;&gt;&lt;/a&gt;浅谈Web安全性（前端向）&lt;/h3&gt;&lt;h4 id=&quot;攻击种类&quot;&gt;&lt;a href=&quot;#攻击种类&quot; class=&quot;headerlink&quot; title=&quot;攻击种类&quot;&gt;&lt;/a&gt;攻击种类&lt;/h4&gt;&lt;p&gt;Web基本攻击大致可以分为三大类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;资源枚举&lt;br&gt;  别有用心的人会遍历你站点所有可访问的目录，然后把一些常见的备胎文件名（比如“sql.bak”、“index-副本.html”）一个个都枚举一下，如果运气好枚举到了就直接下载。&lt;/li&gt;
&lt;li&gt;参数操纵&lt;br&gt;  这里包括了SQL注入、XPath注入、cgi命令执行，还有XXS和会话劫持等。前三个的攻击主要是在服务端触发的，后二者的攻击则是侧重于客户端。&lt;/li&gt;
&lt;li&gt;其它攻击&lt;br&gt;  其它攻击包括有前面未提及的CSRF攻击、钓鱼攻击和拒绝服务攻击等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;攻击层面&quot;&gt;&lt;a href=&quot;#攻击层面&quot; class=&quot;headerlink&quot; title=&quot;攻击层面&quot;&gt;&lt;/a&gt;攻击层面&lt;/h4&gt;&lt;p&gt;常见的攻击层面有三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传统WEB应用程序&lt;ol&gt;
&lt;li&gt;表单输入&lt;/li&gt;
&lt;li&gt;cookie&lt;/li&gt;
&lt;li&gt;报头&lt;/li&gt;
&lt;li&gt;请求参数&lt;/li&gt;
&lt;li&gt;上传文件&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Web服务&lt;ol&gt;
&lt;li&gt;上述“传统WEB服务”的全部方法；&lt;/li&gt;
&lt;li&gt;WSDL文档&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;AJAX应用程序&lt;br&gt;  即上述的“一”和“二”的合集&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h4&gt;&lt;p&gt;综上所述，我们可以这样审视我们的WEB站点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;永远不要相信客户端传来的任何信息，对这些信息都应先进行编码或过滤处理；&lt;/li&gt;
&lt;li&gt;谨慎返回用户输入的信息&lt;/li&gt;
&lt;li&gt;使用黑名单和白名单处理（即“不允许哪些敏感信息”或“只允许哪些信息”，白名单的效果更好但局限性高）；&lt;/li&gt;
&lt;li&gt;检查、验证请求来源，对每一个重要的操作都进行重新验证；&lt;/li&gt;
&lt;li&gt;使用SSL防止第三方监听通信（但无法阻止XSS、CSRF、SQL注入攻击）；&lt;/li&gt;
&lt;li&gt;不要将重要文件、备份文件存放在公众可访问到的地方；&lt;/li&gt;
&lt;li&gt;会话ID无序化；&lt;/li&gt;
&lt;li&gt;对用户上传的文件进行验证（不单单是格式验证，比方一张gif图片还应将其转为二进制并验证其每帧颜色值&amp;lt;无符号8位&amp;gt;和宽高值&amp;lt;无符号16位&amp;gt;）；&lt;/li&gt;
&lt;li&gt;WSDL文档应当要求用户注册后才能获取；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;虽然我们有一些必要的手段来防止WEB攻击，但永远不会有一枚silver bullet来彻底解决问题，先不谈那些数不胜数的已知的、可被攻击的漏洞，对于谜一样的0-day漏洞，我们所能做的只是提前发现并及时修补它们。&lt;/p&gt;
&lt;h3 id=&quot;有关XSS&quot;&gt;&lt;a href=&quot;#有关XSS&quot; class=&quot;headerlink&quot; title=&quot;有关XSS&quot;&gt;&lt;/a&gt;有关XSS&lt;/h3&gt;&lt;h4 id=&quot;XSS的原理分析与解剖&quot;&gt;&lt;a href=&quot;#XSS的原理分析与解剖&quot; class=&quot;headerlink&quot; title=&quot;XSS的原理分析与解剖&quot;&gt;&lt;/a&gt;XSS的原理分析与解剖&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;黑客对此漏洞的偏爱，原因不需要多，只需要一个：Xss几乎每个网站都存在，google、baidu、360等都存在。&lt;/li&gt;
&lt;li&gt;记住一句话“xss就是在页面执行你想要的js”&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;XSS的原理分析与解剖（第二篇）&quot;&gt;&lt;a href=&quot;#XSS的原理分析与解剖（第二篇）&quot; class=&quot;headerlink&quot; title=&quot;XSS的原理分析与解剖（第二篇）&quot;&gt;&lt;/a&gt;XSS的原理分析与解剖（第二篇）&lt;/h4&gt;&lt;p&gt;常见XSS&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;反射型XSS&lt;/li&gt;
&lt;li&gt;储蓄型XSS&lt;/li&gt;
&lt;li&gt;DOM XSS&lt;/li&gt;
&lt;li&gt;XSF(Flash XSS)&lt;/li&gt;
&lt;li&gt;挖掘XSS&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;XSS的原理分析与解剖：第三章（技巧篇）&quot;&gt;&lt;a href=&quot;#XSS的原理分析与解剖：第三章（技巧篇）&quot; class=&quot;headerlink&quot; title=&quot;XSS的原理分析与解剖：第三章（技巧篇）&quot;&gt;&lt;/a&gt;XSS的原理分析与解剖：第三章（技巧篇）&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;第三方劫持 (外调J/C)：就是把资源域的服务器的权限拿下，替换相关资源，采用‘迂回式’的渗透方式。&lt;br&gt;  PS： J/C指的是javascript、css，不经常使用的就不说了。&lt;/li&gt;
&lt;li&gt;XSS downloader（XSS下载器）：这个技术其实就是把反射和储蓄结合起来，把核心代码写在网站上，然后以XSS触发并调用代码，实现攻击。&lt;/li&gt;
&lt;li&gt;XCS：XCS就是利用浏览器来玩XSS，它的功能比普通上的XSS还要强大，因为利用浏览器协议漏洞，可以调用浏览器的API来实现下载覆盖本地文件(可以把它这个功能理解为挂马)。&lt;/li&gt;
&lt;li&gt;页面渲染XSS&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;XSS的原理分析与解剖：第四章（编码与绕过）&quot;&gt;&lt;a href=&quot;#XSS的原理分析与解剖：第四章（编码与绕过）&quot; class=&quot;headerlink&quot; title=&quot;XSS的原理分析与解剖：第四章（编码与绕过）&quot;&gt;&lt;/a&gt;XSS的原理分析与解剖：第四章（编码与绕过）&lt;/h4&gt;&lt;p&gt;编码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;URL编码&lt;/li&gt;
&lt;li&gt;unicode编码&lt;/li&gt;
&lt;li&gt;HTML编码&lt;/li&gt;
&lt;li&gt;CSS编码&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;XSS防护&quot;&gt;&lt;a href=&quot;#XSS防护&quot; class=&quot;headerlink&quot; title=&quot;XSS防护&quot;&gt;&lt;/a&gt;XSS防护&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;验证输入并且基于语境和按照正确的顺序转义不可信数据&lt;/li&gt;
&lt;li&gt;始终遵循白名单优于黑名单的做法&lt;/li&gt;
&lt;li&gt;使用 UTF-8 为默认的字符编码以及设置 content 为 text/html&lt;/li&gt;
&lt;li&gt;不要将用户可以控制的文本放在&lt;meta&gt;标签前。通过使用不同的字符集注射可以导致XSS&lt;/li&gt;
&lt;li&gt;使用&amp;lt;!DOCTYPE html&amp;gt;&lt;/li&gt;
&lt;li&gt;使用推荐的 HTTP 响应头进行 XSS 防护&lt;/li&gt;
&lt;li&gt;防止 CRLF 注入/HTTP 响应拆分&lt;/li&gt;
&lt;li&gt;禁止 TRACE 和其他非必要方法&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.2cto.com/article/201412/363743.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.2cto.com/article/201412/363743.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.freebuf.com/articles/web/40520.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.freebuf.com/articles/web/40520.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.freebuf.com/articles/web/42727.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.freebuf.com/articles/web/42727.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.freebuf.com/articles/44481.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.freebuf.com/articles/44481.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.freebuf.com/articles/web/55505.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.freebuf.com/articles/web/55505.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.freebuf.com/author/black-hole&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.freebuf.com/author/black-hole&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.fooying.com/chinese-translationthe-ultimate-xss-protection-cheatsheet-for-developers/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.fooying.com/chinese-translationthe-ultimate-xss-protection-cheatsheet-for-developers/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/knownsec/KCon&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/knownsec/KCon&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这几天主要学习了JavaScript模块化的前世今生，工程化等方面知识，还包括安全防护、性能优化等方面知识，算是正式完成了&lt;a href=&quot;https://github.com/baidu-ife/ife/tree/master/2015_spring/task/task0
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 274~280 天</title>
    <link href="http://archmee.github.io/201704/2017-04-15.html"/>
    <id>http://archmee.github.io/201704/2017-04-15.html</id>
    <published>2017-04-14T16:00:00.000Z</published>
    <updated>2017-04-20T17:21:15.783Z</updated>
    
    <content type="html">&lt;p&gt;这周干了大致这样几件事情&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4.9 学习使用jshint&lt;/li&gt;
&lt;li&gt;4.10 使用artTemplate分离js中的html模板代码&lt;/li&gt;
&lt;li&gt;4.13 学习并使用css预处理less&lt;/li&gt;
&lt;li&gt;4.15 学习gulp基本用法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于jshint我已经写了篇blog，这里不再介绍，下面来谈谈其他几个小点。&lt;/p&gt;
&lt;h2 id=&quot;artTemplate&quot;&gt;&lt;a href=&quot;#artTemplate&quot; class=&quot;headerlink&quot; title=&quot;artTemplate&quot;&gt;&lt;/a&gt;artTemplate&lt;/h2&gt;&lt;p&gt;要说模板引擎众多，诸如Mustcache，和基于Mustcache的Handlebars、或者Underscore的template，或者jQuery自带的，但是最后我相中了doT和artTemplate，而选择artTemplate是因为官网文档友好，入门简单。而且维护者比较勤，距离我在代码中使用artTemplate才几天，我刚打开官网看到又有更新动态，从文档的更新可以看出作者在加入新功能和优化。&lt;br&gt;&lt;a href=&quot;https://github.com/aui/art-template&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;artTemplate官网&lt;/a&gt;，介绍如是&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;art-template 是一个性能出众、设计巧妙的模板引擎，无论在 NodeJS 还是在浏览器中都可以运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;虽然官网介绍有预编译什么高级功能，但对我目前没什么用，我只需要基础功能即可。&lt;br&gt;artTemplate分为原生语法和简单语法，我选择了简单语法。&lt;br&gt;准备写从如何从下载到正式跑通的基础入门，但是不幸的是，官网文档更新后我都有点不认识了，所以要学习的同学请查看官网。&lt;br&gt;&lt;img src=&quot;http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/09/pcmoren_tanshou_org.png&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/09/pcmoren_tanshou_org.png&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/09/pcmoren_tanshou_org.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;CSS预处理器Less&quot;&gt;&lt;a href=&quot;#CSS预处理器Less&quot; class=&quot;headerlink&quot; title=&quot;CSS预处理器Less&quot;&gt;&lt;/a&gt;CSS预处理器Less&lt;/h2&gt;&lt;p&gt;由于CSS不具备编程能力，而随着现代Web应用开发的复杂度增加，预处理器和后处理器应运而生。预处理器有诸如Less、Sass、Stylus，Less虽稍弱一点但是简单，所以我选择了Less，等以后需要更强大功能的时候再选择其他的，后处理器有诸如PostCSS，它们之间的区别，在我给出的参考资料中有介绍，我就不献丑了。&lt;/p&gt;
&lt;h3 id=&quot;如何使用&quot;&gt;&lt;a href=&quot;#如何使用&quot; class=&quot;headerlink&quot; title=&quot;如何使用&quot;&gt;&lt;/a&gt;如何使用&lt;/h3&gt;&lt;h4 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class=&quot;headerlink&quot; title=&quot;方法一&quot;&gt;&lt;/a&gt;方法一&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;安装nodejs和npm&lt;/li&gt;
&lt;li&gt;再安装&lt;code&gt;npm install less -g&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;然后在命令行编译&lt;code&gt;lessc file.less &amp;gt; file.css&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在html文件中引入css文件而不是less&lt;h4 id=&quot;方法二&quot;&gt;&lt;a href=&quot;#方法二&quot; class=&quot;headerlink&quot; title=&quot;方法二&quot;&gt;&lt;/a&gt;方法二&lt;/h4&gt;在浏览器端直接引入less文件，我没用过，不发言。&lt;h4 id=&quot;方法三&quot;&gt;&lt;a href=&quot;#方法三&quot; class=&quot;headerlink&quot; title=&quot;方法三&quot;&gt;&lt;/a&gt;方法三&lt;/h4&gt;安装一个图形化编译软件，比如&lt;a href=&quot;http://koala-app.com/index-zh.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;koala&lt;/a&gt;，将less项目拖入，它会在less改变时自动编译成css&lt;h4 id=&quot;方法四&quot;&gt;&lt;a href=&quot;#方法四&quot; class=&quot;headerlink&quot; title=&quot;方法四&quot;&gt;&lt;/a&gt;方法四&lt;/h4&gt;结合IDE使用，比如SublimeText有专门的less2css插件。&lt;h4 id=&quot;方法五&quot;&gt;&lt;a href=&quot;#方法五&quot; class=&quot;headerlink&quot; title=&quot;方法五&quot;&gt;&lt;/a&gt;方法五&lt;/h4&gt;结合自动化构建工具使用，比如我用gulp，然后用gulp-less插件仍然可以完成编译工作&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h4&gt;&lt;p&gt;慕课网也有&lt;a href=&quot;http://www.imooc.com/course/list?c=sassless&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;less的入门课程&lt;/a&gt;&lt;br&gt;至于其它事宜，请查看&lt;a href=&quot;http://lesscss.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网&lt;/a&gt;，或者&lt;a href=&quot;http://www.lesscss.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Less中文网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关于各种预处理器的对比文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://efe.baidu.com/blog/revisiting-css-preprocessors/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;再谈 CSS 预处理器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://caibaojian.com/css-processor.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS 预处理器与 CSS 后处理器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;使用gulp改善开发流程&quot;&gt;&lt;a href=&quot;#使用gulp改善开发流程&quot; class=&quot;headerlink&quot; title=&quot;使用gulp改善开发流程&quot;&gt;&lt;/a&gt;使用gulp改善开发流程&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;用自动化构建工具增强你的工作流程！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;gulp和Grunt属于同一个对比行列，区别是gulp是基于流，而Grunt基于文件；gulp采用js语言编程控制，而Grunt使用配置文件。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://gulpjs.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gulp官网&lt;/a&gt; 和 &lt;a href=&quot;http://www.gulpjs.com.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gulp 中文网&lt;/a&gt; 提供了入门、文档、API、插件等介绍和使用方法&lt;br&gt;要想了解一个gulp插件如何使用的方法，直接到&lt;a href=&quot;http://gulpjs.com/plugins/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gulp插件官网&lt;/a&gt;搜索你需要的插件，然后点进去就可以找到了。&lt;/p&gt;
&lt;p&gt;我现在使用了这几个插件：&lt;/p&gt;
&lt;p&gt;gulp-less：这里有一篇&lt;a href=&quot;http://www.ydcss.com/archives/34&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gulp-less入门文章&lt;/a&gt;&lt;br&gt;gulp-browser-sync：这是一个开发时自动刷新浏览器的插件&lt;br&gt;gulp-imagemin：压缩图片&lt;br&gt;gulp-clean-css：压缩css&lt;br&gt;gulp-csslint：校验css&lt;br&gt;gulp-uglify：混淆压缩js&lt;br&gt;gulp-rename：重命名输出文件&lt;br&gt;gulp-concat：连接文件&lt;/p&gt;
&lt;p&gt;del不属于gulp插件，只是一个npm插件，用于清理文件文件夹：&lt;a href=&quot;http://www.gulpjs.com.cn/docs/recipes/delete-files-folder/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.gulpjs.com.cn/docs/recipes/delete-files-folder/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本来我还可以加入更多插件的，比如文件合并的gulp-concat，还有压缩js的gulp-uglify等，但是考虑后期代码还要做其他工作，暂时不想引入，所以后面再说&lt;/p&gt;
&lt;p&gt;——真的是一条分割线—–&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这周干了大致这样几件事情&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4.9 学习使用jshint&lt;/li&gt;
&lt;li&gt;4.10 使用artTemplate分离js中的html模板代码&lt;/li&gt;
&lt;li&gt;4.13 学习并使用css预处理less&lt;/li&gt;
&lt;li&gt;4.15 学习gulp基本用法
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
      <category term="artTemplate" scheme="http://archmee.github.io/tags/artTemplate/"/>
    
      <category term="gulp" scheme="http://archmee.github.io/tags/gulp/"/>
    
      <category term="jshint" scheme="http://archmee.github.io/tags/jshint/"/>
    
      <category term="less" scheme="http://archmee.github.io/tags/less/"/>
    
  </entry>
  
  <entry>
    <title>让你的代码接受考验——使用jshint</title>
    <link href="http://archmee.github.io/201704/2017-04-10.html"/>
    <id>http://archmee.github.io/201704/2017-04-10.html</id>
    <published>2017-04-09T16:00:00.000Z</published>
    <updated>2017-04-20T17:35:28.256Z</updated>
    
    <content type="html">&lt;h2 id=&quot;了解jshint&quot;&gt;&lt;a href=&quot;#了解jshint&quot; class=&quot;headerlink&quot; title=&quot;了解jshint&quot;&gt;&lt;/a&gt;了解jshint&lt;/h2&gt;&lt;p&gt;安装：&lt;a href=&quot;http://jshint.com/install/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://jshint.com/install/&lt;/a&gt;&lt;br&gt;文档：&lt;a href=&quot;http://jshint.com/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://jshint.com/docs/&lt;/a&gt;&lt;br&gt;所有配置项：&lt;a href=&quot;http://jshint.com/docs/options/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://jshint.com/docs/options/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h3&gt;&lt;p&gt;jshint有一系列的默认警告，但是它也被设计可配置的。&lt;br&gt;官网上说有三种主要方法配置jshint&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;命令行通过 –config 选项手动指定配置文件&lt;/li&gt;
&lt;li&gt;.jshintrc后缀的文件&lt;/li&gt;
&lt;li&gt;或者通过package.json中指定jshintConfig选项&lt;br&gt;还有下面两种算是辅助方法吧&lt;/li&gt;
&lt;li&gt;内联配置也算是一种吧&lt;/li&gt;
&lt;li&gt;在IDE的jshint插件中也可以配置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;jshint配置文件是一个简单的json文件，用来指定jshint选项的开或关，配置项在上面提供的网址中查看。示例：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;undef&quot;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;unused&quot;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;globals&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;MY_GLOBAL&quot;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;内联配置&quot;&gt;&lt;a href=&quot;#内联配置&quot; class=&quot;headerlink&quot; title=&quot;内联配置&quot;&gt;&lt;/a&gt;内联配置&lt;/h3&gt;&lt;p&gt;jshint也可以采用内联配置，和内联css、js概念上差不多，就是直接将jshint配置项写到js文件的注释中，不过要以jshint提供的关键字开头才能识别，各个配置项之间用逗号分隔。例如&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* jshint undef: true, unused: true */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* globals MY_GLOBAL */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;而且，这些注释是有函数作用域的，即如果你将配置注释放到函数内部，那么这些配置就只影响该函数。&lt;/p&gt;
&lt;h3 id=&quot;指令&quot;&gt;&lt;a href=&quot;#指令&quot; class=&quot;headerlink&quot; title=&quot;指令&quot;&gt;&lt;/a&gt;指令&lt;/h3&gt;&lt;p&gt;jshint指令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;jshint：/&lt;em&gt; jshint strict: true &lt;/em&gt;/&lt;/li&gt;
&lt;li&gt;jshint兼容的jslint：/&lt;em&gt; jslint vars: true &lt;/em&gt;/&lt;/li&gt;
&lt;li&gt;globals: /&lt;em&gt; globals MY_LIB: false &lt;/em&gt;/，你也可以指定一个黑名单确保某些全局名称没有被使用：/&lt;em&gt; globals -BAD_LIB &lt;/em&gt;/&lt;/li&gt;
&lt;li&gt;exported：/&lt;em&gt; exported EXPORTED_LIB &lt;/em&gt;/，告诉jshint在当前文件中定义的却未使用或在其他地方使用的全局变量&lt;/li&gt;
&lt;li&gt;ignore：告诉jshint要忽略的代码块，在ignore:start 和 ignore:end 之间的代码将不会被传递给jshint：&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Code here will be linted with JSHint.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* jshint ignore:start */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Code here will be ignored by JSHint.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* jshint ignore:end */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;``&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;`	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;另外，也可以通过行尾注释来忽略单行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ignoreThis(); // jshint ignore:line&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### jsint选项&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jshint选项有两种类型的选项：强制的 和 宽松的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jshint --verbose jsfile，可以查看具体的代码警告，每种警告都有一个号码，可以通过jshint配置来忽略该警告：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;``&lt;/span&gt;js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* jshint -W034 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;不过这一条只对代码警告有用(W开头)，对代码错误无用(E开头)&lt;/li&gt;
&lt;li&gt;和这个号码有关的警告都将被禁止&lt;br&gt;不过可以配置重新打开警告：/&lt;em&gt; jshint +W034 &lt;/em&gt;/&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上面这个功能特别有用的地方就在于，当你知道某个有警告的代码是安全的，你可以禁用它，在随后的代码中在重新打开，比如&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; y = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.create(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*jshint -W089 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; prop &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; y) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*jshint +W089 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其他细节描述需要自己去看文档，我懒得翻译了&lt;/p&gt;
&lt;h2 id=&quot;SublimeText插件&quot;&gt;&lt;a href=&quot;#SublimeText插件&quot; class=&quot;headerlink&quot; title=&quot;SublimeText插件&quot;&gt;&lt;/a&gt;SublimeText插件&lt;/h2&gt;&lt;p&gt;如果按照上述方法安装了jshint，那么久可以在命令行中开始使用了，但是对于经常开发的同学会不方便，所以是可以作为IDE的插件来使用的。&lt;br&gt;由于我使用的是ST3，那么我就只谈谈我如何基于ST3来使用的。&lt;br&gt;官网推荐了三个基于ST的插件，最强大的是SublimeLinter3（基于ST3），不过强大也就意味着复杂，安装配置都稍显复杂，因为SublimeLinter3只是一个代码校验工具管理器，它可以对多种语言进行校验，而jshint只是它的可安装的插件，所以如果要成功用上jshint，还要单独安装jshint插件并配置，差不多同时需要安装Nodejs、SublimeLinter3、jshint的npm插件、以及SublimeLinter3-jshint，详细的安装过程可参考&lt;a href=&quot;https://gaohaoyang.github.io/2015/03/26/sublimeLinter/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇博客&lt;/a&gt;。&lt;br&gt;虽然繁琐，但是如果你的开发需要同时验证多种语言的话还是不错的一个解决方案，比如对CSS校验它就提供了SublimeLinter3-csslint，当然csslint也是一个可单独安装使用的工具，只是SublimeLinter3对它提供了支持。&lt;/p&gt;
&lt;p&gt;不过对于仅仅只想验证js代码的我来说，SublimeLinter就太麻烦了，所以我选择了&lt;a href=&quot;https://github.com/victorporof/Sublime-JSHint&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sublime-JSHint Gutter&lt;/a&gt;，进入ST的install package面板，输入&lt;code&gt;JSHint Gutter&lt;/code&gt;即可一键安装（注意：不需要再单独安装jshint的npm插件）。如果英文吃力的话可以参考这篇博客 &lt;a href=&quot;https://jinlong.github.io/2014/10/25/jshint-configuration/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSHint 配置浅析&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;按下 &lt;code&gt;Ctrl+Shift+j&lt;/code&gt; 让你的代码接受考验吧。&lt;br&gt;如果有问题的话记得在package setting中打开JSHint Gutter的菜单看看有什么配置需要更改的就好了，比如node的PATH指向是否正确。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;了解jshint&quot;&gt;&lt;a href=&quot;#了解jshint&quot; class=&quot;headerlink&quot; title=&quot;了解jshint&quot;&gt;&lt;/a&gt;了解jshint&lt;/h2&gt;&lt;p&gt;安装：&lt;a href=&quot;http://jshint.com/install/&quot; target
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
      <category term="jshint" scheme="http://archmee.github.io/tags/jshint/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 234~273 天</title>
    <link href="http://archmee.github.io/201704/2017-04-08.html"/>
    <id>http://archmee.github.io/201704/2017-04-08.html</id>
    <published>2017-04-07T16:00:00.000Z</published>
    <updated>2017-04-20T17:43:07.961Z</updated>
    
    <content type="html">&lt;p&gt;这可能是一篇流水账，但是用来梳理这40天都干了什么事情是一件很有意义的事情，尤其是对我自己而言。&lt;br&gt;首先，上一篇博客最后留下的计划都没有实现，因为我似乎忘了一件很重要的事情，那就是 &lt;a href=&quot;https://github.com/baidu-ife/ife/tree/master/2015_spring/task/task0004&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IFE2015 task4&lt;/a&gt; 还没有完成，我决定尝试一下。当然，计划往往就不是用来实现的。&lt;/p&gt;
&lt;h2 id=&quot;事件大纲&quot;&gt;&lt;a href=&quot;#事件大纲&quot; class=&quot;headerlink&quot; title=&quot;事件大纲&quot;&gt;&lt;/a&gt;事件大纲&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;3月初 开始学习IFE2015 task4提供的移动端开发入门资料&lt;/li&gt;
&lt;li&gt;3.13 完成了第一条，并准备开始实践——重构任务3之适配移动端&lt;/li&gt;
&lt;li&gt;3.21 看了一本叫《SPA设计与架构》的书，在上一条开始后我并没有马上动手，而是买了这本书，书是好书，并且对比了几种框架来学习，并且围绕前端工程化讲解了SPA路由、模块化（requirejs）、自动构建（gulp）、单元测试（Qunit）、服务端通信和Promise的用法。但是目前对我的移动端适配一点用处都没有，而且还不打算对任务3进行完全重构，采用工具是后面的事情，但是这本书从思想上算是帮我拨开了重重迷雾。（有空上学习笔记）&lt;/li&gt;
&lt;li&gt;3.31 完成移动端布局适配并在模拟器上成功测试，但是在真机测试时发现了诸多问题，并开始改进，有些什么样的问题以及如何解决的方案都在后面&lt;/li&gt;
&lt;li&gt;4.5 已经解决了移动端真机上大部分问题，并且对界面做了很多美化调整和css的合并工作，&lt;/li&gt;
&lt;li&gt;4.6至7 重构分类模块，改写了用户提示部分的功能，重构带到的目的写在后面。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;适配移动端遇到的问题&quot;&gt;&lt;a href=&quot;#适配移动端遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;适配移动端遇到的问题&quot;&gt;&lt;/a&gt;适配移动端遇到的问题&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在没有处理手势的情况下，几个定宽100%的页面之间可以直接通过手指滚动，而且从页面底部的横向导航条可以看出宽度不是不是100%而是200%或者更多&lt;br&gt; 原因: 几个内部page虽然都是100%，但同时也是absolute定位，所以影响了外层main&lt;br&gt; 解决：对外层main绝对定位并定宽100%以及指定overflow为hidden&lt;/li&gt;
&lt;li&gt;打开app隐藏工具栏&lt;br&gt; 解决：好吧，这条我用别人推荐的setTimeout+scrollTop方法没实现，只能手动上滑隐藏&lt;/li&gt;
&lt;li&gt;添加编辑任务的页面有几个问题&lt;ul&gt;
&lt;li&gt;input text内的文字位置不对&lt;br&gt;  解决：input text继承了父元素的line-height高度导致的，重新指定为text框一样的高度即可&lt;/li&gt;
&lt;li&gt;input date不能弹出日期选择器&lt;br&gt;  解决，因为之前在js中处理了指定的事件后就阻止了其他地方单击事件的行为，结果误杀了&lt;/li&gt;
&lt;li&gt;字体太小需要调整&lt;br&gt;  解决：使用rem&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;页面的滚动动画在qq浏览器中可以，但是在默认的红米2自带浏览器中却直接跳转，省略了中间的过渡动画，搜索得知该浏览器是opera的。&lt;br&gt; 原因：手机浏览器内核比较旧，不支持CSS3标准&lt;br&gt; 解决：在page类的规则中transition要写成带浏览器前缀的兼容方式，后面不指定对哪种行为的过渡，如果要指定transform，那就要写成带浏览器前缀的transform，比如-webkit-transition: -webkit-transform;）&lt;/li&gt;
&lt;li&gt;页内区域滚动不方便甚至滚不动&lt;br&gt; 解决，要在加了overflow=auto希望滚动的绝对定位元素的外层绝对定位元素加上overflow=hidden，其他条件我没试过，只是我的情况刚好是这样&lt;/li&gt;
&lt;li&gt;-webkit-内核的浏览器点击元素闪烁问题&lt;br&gt; 解决：-webkit-tap-highlight-color: transparent;&lt;/li&gt;
&lt;li&gt;ipad上对transform实现的翻页效果不感冒，中间会白屏闪烁，而且对hover类不起作用，长按也不行&lt;br&gt; 解决：绑定ontuchend事件，事件处理函数为空即可，同时解决了这两个问题。&lt;/li&gt;
&lt;li&gt;如何让一组按钮在容器中水平垂直居中 &lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;btns&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; table&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.btns&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;.btns-inner&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; table-cell&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;text-align&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; center&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;vertical-align&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; middle&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;重构带来的变化&quot;&gt;&lt;a href=&quot;#重构带来的变化&quot; class=&quot;headerlink&quot; title=&quot;重构带来的变化&quot;&gt;&lt;/a&gt;重构带来的变化&lt;/h2&gt;&lt;p&gt;我不是全部重构，只是单单对分类模块的数据存储的方式一直耿耿于怀。虽然还做了其他代码清理工作，但都不是重点。&lt;br&gt;之前有一篇博客我记录了实现task3的思路，以及数据存储方式。所有分类用key值存储在一个对象中，然后将这个汇总的对象用了一个名为category_list的key存进了localStorage，每次打开app都要加载分类数据，而且仅仅只有这一次读取，这个分类被读出后就一直保存在内存中使用直到关闭app或网页，每次分类数据发生变更则直接更改内存中的对象，然后再次更新到localStorage。&lt;br&gt;app当然还是可以运行，但是这种实现有什么问题？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：这个方法的优点就是一次读取，终身使用（app打开期间），由于分类保存在内存中，所以每当分类有新的更新或读取操作都会很快，但是我的理解是，分类这个东西一般只在某一段时间高频率的添加删除更新数据，一般分类创建后后期更新非常少，更多的时候大家都是对任务操作频率更高一点。&lt;br&gt;还有一个优点是由于我的分类设计为多级的（不限），所以整个category不管数据还是DOM都是以树状结构呈现的，所以要遍历category树是肯定的，所以直接从内存读取速度也会很快，但是仅限于app打开时的首次加载。&lt;/li&gt;
&lt;li&gt;缺点：一次读取所有分类数据在app运行期间一直滞留在内存中很少使用，严重浪费内存，这一条已经足够了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我用表格来模拟一下在重构前后localStorage的变化&lt;br&gt;重构前：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;key&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;category_list&lt;/td&gt;
&lt;td&gt;[分类对象1, 分类对象2, 分类对象3]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;todoid1&lt;/td&gt;
&lt;td&gt;todo对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;重构后：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;key&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;topCatId&lt;/td&gt;
&lt;td&gt;catid1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;catid1&lt;/td&gt;
&lt;td&gt;分类对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;todoid1&lt;/td&gt;
&lt;td&gt;todo对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;可能有人发现多出了一个topCatId，好吧，其实前面忘了交代，考虑到让整个category更像只有一个根节点的树状，所以我要维护一个“顶级分类”，顶级分类下的子分类就是一级分类，下面的依次类推，而顶级分类仍然是一个分类对象，所以他要和其他分类放在一起组成一张“表”，所以我要拿到它的id确保它就是根节点。&lt;/p&gt;
&lt;p&gt;重构之前也是有这个topCatId存在的，只是他没有被放置在localStorage中，而是写死在了程序中，那也就意味着不够灵活，如果发生变更，尤其是在程序员在更新程序时将其改变，那么也就意味着老用户在打开同一个网站或app时看不到原来的数据或者发生错误，因为程序在localStorage中得不到正确的数据，虽然用户原来的数据都还在。&lt;/p&gt;
&lt;p&gt;而重构之后的方法则更为灵活，在程序初始化时，会读取topCatId，如果有，则开始遍历分类树了，如果没有，则新建一个“顶级分类”，将顶级分类的id存储为topCatId即可。perfect！&lt;/p&gt;
&lt;h2 id=&quot;PC和客户端展示&quot;&gt;&lt;a href=&quot;#PC和客户端展示&quot; class=&quot;headerlink&quot; title=&quot;PC和客户端展示&quot;&gt;&lt;/a&gt;PC和客户端展示&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/201704080055.png&quot; alt=&quot;GTD tool pc端&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/201704080055.gif&quot; alt=&quot;GTD tool 移动端&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;The-Next&quot;&gt;&lt;a href=&quot;#The-Next&quot; class=&quot;headerlink&quot; title=&quot;The Next&quot;&gt;&lt;/a&gt;The Next&lt;/h2&gt;&lt;p&gt;下一步就是学习nodejs、es6、vue2、less、sass、gulp、webpack、requirejs、seajs&lt;br&gt;等balabalabalabala，计划总是会变的，who knows！&lt;br&gt;&lt;img src=&quot;http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/09/pcmoren_tanshou_org.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://junmer.github.io/mobile-dev-get-started/#/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://junmer.github.io/mobile-dev-get-started/#/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/jtyjty99999/mobileTech&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/jtyjty99999/mobileTech&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/maxzhang/maxzhang.github.com/issues/21&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/maxzhang/maxzhang.github.com/issues/21&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/maxzhang/maxzhang.github.com/issues/22&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/maxzhang/maxzhang.github.com/issues/22&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/maxzhang/maxzhang.github.com/issues/23&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/maxzhang/maxzhang.github.com/issues/23&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/maxzhang/maxzhang.github.com/issues/32&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/maxzhang/maxzhang.github.com/issues/32&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.css88.com/archives/6410&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.css88.com/archives/6410&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.meow.re/original/2015/04/27/screen-adaptation-in-mobileweb/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.meow.re/original/2015/04/27/screen-adaptation-in-mobileweb/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://isux.tencent.com/web-app-rem.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://isux.tencent.com/web-app-rem.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/yexiaochai/p/4219523.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/yexiaochai/p/4219523.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/rubyisaPM/p/4380056.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/rubyisaPM/p/4380056.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.codingserf.com/index.php/2014/07/responsive-and-mobile-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.codingserf.com/index.php/2014/07/responsive-and-mobile-1/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.codingserf.com/index.php/2014/08/responsive-and-mobile-2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.codingserf.com/index.php/2014/08/responsive-and-mobile-2/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.html-js.com/article/2402&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.html-js.com/article/2402&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.html-js.com/article/2400&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.html-js.com/article/2400&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.w3cplus.com/css3/css3-3d-transform.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.w3cplus.com/css3/css3-3d-transform.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.w3cplus.com/mobile/mobile-terminal-refactoring-slider.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.w3cplus.com/mobile/mobile-terminal-refactoring-slider.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.w3cplus.com/blog/tags/429.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.w3cplus.com/blog/tags/429.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.codingserf.com/index.php/2014/02/css3-transitions-animations/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.codingserf.com/index.php/2014/02/css3-transitions-animations/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://gaohaoyang.github.io/2015/06/17/web-app/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://gaohaoyang.github.io/2015/06/17/web-app/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这可能是一篇流水账，但是用来梳理这40天都干了什么事情是一件很有意义的事情，尤其是对我自己而言。&lt;br&gt;首先，上一篇博客最后留下的计划都没有实现，因为我似乎忘了一件很重要的事情，那就是 &lt;a href=&quot;https://github.com/baidu-ife/ife/tr
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
      <category term="web app" scheme="http://archmee.github.io/tags/web-app/"/>
    
  </entry>
  
  <entry>
    <title>移动WEB开发入门学习笔记</title>
    <link href="http://archmee.github.io/201703/2017-03-13.html"/>
    <id>http://archmee.github.io/201703/2017-03-13.html</id>
    <published>2017-03-12T16:00:00.000Z</published>
    <updated>2017-04-20T16:32:09.803Z</updated>
    
    <content type="html">&lt;h2 id=&quot;移动WEB开发入门&quot;&gt;&lt;a href=&quot;#移动WEB开发入门&quot; class=&quot;headerlink&quot; title=&quot;移动WEB开发入门&quot;&gt;&lt;/a&gt;移动WEB开发入门&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://junmer.github.io/mobile-dev-get-started/#/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;移动WEB开发入门&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;单位&quot;&gt;&lt;a href=&quot;#单位&quot; class=&quot;headerlink&quot; title=&quot;单位&quot;&gt;&lt;/a&gt;单位&lt;/h3&gt;&lt;p&gt;px - 固定大小&lt;br&gt;em: 是相对父元素的字体大小单位&lt;br&gt;rem: 是相对根元素的字体大小单位，可用于多屏适配，统一修改&lt;/p&gt;
&lt;h3 id=&quot;横竖屏&quot;&gt;&lt;a href=&quot;#横竖屏&quot; class=&quot;headerlink&quot; title=&quot;横竖屏&quot;&gt;&lt;/a&gt;横竖屏&lt;/h3&gt;&lt;p&gt;监听横竖屏切换&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;orientationchange&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// rerender something&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;针对横竖屏的样式&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;media&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;all and (orientation:portrait)&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;css&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 竖屏 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;media&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;all and (orientation:landscape)&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;css&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 横屏 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;兼容Flex：&quot;&gt;&lt;a href=&quot;#兼容Flex：&quot; class=&quot;headerlink&quot; title=&quot;兼容Flex：&quot;&gt;&lt;/a&gt;兼容Flex：&lt;/h3&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.page-wrap&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; -webkit-box&lt;/span&gt;&lt;/span&gt;;      &lt;span class=&quot;comment&quot;&gt;/* OLD - iOS 6-, Safari 3.1-6 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; -moz-box&lt;/span&gt;&lt;/span&gt;;         &lt;span class=&quot;comment&quot;&gt;/* OLD - Firefox 19- (buggy but mostly works) */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; -ms-flexbox&lt;/span&gt;&lt;/span&gt;;      &lt;span class=&quot;comment&quot;&gt;/* TWEENER - IE 10 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; -webkit-flex&lt;/span&gt;&lt;/span&gt;;     &lt;span class=&quot;comment&quot;&gt;/* NEW - Chrome */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; flex&lt;/span&gt;&lt;/span&gt;;             &lt;span class=&quot;comment&quot;&gt;/* NEW, Spec - Opera 12.1, Firefox 20+ */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;打开数字键盘：&quot;&gt;&lt;a href=&quot;#打开数字键盘：&quot; class=&quot;headerlink&quot; title=&quot;打开数字键盘：&quot;&gt;&lt;/a&gt;打开数字键盘：&lt;/h3&gt;&lt;p&gt; &lt;code&gt;&amp;lt;input type=&amp;quot;tel&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;隐藏地址栏：-setTimeout-function-window-scrollTo-0-1-0&quot;&gt;&lt;a href=&quot;#隐藏地址栏：-setTimeout-function-window-scrollTo-0-1-0&quot; class=&quot;headerlink&quot; title=&quot;隐藏地址栏： setTimeout(function(){ window.scrollTo(0, 1); }, 0);&quot;&gt;&lt;/a&gt;隐藏地址栏： &lt;code&gt;setTimeout(function(){ window.scrollTo(0, 1); }, 0);&lt;/code&gt;&lt;/h3&gt;&lt;h3 id=&quot;添加到主屏幕&quot;&gt;&lt;a href=&quot;#添加到主屏幕&quot; class=&quot;headerlink&quot; title=&quot;添加到主屏幕&quot;&gt;&lt;/a&gt;添加到主屏幕&lt;/h3&gt;&lt;p&gt;在iPhone,iPad,iTouch的safari上可以使用添加到主屏按钮将网站添加到主屏幕上：&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;apple-touch-icon&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;apple-touch-icon-iphone.png&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;apple-touch-icon&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;sizes&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;72x72&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;apple-touch-icon-ipad.png&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;apple-touch-icon&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;sizes&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;114x114&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;apple-touch-icon-iphone4.png&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;工具或库：&quot;&gt;&lt;a href=&quot;#工具或库：&quot; class=&quot;headerlink&quot; title=&quot;工具或库：&quot;&gt;&lt;/a&gt;工具或库：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;click 有 300± ms 延迟 服用 &lt;a href=&quot;https://github.com/ftlabs/fastclick&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fastclick&lt;/a&gt; 后, 可以解决 click 的延迟, 还可以防止 穿透(跨页面穿透除外), 嘿嘿嘿&lt;/li&gt;
&lt;li&gt;区域滚动 overflow:auto 不靠谱&lt;ul&gt;
&lt;li&gt;iscroll&lt;/li&gt;
&lt;li&gt;saber-scroll&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;hammerjs. 一个触摸手势库&lt;/li&gt;
&lt;li&gt;食指点击目标尺寸是44 x 44像素，拇指是72 x72像素 finger friendly design&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-WEBKIT-TAP-HIGHLIGHT-COLOR: RGBA(255,255,255,0)&lt;/code&gt;，可以屏蔽点击元素时出现的阴影, 常用于有事件代理的父元素&lt;/li&gt;
&lt;li&gt;font icon：矢量图标, 自由变化大小, 颜色; 妈妈再也不用担心我的切图&lt;/li&gt;
&lt;li&gt;base64：减少一个请求, 首屏图片无延迟; 图片没法gzip，而css可以&lt;/li&gt;
&lt;li&gt;lazyload：有流量就会放肆，没流量就会克制&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;CSS3&quot;&gt;&lt;a href=&quot;#CSS3&quot; class=&quot;headerlink&quot; title=&quot;CSS3&quot;&gt;&lt;/a&gt;CSS3&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;合理使用渐变/圆角/阴影&lt;/li&gt;
&lt;li&gt;别太多, 低端机 hold 不住&lt;/li&gt;
&lt;li&gt;代替js动画&lt;/li&gt;
&lt;li&gt;&lt;p&gt;性能好, 兼容好, why not?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;translate3d：开启GPU硬件加速, 提升动画渲染性能&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;避免事项&quot;&gt;&lt;a href=&quot;#避免事项&quot; class=&quot;headerlink&quot; title=&quot;避免事项&quot;&gt;&lt;/a&gt;避免事项&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;localStorage：每个域的最大长度为5MB&lt;/li&gt;
&lt;li&gt;&lt;p&gt;iframe：卡 cry, viewport 失效, iOS 宽高失效, fixed定位错误&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;fixed + input什么仇什么怨&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;移动商桥 ios/android 分版本 hack&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;调试&quot;&gt;&lt;a href=&quot;#调试&quot; class=&quot;headerlink&quot; title=&quot;调试&quot;&gt;&lt;/a&gt;调试&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安卓chrome远程调试&lt;br&gt;chrome://inspect/#devices&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;weinre&lt;br&gt;npm安装：npm install -g weinre&lt;br&gt;启动weinre：weinre –boundHost -all- –httpPort 8081&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;browserSync 神器推荐&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;移动前端不得不了解的HTML5-head-头标签&quot;&gt;&lt;a href=&quot;#移动前端不得不了解的HTML5-head-头标签&quot; class=&quot;headerlink&quot; title=&quot;移动前端不得不了解的HTML5 head 头标签&quot;&gt;&lt;/a&gt;移动前端不得不了解的HTML5 head 头标签&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.css88.com/archives/6410&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;移动前端不得不了解的HTML5 head 头标签（2016最新版）&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;基本标签&quot;&gt;&lt;a href=&quot;#基本标签&quot; class=&quot;headerlink&quot; title=&quot;基本标签&quot;&gt;&lt;/a&gt;基本标签&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;x-ua-compatible&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;ie=edge&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--移动端的页面这个可以忽略，具体可以查看本文Internet Explorer浏览器部分--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;width=device-width, initial-scale=1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--具体可以查看本文 为移动设备添加 viewport 部分--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 以上 3 个 meta 标签 *必须* 放在 head 的最前面；其他任何的 head 内容必须在这些标签的 *后面* --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;DOCTYPE&quot;&gt;&lt;a href=&quot;#DOCTYPE&quot; class=&quot;headerlink&quot; title=&quot;DOCTYPE&quot;&gt;&lt;/a&gt;DOCTYPE&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;doctype&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 使用 HTML5 doctype，不区分大小写 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Charset&quot;&gt;&lt;a href=&quot;#Charset&quot; class=&quot;headerlink&quot; title=&quot;Charset&quot;&gt;&lt;/a&gt;Charset&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;html5 之前网页中会这样写：&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/html; charset=utf-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;lang属性：&quot;&gt;&lt;a href=&quot;#lang属性：&quot; class=&quot;headerlink&quot; title=&quot;lang属性：&quot;&gt;&lt;/a&gt;lang属性：&lt;/h3&gt;&lt;p&gt;简体中文：&lt;code&gt;&amp;lt;html lang=&amp;quot;zh-cmn-Hans&amp;quot;&amp;gt;&lt;/code&gt;&lt;br&gt;繁体中文：&lt;code&gt;&amp;lt;html lang=&amp;quot;zh-cmn-Hant&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;meta标签分类：&quot;&gt;&lt;a href=&quot;#meta标签分类：&quot; class=&quot;headerlink&quot; title=&quot;meta标签分类：&quot;&gt;&lt;/a&gt;meta标签分类：&lt;/h3&gt;&lt;p&gt;meta标签根据属性的不同，可分为两大部分：http-equiv 和 name 属性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;http-equiv：相当于http的文件头作用，它可以向浏览器传回一些有用的信息，以帮助浏览器正确地显示网页内容。&lt;/li&gt;
&lt;li&gt;name属性：主要用于描述网页，与之对应的属性值为content，content中的内容主要是便于浏览器，搜索引擎等机器人识别，等等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;推荐使用的meta标签&quot;&gt;&lt;a href=&quot;#推荐使用的meta标签&quot; class=&quot;headerlink&quot; title=&quot;推荐使用的meta标签:&quot;&gt;&lt;/a&gt;推荐使用的meta标签:&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 设置文档的字符编码 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;x-ua-compatible&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;ie=edge&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 以上 3 个 meta 标签 *必须* 放在 head 的最前面；其他任何的 head 内容必须在这些标签的 *后面* --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 允许控制资源的过度加载 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;Content-Security-Policy&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;default-src &#39;self&#39;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 尽早地放置在文档中 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 仅应用于该标签下的内容 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- Web 应用的名称（仅当网站被用作为一个应用时才使用）--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;application-name&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;应用名称&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 针对页面的简短描述（限制 150 字符）--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 在*某些*情况下，该描述是被用作搜索结果展示片段的一部分 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;description&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;一个页面描述&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 控制搜索引擎的抓取和索引行为 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;robots&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;index,follow,noodp&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 所有的搜索引擎 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;googlebot&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;index,follow&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 仅对 Google 有效 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 告诉 Google 不显示网站链接的搜索框 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;google&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;nositelinkssearchbox&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 告诉 Google 不提供此页面的翻译 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;google&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;notranslate&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 验证 Google 搜索控制台的所有权 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;google-site-verification&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;verification_token&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 用来命名软件或用于构建网页（如 - WordPress、Dreamweaver）--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;generator&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;program&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 关于你的网站主题的简短描述 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;subject&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;你的网站主题&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 非常简短（少于 10 个字）的描述。主要用于学术论文。--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;abstract&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 完整的域名或网址 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;url&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;https://example.com/&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;directory&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;submission&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 基于网站内容给出一般的年龄分级 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;rating&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;General&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 允许控制 referrer 信息如何传递 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;referrer&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;never&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 禁用自动检测和格式化可能的电话号码 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;format-detection&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;telephone=no&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 通过设置为 “off” 完全退出 DNS 预取 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;x-dns-prefetch-control&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;off&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 在客户端存储 cookie，web 浏览器的客户端识别 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;set-cookie&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;name=value; expires=date; path=url&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 指定要显示在一个特定框架中的页面 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;Window-Target&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;_value&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 地理标签 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;ICBM&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;latitude, longitude&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;geo.position&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;latitude;longitude&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 国家代码 (ISO 3166-1): 强制性, 州代码 (ISO 3166-2): 可选; 如 content=&quot;US&quot; / content=&quot;US-NY&quot; --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;geo.region&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;country[-state]&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 如 content=&quot;New York City&quot; --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;geo.placename&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;city/town&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;SEO-优化部分：&quot;&gt;&lt;a href=&quot;#SEO-优化部分：&quot; class=&quot;headerlink&quot; title=&quot;SEO 优化部分：&quot;&gt;&lt;/a&gt;SEO 优化部分：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;页面标题标签(head 头部必须)：&lt;br&gt;&lt;code&gt;&amp;lt;title&amp;gt;your title&amp;lt;/title&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;页面关键词 keywords：&lt;br&gt;&lt;code&gt;&amp;lt;meta name=&amp;quot;keywords&amp;quot; content=&amp;quot;your keywords&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;页面描述内容 description：&lt;br&gt;&lt;code&gt;&amp;lt;meta name=&amp;quot;description&amp;quot; content=&amp;quot;your description&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;定义网页作者 author：&lt;br&gt;&lt;code&gt;&amp;lt;meta name=&amp;quot;author&amp;quot; content=&amp;quot;author,email address&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;定义网页搜索引擎索引方式，robotterms 是一组使用英文逗号「,」分割的值，通常有如下几种取值：none，noindex，nofollow，all，index和follow。&lt;br&gt;&lt;code&gt;&amp;lt;meta name=&amp;quot;robots&amp;quot; content=&amp;quot;index,follow&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;favicon-图标&quot;&gt;&lt;a href=&quot;#favicon-图标&quot; class=&quot;headerlink&quot; title=&quot;favicon 图标&quot;&gt;&lt;/a&gt;favicon 图标&lt;/h3&gt;&lt;p&gt;IE 11, Chrome, Firefox, Safari, Opera支持设置：&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;icon&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;path/to/favicon-16.png&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;sizes&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;16x16&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;image/png&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;icon&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;path/to/favicon-32.png&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;sizes&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;32x32&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;image/png&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;icon&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;path/to/favicon-48.png&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;sizes&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;48x48&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;image/png&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;icon&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;path/to/favicon-62.png&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;sizes&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;62x62&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;image/png&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;icon&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;path/to/favicon-192.png&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;sizes&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;192x192&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;image/png&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;viewport&quot;&gt;&lt;a href=&quot;#viewport&quot; class=&quot;headerlink&quot; title=&quot;viewport&quot;&gt;&lt;/a&gt;viewport&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;viewport 可以让布局在移动浏览器上显示的更好。 通常会写：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;width=device-width 会导致 iPhone 5 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边(&lt;a href=&quot;http://bigc.at/ios-webapp-viewport-meta.orz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://bigc.at/ios-webapp-viewport-meta.orz&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;content 参数：&lt;br&gt;  width viewport 宽度(数值/device-width)&lt;br&gt;  height viewport 高度(数值/device-height)&lt;br&gt;  initial-scale 初始缩放比例&lt;br&gt;  maximum-scale 最大缩放比例&lt;br&gt;  minimum-scale 最小缩放比例&lt;br&gt;  user-scalable 是否允许用户缩放(yes/no)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;viewport&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;width=device-width,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           height=device-height,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           inital-scale=1.0,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           maximum-scale=1.0,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           user-scalable=no;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;MobileWeb-适配总结&quot;&gt;&lt;a href=&quot;#MobileWeb-适配总结&quot; class=&quot;headerlink&quot; title=&quot;MobileWeb 适配总结&quot;&gt;&lt;/a&gt;MobileWeb 适配总结&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;www.meow.re/original/2015/04/27/screen-adaptation-in-mobileweb/&quot;&gt;MobileWeb 适配总结&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;固定高度，宽度自适应&lt;/li&gt;
&lt;li&gt;flex&lt;/li&gt;
&lt;li&gt;使用rem来&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;浅谈移动前端的最佳实践&quot;&gt;&lt;a href=&quot;#浅谈移动前端的最佳实践&quot; class=&quot;headerlink&quot; title=&quot;浅谈移动前端的最佳实践&quot;&gt;&lt;/a&gt;浅谈移动前端的最佳实践&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/yexiaochai/p/4219523.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;浅谈移动前端的最佳实践&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;单页or多页：&quot;&gt;&lt;a href=&quot;#单页or多页：&quot; class=&quot;headerlink&quot; title=&quot;单页or多页：&quot;&gt;&lt;/a&gt;单页or多页：&lt;/h3&gt;&lt;p&gt;spa也就是我们常常说的web应用程序webapp，被认为是业内的发展趋势，主要有两个优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户体验好&lt;/li&gt;
&lt;li&gt;可以更好的降低服务器压力&lt;br&gt;但是单页有几个致命的缺点：&lt;/li&gt;
&lt;li&gt;SEO支持不好，往往需要单独写程序处理SEO问题&lt;/li&gt;
&lt;li&gt;webapp本身的内存管理难，Javascript、Css非常容易互相影响&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Jquery-VS-Zepto&quot;&gt;&lt;a href=&quot;#Jquery-VS-Zepto&quot; class=&quot;headerlink&quot; title=&quot;Jquery VS Zepto&quot;&gt;&lt;/a&gt;Jquery VS Zepto&lt;/h3&gt;&lt;p&gt;主要对比在使用场景：jQuery体积大，兼容性好，Zepto体积小，兼容性不够，适用于移动端&lt;/p&gt;
&lt;h3 id=&quot;MVC框架选择&quot;&gt;&lt;a href=&quot;#MVC框架选择&quot; class=&quot;headerlink&quot; title=&quot;MVC框架选择&quot;&gt;&lt;/a&gt;MVC框架选择&lt;/h3&gt;&lt;p&gt;总结一句：不建议直接将业务库框架直接取来使用，更不建议使用过重的业务框架，最好是能明白框架想要解决的问题，与自己项目的实际需求，自己造轮子知根知底。&lt;/p&gt;
&lt;h3 id=&quot;框架建议&quot;&gt;&lt;a href=&quot;#框架建议&quot; class=&quot;headerlink&quot; title=&quot;框架建议&quot;&gt;&lt;/a&gt;框架建议&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;第三方库（基础库）：&lt;br&gt;requireJS+Zepto+阉割版underscore（将其中不太用到的方法去掉，主要使用模板引擎一块）+ Fastclick&lt;/li&gt;
&lt;li&gt;MVC库/UI库：&lt;br&gt;建议自己写，不要太臃肿，可以抄袭，可以借鉴，不要完全拿来就用&lt;br&gt;这样出来的一套框架比较轻量级，知根知底，不会出现改不动的情况，最后提一句：不经过调研，没有实际场景在框架中玩模式，玩高级理念死得快，不要为技术而技术。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;性能，网站是如何变慢的？&quot;&gt;&lt;a href=&quot;#性能，网站是如何变慢的？&quot; class=&quot;headerlink&quot; title=&quot;性能，网站是如何变慢的？&quot;&gt;&lt;/a&gt;性能，网站是如何变慢的？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;尺寸——慢的根源&lt;br&gt;  所以，尺寸变大的主要原因是因为冗余代码的产生，如何消除冗余代码是一个重点，也是一个难点。&lt;/li&gt;
&lt;li&gt;版本轮替——哪些能删的痛点&lt;br&gt;  业务团队不要依赖于框架的任何dom结构与css样式，特别不要将UI组件中的dom结构与样式单独抠出来使用，否则就准备肥皂吧&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;网络请求，请求是前端优化的生命，优化到最后，优化到极致，都会在请求数、请求量上做文章，常用并且实用的手段有：&lt;/p&gt;
&lt;h4 id=&quot;CSS冗余的解决方案&quot;&gt;&lt;a href=&quot;#CSS冗余的解决方案&quot; class=&quot;headerlink&quot; title=&quot;CSS冗余的解决方案&quot;&gt;&lt;/a&gt;CSS冗余的解决方案&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;CSS Sprites：CSS Sprites可以有效的减低请求数，偶尔还可以降低请求量，但是随着发展，可能会有以下问题：&lt;ul&gt;
&lt;li&gt;新增难&lt;/li&gt;
&lt;li&gt;删除难&lt;/li&gt;
&lt;li&gt;调整难&lt;/li&gt;
&lt;li&gt;响应式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;快的假象&quot;&gt;&lt;a href=&quot;#快的假象&quot; class=&quot;headerlink&quot; title=&quot;快的假象&quot;&gt;&lt;/a&gt;快的假象&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;lazyload：&lt;br&gt; 我们常说的延迟加载是图片延迟加载，其实非图片也可延迟加载，看实际需求即可。&lt;ul&gt;
&lt;li&gt;为img标签src设置统一的图片链接，而将真实链接地址装在自定义属性中。&lt;/li&gt;
&lt;li&gt;所以开始时候图片是不会加载的，我们将满足条件的图片的src重置为自定义属性便可实现延迟加载功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;fake页面：&lt;br&gt; 一个静态HTML页面，装载首屏的基本内容，让首页快速显示，然后js加载结束后会马上重新渲染整个页面，这个样子，用户就可以很快的看到页面响应，给用户一个快的错觉&lt;/li&gt;
&lt;li&gt;预加载：&lt;br&gt; 这里的预加载是在浏览器空闲的时候加载后续页面所需资源，是一种浪费用户流量的行为，属于以空间换时间的做法，实施难度也比较高。预加载的前提是不影响主程序的情况下偷偷的加载，也就是在浏览器空闲的时候加载，但是浏览器空闲似乎变得不可控制&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;合并脚本js文件&quot;&gt;&lt;a href=&quot;#合并脚本js文件&quot; class=&quot;headerlink&quot; title=&quot;合并脚本js文件&quot;&gt;&lt;/a&gt;合并脚本js文件&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;为什么要降低请求数？&lt;br&gt; 每次http请求都会带上一些额外信息，会导致其它开销，比如域名解析、开启连接、发送请求等操作，上述spirit也因此产生。&lt;/li&gt;
&lt;li&gt;浏览器并发数&lt;br&gt; chrome在请求资源下会有所限制，移动端的限制普遍在6个左右，这个时候在并发数被占满时，你的ajax便会被搁置，这在webapp中情况更加常见，所以网络限制的情况下请求数控制是必要的，而且可以降低服务器端的压力。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;离线存储&quot;&gt;&lt;a href=&quot;#离线存储&quot; class=&quot;headerlink&quot; title=&quot;离线存储&quot;&gt;&lt;/a&gt;离线存储&lt;/h4&gt;&lt;p&gt;工作中实际使用的离线缓存有localstorage与Application cache，这两个皆是好东西，一个常用于ajax请求缓存，一个常用于静态资源缓存。&lt;/p&gt;
&lt;h3 id=&quot;移动革命——Hybrid&quot;&gt;&lt;a href=&quot;#移动革命——Hybrid&quot; class=&quot;headerlink&quot; title=&quot;移动革命——Hybrid&quot;&gt;&lt;/a&gt;移动革命——Hybrid&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;拒绝native UI&lt;/li&gt;
&lt;li&gt;交互模型 &lt;a href=&quot;http://images.cnitblog.com/blog/294743/201501/201903092504221.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://images.cnitblog.com/blog/294743/201501/201903092504221.png&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hybrid的调试&lt;/li&gt;
&lt;li&gt;多webview&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;不恰当的需求&quot;&gt;&lt;a href=&quot;#不恰当的需求&quot; class=&quot;headerlink&quot; title=&quot;不恰当的需求&quot;&gt;&lt;/a&gt;不恰当的需求&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;唤醒app&lt;/li&gt;
&lt;li&gt;回退关闭弹出层&lt;/li&gt;
&lt;li&gt;全站IScroll化&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;移动WEB开发入门&quot;&gt;&lt;a href=&quot;#移动WEB开发入门&quot; class=&quot;headerlink&quot; title=&quot;移动WEB开发入门&quot;&gt;&lt;/a&gt;移动WEB开发入门&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://junmer.github.io/mobile-d
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
      <category term="web app" scheme="http://archmee.github.io/tags/web-app/"/>
    
  </entry>
  
  <entry>
    <title>IFE 2015 task3资料学习总结</title>
    <link href="http://archmee.github.io/201703/2017-02-06-2.html"/>
    <id>http://archmee.github.io/201703/2017-02-06-2.html</id>
    <published>2017-03-02T16:00:00.000Z</published>
    <updated>2017-03-21T10:42:14.567Z</updated>
    
    <content type="html">&lt;p&gt;其实这篇总结问应该是在任务三的开始部分就完成的，但我一开始就投入了代码的怀抱，迟迟不肯动手，直到在任务三完成之后，并且在摸索任务四的时候才每天留了点时间将其完成。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;这几个js中的难点几乎每天都会准时出现在各大技术网站上，这让人不得不冲动自己也来总结一番，趁还没忘记最近看的一堆参考资料。&lt;br&gt;我试图用最简洁的方式交一份满意的答卷。&lt;/p&gt;
&lt;h2 id=&quot;this&quot;&gt;&lt;a href=&quot;#this&quot; class=&quot;headerlink&quot; title=&quot;this&quot;&gt;&lt;/a&gt;this&lt;/h2&gt;&lt;p&gt;this在大多数OO语言中都是指当前对象引用，而在js中，却有几种不同的表现：&lt;br&gt;《js语言精粹》中明确指出this的值取决于调用的模式，js中一共有4中调用模式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;方法调用模式&lt;/strong&gt;，一个函数作为对象的方法被调用时，this被绑定到该对象&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;函数调用模式&lt;/strong&gt;，一个普通函数(非方法)被调用时，this绑定到全局对象，浏览器中即window&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;构造器调用模式&lt;/strong&gt;，在一个函数前带上new关键字来调用，内部会创建一个连接到该函数原型的新对象，同时this被绑定到那个新对象上&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;apply调用模式&lt;/strong&gt;，js提供了apply和call两个方法来更改this的绑定对象&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最常见的困惑是一个对象方法返回一个函数，其实这个时候的函数已经属于全局对象了，所以执行返回的函数中的this指向全局对象。&lt;br&gt;在给DOM绑定事件时候的this时也容易让人困惑，可以从鸟哥的 &lt;a href=&quot;www.laruence.com/2009/09/08/1076.html&quot;&gt;深入理解Javascript之this关键字&lt;/a&gt; 文中寻找答案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意事项：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;this始终指向此时&lt;strong&gt;函数/方法调用者&lt;/strong&gt;，而不是在定义函数/方法时指向的对象。&lt;/li&gt;
&lt;li&gt;this是&lt;strong&gt;执行上下文环境&lt;/strong&gt;的一个属性，而不是某个变量对象/活动对象的属性。&lt;br&gt;这个特点很重要，因为和变量不同，this是没有一个类似搜寻变量的过程。当你在代码中使用了this，这个 this的值就直接从执行的上下文中获取了，而不会从作用域链中搜寻。this的值只取决于进入上下文时的情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;闭包&quot;&gt;&lt;a href=&quot;#闭包&quot; class=&quot;headerlink&quot; title=&quot;闭包&quot;&gt;&lt;/a&gt;闭包&lt;/h2&gt;&lt;p&gt;闭包是什么呢？见名知意，即一个封闭的环境，即使用专业术语描述也相差无几。&lt;br&gt;闭包的作用是用来保存函数的执行上下文方便以后使用。&lt;br&gt;常见的闭包使用如 IIFE（立即执行表达式）、函数的柯里化，模块模式。&lt;br&gt;那么闭包在哪呢，通常闭包的形成都是在一个函数中返回一个函数的时候，由于返回的函数往往引用了父函数的上下文环境，导致父函数执行完成后内存没有得到回收/释放（引用计数机制），所以在返回的函数中可以访问父函数的上下文环境。这就形成了闭包。&lt;br&gt;上一个简单的示例：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sum = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; count = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        count += n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; count;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sum(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sum(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;示例中在父函数初始化了count变量，返回的函数中引用了count，sum保存了返回函数，在以后调用sum的过程中，count会始终存在并保存上次调用后的值，那么count存放在哪里的呢，它就是被存放在了返回的函数形成的闭包中（上下文环境）。关于是如何在返回的函数中执行的时候找到count变量的过程，那么就涉及到接下来要讲的作用域和作用域链了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意事项：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于每个标准函数在创建时候保存了[[Scope]]，所以理论上来讲，ECMAScript中的_所有函数都是闭包。&lt;br&gt;闭包是一个代码块（在ECMAScript中是一个函数）和以静态方式/词法方式进行存储的所有父作用域的一个集合体。所以，通过这些存储的作用域，函数可以很容易的找到自由变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;作用域作用域链&quot;&gt;&lt;a href=&quot;#作用域作用域链&quot; class=&quot;headerlink&quot; title=&quot;作用域作用域链&quot;&gt;&lt;/a&gt;作用域作用域链&lt;/h2&gt;&lt;p&gt;作用域是？&lt;br&gt;简单的说，作用域就是变量与函数的可访问范围，即作用域控制着标识符(变量/函数/形参等等)的可见性和生命周期。在JavaScript中，标识符的作用域只有全局作用域和函数作用域两种。没有用var声明的都属于全局作用域，if/for/while等语句块没有内部作用域，在其中声明的变量将属于当前函数的作用域。&lt;/p&gt;
&lt;p&gt;那么作用域链是什么呢？&lt;br&gt;在定义函数的时候该函数内部会有一个[[scope]]属性，它指向定义该函数的函数的作用域链，这个链的底端是全局对象，顶端是当前活动对象。&lt;br&gt;作用域链的形成是从函数调用开始的，首先在全局环境中，当前活动对象就是GO，当执行一个函数的时候，会为该函数创建一个执行上下文(excution context)，在执行上下文中有初始化后的this，活动对象AO、变量对象VO等属性，然后将活动对象加入到作用域链顶端，加入的过程可能是在[[scope chain]]中加入，也可能是直接链接到&lt;code&gt;__parent__&lt;/code&gt;。因为我看过的资料关于这个链的实现的描述大概分两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;js高程是一种类似数组的方式并且按函数调用栈的顺序保存其“作用域”的引用，&lt;a href=&quot;http://www.cnblogs.com/lhb25/archive/2011/09/06/javascript-scope-chain.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如图&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/2011090414454524_scope_chain.jpg&quot; alt=&quot;scope_chain实现&quot;&gt;&lt;/li&gt;
&lt;li&gt;其他资料也有描述的是一个&lt;code&gt;__parent__&lt;/code&gt;的内部属性来维护“父作用域”的引用，&lt;a href=&quot;http://www.nowamagic.net/librarys/veda/detail/1645&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;比如下图&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/2012_03_21_09_parent_scope.png&quot; alt=&quot;parent实现&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然两种方式都可行，但是参照js原型链的实现方式，可能第二种方法更靠谱，复杂度为O(n)。因为如果按照第一种方式，每次都要拷贝父作用域的作用域链很麻烦，而且耗费内存，复杂度估计O(2n)。&lt;/p&gt;
&lt;p&gt;作用域链的用途是什么呢，用来遍历查找标识符，闭包就是利用这点实现的。&lt;br&gt;查找一个标识符的顺序是：从作用域链的顶端，也就是自身的活动对象开始，如果存在则返回，如果不存在将继续搜索父函数的活动对象，依次查找，直到找到为止。如果整个作用域链上都无法找到（到全局对象结束），则返回undefined。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意事项：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;js中的函数运行在他们被定义的作用域，而不是被执行时候的作用域&lt;/li&gt;
&lt;li&gt;从作用域链的结构可以看出，在执行上下文的作用域链中，标识符所在的位置越深，读写速度就会越慢。因为全局变量总是存在于执行上下文作用域链的最末端，因此在标识符解析的时候，查找全局变量是最慢的。所以，在编写代码的时候应尽量少使用全局变量，尽可能使用局部变量。&lt;/li&gt;
&lt;li&gt;在代码执行过程中，作用域链可以通过使用with语句和catch从句对象来扩充（它们的对象参数将会被作为活动对象加入到作用域链顶端）。并且由于这些对象是简单的对象，它们可以拥有原型（和原型链）。这个事实导致作用域链查找变为&lt;em&gt;两个维度&lt;/em&gt;：&lt;ol&gt;
&lt;li&gt;先查找作用域链上的当前节点对象（活动）&lt;/li&gt;
&lt;li&gt;然后查找该对象的原型链（如果有），一直查找到原型链顶端，遍历作用域链，重复1,2步&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;原型和原型链&quot;&gt;&lt;a href=&quot;#原型和原型链&quot; class=&quot;headerlink&quot; title=&quot;原型和原型链&quot;&gt;&lt;/a&gt;原型和原型链&lt;/h2&gt;&lt;p&gt;首先需要搞清楚的问题是：当我们谈论原型时，我们到底在谈什么？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个函数都有一个&lt;code&gt;prototype&lt;/code&gt;属性，它指向一个对象，该对象就是在当该函数用作构造函数创建对象实例时，作为其对象实例的原型。通过该函数构造的所有对象共享该原型中的方法和属性。函数是一个对象，它有自己的原型但不是&lt;code&gt;prototype&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;每个对象都有一个原型，根据浏览器不同一般表示为&lt;code&gt;[[Prototype]]&lt;/code&gt;或者&lt;code&gt;__proto__&lt;/code&gt;(好像已被最新标准实现)，这才是我们真正谈论的原型，它从哪里来呢，就是我们在第一点提到的构造函数的那个&lt;code&gt;prototype&lt;/code&gt;属性。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那么原型链是什么，用来干什么？&lt;br&gt;所有对象都有一个原型，而每个原型又有自己的一个原型，就样形成了原型链，原型链的顶端是[[object prototype]]，该原型对象的的原型为null，就是原型链的终点。&lt;br&gt;当查找一个对象的属性时，js会从对象自己开始，然后从对象原型开始向上遍历原型链，直到找到指定属性为止，但如果直到原型链终点都仍然没有找到指定的属性，就会返回undefined。&lt;br&gt;下面看一张图总结原型原型链，是鸟哥&lt;a href=&quot;http://www.laruence.com/2010/05/13/1462.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章中提到的一张图&lt;/a&gt;，被我改进了一下，不过相交的地方不太好，有空重构一下。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/20170310_prototype.jpg&quot; alt=&quot;prototype&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意事项&lt;/strong&gt;&lt;br&gt;如果在对象实例中重写了原型链上的方法或属性，那么该实例中的方法或属性会屏蔽原型链中的同名方法或属性，如果想要访问原型链上的同名方法或属性，只能通过delete删除在该实例上定义的同名方法或属性。&lt;/p&gt;
&lt;p&gt;最后，我总结了一条关于原型原型链和作用域作用域链的明显区别：&lt;br&gt;原型原型链是用于在对象中查找属性和方法等标识符，作用域作用域链是用于查找变量和函数等标识符。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;若有错误，望不吝指正。&lt;br&gt;参考资料请见上一篇学习摘录。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;其实这篇总结问应该是在任务三的开始部分就完成的，但我一开始就投入了代码的怀抱，迟迟不肯动手，直到在任务三完成之后，并且在摸索任务四的时候才每天留了点时间将其完成。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;这几个js中的难点几乎每天都会准时出现在各大技术网站上，这让人不得不冲动自己也来总结一
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 186~233 天</title>
    <link href="http://archmee.github.io/201702/2017-02-27.html"/>
    <id>http://archmee.github.io/201702/2017-02-27.html</id>
    <published>2017-02-24T16:00:00.000Z</published>
    <updated>2017-03-12T18:28:11.097Z</updated>
    
    <content type="html">&lt;p&gt;从时间跨度上来说，几乎是两个月的时间，因为是在过年期间，所以会精力比较分散。&lt;br&gt;在1月下旬就完成了界面布局的工作，但是一直在思考尝试如何组织代码结构和数据结构。虽然说说网上有这方面的文章和书籍，但是我认为最开始还是要脱离别人的思维限制，先自己尝试更好，锻炼了自己的架构和思考能力，也会更清楚在无从下手到从0开发一个完整的项目的流程和遇到的问题，等完成后再对比成熟的方案也不失为一个好方案。在多次思考分析利弊之后，整个todo应用数据存储有了一个比较理想的方案，当然，数据都是存储在localStorage中，而整个软件采用模块模式来开发，但是被我分成了几个小模块。&lt;/p&gt;
&lt;h2 id=&quot;模块&quot;&gt;&lt;a href=&quot;#模块&quot; class=&quot;headerlink&quot; title=&quot;模块&quot;&gt;&lt;/a&gt;模块&lt;/h2&gt;&lt;p&gt;模块模式可以避免全局变量污染，并且可以很好的解耦。可能是我对模式的理解有偏差，我理想中应该是这样的架构，如下图，要涉及到发布/订阅模式以及MVC，但是不知道是否合适，因为js事件从本质来说就是发布/订阅模式（也可以说观察者）模式。毕竟是第一次实践设计模式的知识，只有慢慢试探了。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/20170310_jiagou1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;但是我最终完成的架构却是这样的，整个app分为4个模块，分类列表主要负责分类的列表数据和模板，todo列表负责分类的数据和模板，todo详情部分负责单条todo的详情和展示模板等，一个app部分负责协调上述几个部分的工作。这并不是很好的设计，最主要的问题是其中的模板对数据的依赖导致耦合严重，在后面的重构过程中将改变整个软件架构。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/20170310_jiagou2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;该应用的代码架构：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//分类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;categoryModule =  (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//操作 model &amp;amp; template&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//返回接口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//todo列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;todoModule =  (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//操作 model &amp;amp; template&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//返回接口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//todo详情&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;todoDetail = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//操作 model &amp;amp; template&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//返回接口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//app controller&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;appModule = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//code&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//初始化分类列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//初始化todo列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//初始化todo详情界面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//初始化事件绑定&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//等待用户交互触发事件并分发事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;数据存储&quot;&gt;&lt;a href=&quot;#数据存储&quot; class=&quot;headerlink&quot; title=&quot;数据存储&quot;&gt;&lt;/a&gt;数据存储&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;所有分类数据汇总存储到一个对象，每个分类就是该对象中一个用id作为键值的对象，这样做是为了方便按id索引单条分类数据，每条分类数据都是独立的，没有嵌套关系。&lt;/li&gt;
&lt;li&gt;整个对象中有一个在程序初始化时创建的分类对象作为顶级分类用于保存一级二级以及更多子分类，类似于DOM中的根节点。&lt;/li&gt;
&lt;li&gt;每个分类对象保存了父分类id和子分类id映射表和，熟悉DOM的同学一下就能get到这是借鉴了DOM的思想，不同的是这里不是保存引用。&lt;/li&gt;
&lt;li&gt;每个分类也保存了该分类下的todo列表映射，添加删除todo时要维护此表。&lt;/li&gt;
&lt;li&gt;todo数据是按照id单独存放的，也就是说，要获取todo，知道它的id后直接从localStorage中取出来，这样做也是因为方便对单条todo进行操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下是具体数据结构：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//分类列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;cid_1&quot;&lt;/span&gt;: &amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;cid_2&quot;&lt;/span&gt;: &amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//单条分类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;addTime&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1487710962417&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//添加时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;cid&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;cid_1487710962417&quot;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//分类id&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;pid&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;cid_0000000000001&quot;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//父分类id&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;title&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;未命名分类1&quot;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//分类名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;childCatList&quot;&lt;/span&gt;:[ &lt;span class=&quot;comment&quot;&gt;//保存直接子分类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;cid_1487883840564&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;cid_1487980933649&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;childTodoList&quot;&lt;/span&gt;:[ &lt;span class=&quot;comment&quot;&gt;//保存直接子todo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;tid_1487776376694&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;tid_1487776391312&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//单条todo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;addTime&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1487776376694&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//添加时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;tid&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;tid_1487776376694&quot;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//todo id&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;cid&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;cid_1487710962417&quot;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//分类id&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;emergency&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//紧急程度，暂时没用上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;title&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;未命名任务&quot;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//todo标题&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;content&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;出门交电费&quot;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//todo内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;status&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//状态1和-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;expireTime&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1487721600000&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//失效时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;完成&quot;&gt;&lt;a href=&quot;#完成&quot; class=&quot;headerlink&quot; title=&quot;完成&quot;&gt;&lt;/a&gt;完成&lt;/h2&gt;&lt;p&gt;在2月25号完成了该任务，翻看了一下IFE2015 task3的初级班和中级班的提交列表，发现自己实现得算是非常好的了，不过也花了好长时间。下面上图：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/2017-02-25_090953.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;遇到的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高度自适应布局，最开始我使用了float来布局，但是高度不能自适应&lt;br&gt;解决：最后在网上找到了高度自适应布局方案，使用了绝对定位技术，设置top和bottom为0或者你需要撑开的上下间隔即可。&lt;/li&gt;
&lt;li&gt;分类列表和todo列表设置了overflow:scroll，但是不管内容有没有超出滚动条都始终显示在那里很碍眼。&lt;br&gt;  解决：设置overflow为auto而不是scroll&lt;/li&gt;
&lt;li&gt;待解决：如何架构这个程序？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来的计划就是看完《设计模式》剩下的几章，以及刷一遍CSS3，ES6，然后开始学习React或者Vue就找工作了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这篇文章不是一笔写成，而是在完成任务三的过程中多次更新，所以不以发布时间为准。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;从时间跨度上来说，几乎是两个月的时间，因为是在过年期间，所以会精力比较分散。&lt;br&gt;在1月下旬就完成了界面布局的工作，但是一直在思考尝试如何组织代码结构和数据结构。虽然说说网上有这方面的文章和书籍，但是我认为最开始还是要脱离别人的思维限制，先自己尝试更好，锻炼了自己的架构和
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>IFE 2015 task3资料学习摘录</title>
    <link href="http://archmee.github.io/201702/2017-02-06-1.html"/>
    <id>http://archmee.github.io/201702/2017-02-06-1.html</id>
    <published>2017-01-31T16:00:00.000Z</published>
    <updated>2017-03-08T21:06:05.184Z</updated>
    
    <content type="html">&lt;h2 id=&quot;原型&quot;&gt;&lt;a href=&quot;#原型&quot; class=&quot;headerlink&quot; title=&quot;原型&quot;&gt;&lt;/a&gt;原型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;理解一个函数的原型属性(function’s prototype property )其实和实际的原型(prototype)没有关系对我们来说至关重要。&lt;/li&gt;
&lt;li&gt;A prototype chain is a finite chain of objects which is used to implemented inheritance and shared properties.（原型链是一个用于实现继承和共享属性的有限对象链）&lt;/li&gt;
&lt;li&gt;还有一点我们需要注意的是，我们可以赋值任何类型的对象到原型上，但是不能赋值原子类型的值，比如如下代码是无效的：&lt;code&gt;Cat.Prototype = 5;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;原型原型链是用于对象标识符查找（属性和方法），而作用域作用域链是用于普通标识符的查找（变量和函数）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;作用域、作用域链、闭包&quot;&gt;&lt;a href=&quot;#作用域、作用域链、闭包&quot; class=&quot;headerlink&quot; title=&quot;作用域、作用域链、闭包&quot;&gt;&lt;/a&gt;作用域、作用域链、闭包&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;当在函数中访问一个变量的时候，搜索顺序是先搜索自身的活动对象，如果存在则返回，如果不存在将继续搜索父函数的活动对象，依次查找，直到找到为止。如果整个作用域链上都无法找到，则返回undefined。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果函数存在Prototype原型对象，则在查找完自身的活动对象后再查找自身的原型对象，这就是Javascript中的变量查找机制。（&lt;strong&gt;经如下代码证明这一点是错误的&lt;/strong&gt;）&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;b&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        alert(i); &lt;span class=&quot;comment&quot;&gt;//0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        alert(y); &lt;span class=&quot;comment&quot;&gt;//error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        alert(x); &lt;span class=&quot;comment&quot;&gt;//error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    b.prototype.y=&lt;span class=&quot;string&quot;&gt;&#39;y=5&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.prototype.x=&lt;span class=&quot;string&quot;&gt;&#39;x=10&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; c=a();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在代码执行过程中，作用域链可以通过使用with语句和catch从句对象来增强（将它们的对象参数作为活动对象加入到作用域链顶端）。并且由于这些对象是简单的对象，它们可以拥有原型（和原型链）。这个事实导致作用域链查找变为&lt;em&gt;两个维度&lt;/em&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先是查找作用域链上的活动对象&lt;/li&gt;
&lt;li&gt;然后在每个作用域链上的活动对象上查找该对象的原型链（如果有原型）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注意，由于&lt;em&gt;每个&lt;/em&gt;（标准的）函数都在创建的时候保存了[[Scope]]，所以理论上来讲，ECMAScript中的&lt;em&gt;所有函数&lt;/em&gt;都是&lt;em&gt;闭包&lt;/em&gt;。&lt;br&gt;闭包是一个代码块（在ECMAScript是一个函数）和以静态方式/词法方式进行存储的所有父作用域的一个集合体。所以，通过这些存储的作用域，函数可以很容易的找到自由变量。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;this&quot;&gt;&lt;a href=&quot;#this&quot; class=&quot;headerlink&quot; title=&quot;this&quot;&gt;&lt;/a&gt;this&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;this始终指向此时函数/方法调用者，而不是在定义函数/方法时指向的对象。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;任何对象都可以作为上下文的this值。我想再次澄清对与ECMAScript中，与执行上下文相关的一些描述——特别是this的误解。通常，this 被错误地描述为变量对象（活动对象）的属性。 请牢记：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;this是执行上下文环境的一个属性，而不是某个变量对象/活动对象的属性&lt;br&gt;  这个特点很重要，因为和变量不同，this是没有一个类似搜寻变量的过程。当你在代码中使用了this，这个 this的值就直接从执行的上下文中获取了，而不会从作用域链中搜寻。this的值只取决于进入上下文时的情况。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注意this这个值在一个继承机制中，是指向它的当前对象，而不是从原型链上找到它时所属于的对象。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;有一种叫作冒充继承的方式代码如：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Cat.prototype = Animal.prototype;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样做的优点是效率比较高（不用执行和建立Animal的实例了），比较省内存。缺点是 Cat.prototype和Animal.prototype现在指向了同一个对象，那么任何对Cat.prototype的修改，都会反映到Animal.prototype。&lt;br&gt;为了解决这个问题，后来增加了一个在中间桥接的空白对象。&lt;br&gt;比如下面这个extend函数，就是YUI库如何实现继承的方法。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;extend&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;Child, Parent&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; F = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　F.prototype = Parent.prototype;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　Child.prototype = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; F();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　Child.prototype.constructor = Child;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　Child.uber = Parent.prototype;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;其他&quot;&gt;&lt;a href=&quot;#其他&quot; class=&quot;headerlink&quot; title=&quot;其他&quot;&gt;&lt;/a&gt;其他&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;JavaScript 不会保护 hasOwnProperty 被非法占用，因此如果一个对象碰巧存在这个属性，就需要使用外部的 hasOwnProperty 函数来获取正确的结果&lt;br&gt;// 使用{}对象的 hasOwnProperty&lt;br&gt;&lt;code&gt;{}.hasOwnProperty.call()&lt;/code&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在使用第三方JS类库的时候，往往有时候他们定义的原型方法是不能满足我们的需要，但是又离不开这个类库，所以这时候我们就需要重写他们的原型中的一个或者多个属性或function，我们可以通过声明的同样的名称（标识符）的形式来达到覆盖重写的功能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在浏览器中setTimeout、setInterval和匿名函数执行时的this是全局对象window&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;apply用于改变函数执行时的当前对象，当无参数时，当前对象为window，有参数时当前对象为该参数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;激活其它上下文的某个上下文被称为 调用者(caller) 。被激活的上下文被称为被调用者(callee) 。被调用者同时也可能是调用者(比如一个在全局上下文中被调用的函数调用某些自身的内部方法)。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;深入理解作用域&quot;&gt;&lt;a href=&quot;#深入理解作用域&quot; class=&quot;headerlink&quot; title=&quot;深入理解作用域&quot;&gt;&lt;/a&gt;深入理解作用域&lt;/h2&gt;&lt;p&gt;来自 &lt;a href=&quot;http://www.laruence.com/2009/05/28/863.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Javascript作用域原理：&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在JS中“一切皆是对象, 函数也是”&lt;/li&gt;
&lt;li&gt;在对应作用域内，函数定义会提升，但函数表达式没有提升&lt;/li&gt;
&lt;li&gt;JS权威指南中有一句很精辟的描述：“JavaScript中的函数运行在它们被定义的作用域里，而不是它们被执行的作用域里”&lt;/li&gt;
&lt;li&gt;ECMA262中所述作用域的实现：&lt;ol&gt;
&lt;li&gt;任何执行上下文时刻的作用域, 都是由作用域链(scope chain)来实现&lt;/li&gt;
&lt;li&gt;在一个函数被定义的时候, 会将该函数的&lt;code&gt;[[scope]]&lt;/code&gt;属性指向它此时的作用域链(scope chain)&lt;/li&gt;
&lt;li&gt;在一个函数被调用的时候，会创建一个活动对象，然后在活动对象中加入&lt;code&gt;this&lt;/code&gt;和&lt;code&gt;arguments&lt;/code&gt;属性，对于每一个函数的形参和变量，都命名为该活动对象的命名属性, 然后将这个活动对象加入到此时的作用域链的最前端&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;在调用函数执行之前, 会首先创建一个活动对象, 然后搜寻这个函数中的形参、局部变量定义和函数定义, 将它们作为这个活动对象的同名属性, 对于形参则直接赋值，对于局部变量定义，变量的值会在真正执行的时候才计算，此时只是简单的赋为&lt;code&gt;undefined&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;JS作为一门解释执行的语言其实是有预编译的过程的, JS在执行每一段代码之前, 都会首先处理&lt;code&gt;var&lt;/code&gt;关键字和&lt;code&gt;function&lt;/code&gt;定义式(函数定义式和函数表达式)。&lt;/li&gt;
&lt;li&gt;JS的预编译是以段为处理单元的… 而段是按&lt;code&gt;script&lt;/code&gt;标记来分的，所以一个script就是一个处理单元。　&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;来自 &lt;a href=&quot;http://www.cnblogs.com/lhb25/archive/2011/09/06/javascript-scope-chain.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;理解 JavaScript 作用域和作用域链&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数对象和其它对象一样，拥有可以通过代码访问的属性和一系列仅供JS引擎访问的内部属性。其中一个内部属性是&lt;code&gt;[[Scope]]&lt;/code&gt;，由ECMA-262标准第三版定义，该内部属性包含了函数被创建的作用域中对象的集合，这个集合被称为函数的作用域链，它决定了哪些数据能被函数访问。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在定义函数时，它的作用域链中会填入一个全局对象，该全局对象包含了所有全局变量，如下图所示（注意：图片只例举了全部变量中的一部分）：&lt;br&gt;&lt;img src=&quot;http://pic002.cnblogs.com/images/2011/36987/2011090414435366.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;执行此函数时会创建一个称为“运行时上下文(execution context)”的内部对象，运行时上下文定义了函数执行时的环境。每个运行时上下文都有自己的作用域链，用于标识符解析，当运行时上下文被创建时，它的作用域链初始化为当前运行函数的[[Scope]]所包含的对象。&lt;br&gt;而形参和变量按照它们出现在函数中的顺序被复制到运行时上下文的作用域链中。它们共同组成了一个新的对象，叫“活动对象(activation object)”，该对象包含了函数的所有局部变量、命名参数、&lt;code&gt;arguments&lt;/code&gt;以及&lt;code&gt;this&lt;/code&gt;，然后此对象会被加入到作用域链的前端，当运行期上下文被销毁，活动对象也随之销毁。新的作用域链如下图所示：&lt;br&gt;&lt;img src=&quot;http://pic002.cnblogs.com/images/2011/36987/2011090414444843.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从作用域链的结构可以看出，在运行期上下文的作用域链中，标识符所在的位置越深，读写速度就会越慢。如上图所示，因为全局变量总是存在于运行期上下文作用域链的最末端，因此在标识符解析的时候，查找全局变量是最慢的。所以，在编写代码的时候应尽量少使用全局变量，尽可能使用局部变量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;函数每次执行时对应的运行期上下文都是独一无二的，所以多次调用同一个函数就会导致创建多个运行期上下文，当函数执行完毕，执行上下文会被销毁。每一个运行期上下文都和一个作用域链关联。一般情况下，在运行期上下文运行的过程中，其作用域链只会被&lt;code&gt;with&lt;/code&gt;语句和&lt;code&gt;catch&lt;/code&gt;语句影响。&lt;br&gt;当代码运行到with语句时，运行期上下文的作用域链临时被改变了。一个新的可变对象被创建，它包含了参数指定的对象的所有属性。这个对象将被推入作用域链的头部，这意味着该函数的所有局部变量现在处于第二个作用域链对象中，因此访问代价更高了。如下图所示：&lt;br&gt;&lt;img src=&quot;http://pic002.cnblogs.com/images/2011/36987/2011090414454524.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;当try代码块中发生错误时，执行过程会跳转到catch语句，然后把异常对象推入一个可变对象并置于作用域链的头部。在catch代码块内部，函数的所有局部变量将会被放在第二个作用域链对象中，此时的作用域链图和上图类似。&lt;br&gt;因此在程序中应避免使用with语句，由于try-catch语句在代码调试和异常处理中非常有用，因此不建议完全避免，可通过优化代码来减少catch语句对性能的影响。一个很好的模式是将错误委托给一个函数处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;学习时，发现部分链接已经无效，并且自己补充了一些。&lt;/p&gt;
&lt;p&gt;js基础：&lt;br&gt;&lt;a href=&quot;http://weizhifeng.net/javascript-the-core.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://weizhifeng.net/javascript-the-core.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://dmitrysoshnikov.com/ecmascript/javascript-the-core/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://dmitrysoshnikov.com/ecmascript/javascript-the-core/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.nowamagic.net/librarys/veda/detail/1643&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.nowamagic.net/librarys/veda/detail/1643&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.nowamagic.net/librarys/veda/detail/1644&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.nowamagic.net/librarys/veda/detail/1644&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.nowamagic.net/librarys/veda/detail/1645&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.nowamagic.net/librarys/veda/detail/1645&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;面向对象：&lt;br&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2010/05/object-ooriented_javascript_encapsulation.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.ruanyifeng.com/blog/2010/05/object-ooriented_javascript_encapsulation.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance_continued.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance_continued.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.nowamagic.net/librarys/veda/detail/1642&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.nowamagic.net/librarys/veda/detail/1642&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/fool/archive/2010/10/16/1853126.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/fool/archive/2010/10/16/1853126.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/sanshi/archive/2009/07/08/1519036.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/sanshi/archive/2009/07/08/1519036.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;this：&lt;br&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/cn/web/1207_wangqf_jsthis/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.ibm.com/developerworks/cn/web/1207_wangqf_jsthis/index.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/justany/archive/2012/11/01/the_keyword_this_in_javascript.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/justany/archive/2012/11/01/the_keyword_this_in_javascript.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.nowamagic.net/librarys/veda/detail/1647&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.nowamagic.net/librarys/veda/detail/1647&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原型：&lt;br&gt;&lt;a href=&quot;http://blog.jobbole.com/9648/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.jobbole.com/9648/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.nowamagic.net/librarys/veda/detail/1641&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.nowamagic.net/librarys/veda/detail/1641&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.nowamagic.net/librarys/veda/detail/1648&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.nowamagic.net/librarys/veda/detail/1648&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/wangfupeng1988/p/3977924.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/wangfupeng1988/p/3977924.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;闭包：&lt;br&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/rubylouvre/archive/2009/07/24/1530074.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/rubylouvre/archive/2009/07/24/1530074.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://coolshell.cn/articles/6731.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://coolshell.cn/articles/6731.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://kb.cnblogs.com/page/105708/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://kb.cnblogs.com/page/105708/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.nowamagic.net/librarys/veda/detail/1646&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.nowamagic.net/librarys/veda/detail/1646&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;原型&quot;&gt;&lt;a href=&quot;#原型&quot; class=&quot;headerlink&quot; title=&quot;原型&quot;&gt;&lt;/a&gt;原型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;理解一个函数的原型属性(function’s prototype property )其实和实际的原型(prototype)没有
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 174~185 天</title>
    <link href="http://archmee.github.io/201701/2017-01-08.html"/>
    <id>http://archmee.github.io/201701/2017-01-08.html</id>
    <published>2017-01-07T16:00:00.000Z</published>
    <updated>2017-03-12T18:50:14.996Z</updated>
    
    <content type="html">&lt;p&gt;这10天看完了《Head First HTML5》和IFE2015春Task3的参考资料，对this、闭包、作用域和作用域链、原型和原型链都有了更深的理解，但是自己的总结还没写，估计下一篇博客内容就是总结js中这几个非常核心的知识点，脑海中已经有了大概的雏形，希望尽量简洁，一针见血掐中要害。&lt;/p&gt;
&lt;h2 id=&quot;HTML5&quot;&gt;&lt;a href=&quot;#HTML5&quot; class=&quot;headerlink&quot; title=&quot;HTML5&quot;&gt;&lt;/a&gt;HTML5&lt;/h2&gt;&lt;p&gt;《Head First HTML5》在一年多以前看过一遍，当时在没有系统学习js基础的情况下看完了，但在现在看来当时并没有完全看懂，但至少h5的关键技术都知道了，想来和前面4章讲了js的基础还是有很大关系的，其实我更希望省略掉前面4章，因为毕竟作为想学习h5的人来说应该已经通过其他书籍对js有了系统的学习，所以这4章对js的入门讲解就显得很鸡肋，因为对没学过js的人通过这4章根本学不会js，已经学会js的又不需要，所以这4章只是徒增了这本书的厚度，导致读起来非常不爽快，而且违背了该书的“节约纸张”的基本信条（因为该书到处都在提醒读者他们为了节约纸张省略了部分代码）。但是后面6章还是真的深入浅出的讲解了h5的几个关键技术：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5.地理定位&lt;/li&gt;
&lt;li&gt;6.JSONP跨域（这个不属于h5）&lt;/li&gt;
&lt;li&gt;7.Canvas画布&lt;/li&gt;
&lt;li&gt;8.Video&lt;/li&gt;
&lt;li&gt;9.本地存储localStorage&lt;/li&gt;
&lt;li&gt;10.Web多线程（Worker）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;IFE2015-Task3&quot;&gt;&lt;a href=&quot;#IFE2015-Task3&quot; class=&quot;headerlink&quot; title=&quot;IFE2015 Task3&quot;&gt;&lt;/a&gt;IFE2015 Task3&lt;/h2&gt;&lt;p&gt;在&lt;a href=&quot;https://github.com/baidu-ife/ife/tree/master/2015_spring/task/task0003&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IFE2015 Task3&lt;/a&gt; 页面提供了很多深入学习js的参考资料，我看了大部分，除了《Eloquent JavaScript》和javascript设计模式相关的内容，因为我的案头边就有一本正在看的《JavaScript设计模式》，而且设计模式这个内容不是看看书就能学好的，而是要通过大量代码实践才能学习其精华，所以目前只需要了解即可。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;看完学习资料摘录片段也总结成了一篇博客&lt;/li&gt;
&lt;li&gt;和一篇学习笔记总结有关this、闭包、作用域作用域链、原型和原型链&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Next&quot;&gt;&lt;a href=&quot;#Next&quot; class=&quot;headerlink&quot; title=&quot;Next&quot;&gt;&lt;/a&gt;Next&lt;/h2&gt;&lt;p&gt;下一步主要有下面几件事&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;总结前面提到的javascript中关于this、闭包、作用域作用域链、原型和原型链的学习笔记&lt;/li&gt;
&lt;li&gt;完成IFE2015 Task3的TODO应用&lt;/li&gt;
&lt;li&gt;以及更多还没学习的东西如编码规范、响应式布局、CSS3、Less、Sass、PostCSS、BootStrap、ES6、webpack或gulp、JQ、移动端、SPA、NodeJS、Vue和React至少要学习一个&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这10天看完了《Head First HTML5》和IFE2015春Task3的参考资料，对this、闭包、作用域和作用域链、原型和原型链都有了更深的理解，但是自己的总结还没写，估计下一篇博客内容就是总结js中这几个非常核心的知识点，脑海中已经有了大概的雏形，希望尽量简洁，
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 159~173 天</title>
    <link href="http://archmee.github.io/201612/2016-12-27.html"/>
    <id>http://archmee.github.io/201612/2016-12-27.html</id>
    <published>2016-12-25T16:00:00.000Z</published>
    <updated>2016-12-26T20:00:29.258Z</updated>
    
    <content type="html">&lt;p&gt;这十几天做的事情很少，很少看书，都在写代码，但是代码也写得很少，最开始只是单纯想写一个手风琴图片效果，但是找到一个手风琴的菜单，也想尝试一下，就同时设计写了几个菜单效果，但在实现的时候，可能是在大半夜思路不清晰的原因，导致写的代码混乱，对事件的处理也很混乱，在终于完成了几个效果后，几天前开始了重构，一下子就思路清晰了很多，代码实现思路也更简单，省去了些代码行数，今天在终于实现了手风琴图盘效果后，才想起最近的总结还没完成。&lt;/p&gt;
&lt;p&gt;中间还看了IFE2015 task3的几篇关于作用域链和原型链的文章，除了理解作用域链和原型链外，还对其他几方面诸如闭包/this理解都更加清晰了。&lt;/p&gt;
&lt;p&gt;今晚上对move.js（个人在完善的一个动画函数）进行了更新，加入了对 &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;requestAnimationFrame&lt;/a&gt; 的支持，这个方法是用来在页面重绘之前，通知浏览器调用一个指定的函数，以满足开发者操作动画的需求。这样就可以将原来使用setTimeout的动画作为一种降级方案，当然只有比较新的浏览器才支持这个API，所以我是用了&lt;a href=&quot;https://www.paulirish.com/2011/requestanimationframe-for-smart-animating/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章: requestAnimationFrame for Smart Animating&lt;/a&gt;中提到的Erik Möller提供的Polyfill&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; lastTime = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; vendors = [&lt;span class=&quot;string&quot;&gt;&#39;webkit&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;moz&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; x &amp;lt; vendors.length &amp;amp;&amp;amp; !&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.requestAnimationFrame; ++x) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.requestAnimationFrame = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;[vendors[x]+&lt;span class=&quot;string&quot;&gt;&#39;RequestAnimationFrame&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.cancelAnimationFrame =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;[vendors[x]+&lt;span class=&quot;string&quot;&gt;&#39;CancelAnimationFrame&#39;&lt;/span&gt;] || &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;[vendors[x]+&lt;span class=&quot;string&quot;&gt;&#39;CancelRequestAnimationFrame&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.requestAnimationFrame)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.requestAnimationFrame = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;callback, element&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; currTime = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;().getTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; timeToCall = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.max(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt; - (currTime - lastTime));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; id = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; callback(currTime + timeToCall); &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              timeToCall);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            lastTime = currTime + timeToCall;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; id;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.cancelAnimationFrame)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.cancelAnimationFrame = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;id&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            clearTimeout(id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上文提到的几个效果：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Archmee/Front-End-Demo/tree/master/fancy/dropdown-menu&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;几个菜单&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/dropmenu.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Archmee/Front-End-Demo/blob/master/fancy/shoufengqin.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;手风琴图片&lt;/a&gt;（图片来自C&amp;amp;A官网，侵删）&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/shoufengqin.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这十几天做的事情很少，很少看书，都在写代码，但是代码也写得很少，最开始只是单纯想写一个手风琴图片效果，但是找到一个手风琴的菜单，也想尝试一下，就同时设计写了几个菜单效果，但在实现的时候，可能是在大半夜思路不清晰的原因，导致写的代码混乱，对事件的处理也很混乱，在终于完成了几个
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 158 天</title>
    <link href="http://archmee.github.io/201612/2016-12-12.html"/>
    <id>http://archmee.github.io/201612/2016-12-12.html</id>
    <published>2016-12-11T16:00:00.000Z</published>
    <updated>2017-04-07T22:32:35.835Z</updated>
    
    <content type="html">&lt;h1 id=&quot;javascript语言精粹简要笔记&quot;&gt;&lt;a href=&quot;#javascript语言精粹简要笔记&quot; class=&quot;headerlink&quot; title=&quot;javascript语言精粹简要笔记&quot;&gt;&lt;/a&gt;javascript语言精粹简要笔记&lt;/h1&gt;&lt;p&gt;由于个人很喜欢DC这本书的这种开篇方式，所以将其对莎士比亚著作的引用也写进来了，以下如未做特殊说明，引用内容均来自该书。&lt;/p&gt;
&lt;p&gt;##1. 精华&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;……我不过略有些讨人喜欢的地方而已，怎么会有什么迷人的魔力？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;2-语法&quot;&gt;&lt;a href=&quot;#2-语法&quot; class=&quot;headerlink&quot; title=&quot;2. 语法&quot;&gt;&lt;/a&gt;2. 语法&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;我很熟悉它，早就在文法书上念过了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作者用铁路图（语法图）来表示了js语法中的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空白，多行注释&lt;code&gt;/**/&lt;/code&gt;会和&lt;code&gt;/a*/&lt;/code&gt;这样的正则表达式冲突&lt;/li&gt;
&lt;li&gt;标识符，可以以字母、下划线、美元符号开头&lt;/li&gt;
&lt;li&gt;数字，js只有一个数字类型，内部表示为64位浮点数，isNaN可以检测NaN类型&lt;/li&gt;
&lt;li&gt;字符串，字符串一旦创建，就不可变&lt;/li&gt;
&lt;li&gt;语句，js的代码块不会创建新的作用域&lt;/li&gt;
&lt;li&gt;表达式&lt;/li&gt;
&lt;li&gt;字面量&lt;/li&gt;
&lt;li&gt;函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3-对象&quot;&gt;&lt;a href=&quot;#3-对象&quot; class=&quot;headerlink&quot; title=&quot;3. 对象&quot;&gt;&lt;/a&gt;3. 对象&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;对于丑陋的事物，爱会闭目无视&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;js对象是可变的键值对集合，属性名可以是包括空字符串在内的任意字符串，属性值可以是除了&lt;code&gt;undefined&lt;/code&gt;外的任何值&lt;/li&gt;
&lt;li&gt;每个对象都连接到一个原型对象，所有通过对象字面量创建的对象都连接到&lt;code&gt;Object.prototype&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;从原型链中检索属性值的过程称为委托&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;4-函数&quot;&gt;&lt;a href=&quot;#4-函数&quot; class=&quot;headerlink&quot; title=&quot;4. 函数&quot;&gt;&lt;/a&gt;4. 函数&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;所有的过失都在未犯以前，都已定下应处的惩罚&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;js中函数就是对象&lt;/li&gt;
&lt;li&gt;调用一个函数会暂停当前函数的执行，传递控制权和参数给新函数，除了声明时定义的形参，每个函数还接收两个附加参数&lt;code&gt;this&lt;/code&gt;和&lt;code&gt;arguments&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this&lt;/code&gt;的值取决于调用的模式，js中一共有4中调用模式：&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;方法调用模式&lt;/strong&gt;，一个函数作为对象的属性就是方法，当一个方法被调用时，&lt;code&gt;this&lt;/code&gt;被绑定到该对象&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;函数调用模式&lt;/strong&gt;，一个普通函数(非方法)被调用时，&lt;code&gt;this&lt;/code&gt;绑定到全局对象&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;构造器调用模式&lt;/strong&gt;，在一个函数前带上&lt;code&gt;new&lt;/code&gt;关键字来调用，内部会创建一个连接到该函数原型的新对象，同时&lt;code&gt;this&lt;/code&gt;被绑定到那个新对象上&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;apply调用模式&lt;/strong&gt;，js提供了&lt;code&gt;apply&lt;/code&gt;和&lt;code&gt;call&lt;/code&gt;两个方法来更改&lt;code&gt;this&lt;/code&gt;的绑定对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arguments&lt;/code&gt;保存了调用时的参数列表，它只是一个‘类数组对象’，除了有一个length属性外，没有任何数组方法&lt;/li&gt;
&lt;li&gt;js允许给语言的基本类型扩充功能&lt;/li&gt;
&lt;li&gt;js只有函数作用域和全局作用域&lt;/li&gt;
&lt;li&gt;可以使用函数和闭包来构建模块，模块模式的一般形式是：一个定义了私有变量和函数的的函数；利用闭包可以创建可以访问私有变量和函数的特权函数；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;5-继承&quot;&gt;&lt;a href=&quot;#5-继承&quot; class=&quot;headerlink&quot; title=&quot;5. 继承&quot;&gt;&lt;/a&gt;5. 继承&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;……往往会把一件完整的东西化成无数的形象，就像凹凸镜一般，从正面望去，只见一片模糊&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本章作者介绍了几种实现继承的方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;伪类：用繁琐的模仿其他面向对象语言的方式来实现继承&lt;/li&gt;
&lt;li&gt;原型：也叫差异化继承，通过创建一个父类对象，然后在其基础上添加自定义属性&lt;/li&gt;
&lt;li&gt;函数化：也叫应用模块模式，通过4个步骤来实现&lt;ol&gt;
&lt;li&gt;创建一个新对象&lt;/li&gt;
&lt;li&gt;有选择的定义私有变量和方法&lt;/li&gt;
&lt;li&gt;给这个新对象扩充方法&lt;/li&gt;
&lt;li&gt;返回那个对象&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;6-数组&quot;&gt;&lt;a href=&quot;#6-数组&quot; class=&quot;headerlink&quot; title=&quot;6. 数组&quot;&gt;&lt;/a&gt;6. 数组&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;你这披着羊皮的狼，我要把你赶走&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;js数组的length没有上界&lt;/li&gt;
&lt;li&gt;js数组也是对象，js中一切皆对象&lt;/li&gt;
&lt;li&gt;使用数组还是对象？一个简单的规则是：当属性名是小而连续的整数时，使用数组，否则使用对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;7-正则表达式&quot;&gt;&lt;a href=&quot;#7-正则表达式&quot; class=&quot;headerlink&quot; title=&quot;7. 正则表达式&quot;&gt;&lt;/a&gt;7. 正则表达式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;相反地，选到一个称心如意的配偶，就能百年谐和，幸福无穷&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;js中会用到正则表达式的方法有：&lt;code&gt;regexp.exec&lt;/code&gt;、 &lt;code&gt;regexp.test&lt;/code&gt;、&lt;code&gt;string.match&lt;/code&gt;、&lt;code&gt;string.replace&lt;/code&gt;、 &lt;code&gt;string.split&lt;/code&gt;、&lt;code&gt;string.search&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;正则表达式分组&lt;ul&gt;
&lt;li&gt;捕获型&lt;code&gt;()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;非捕获型&lt;code&gt;(?:)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;向前正匹配&lt;code&gt;(?=)&lt;/code&gt;（！bad）&lt;/li&gt;
&lt;li&gt;向前负匹配&lt;code&gt;(?!)&lt;/code&gt; （！bad）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;8-方法&quot;&gt;&lt;a href=&quot;#8-方法&quot; class=&quot;headerlink&quot; title=&quot;8. 方法&quot;&gt;&lt;/a&gt;8. 方法&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;他虽疯，但却有他的一套理论&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;9-代码风格&quot;&gt;&lt;a href=&quot;#9-代码风格&quot; class=&quot;headerlink&quot; title=&quot;9. 代码风格&quot;&gt;&lt;/a&gt;9. 代码风格&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;好一串嘟嘟囔囔的头衔！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;讲了作者推崇的一些风格，比如缩进4个空格、不允许case语句穿越、唯一全局变量等等&lt;/p&gt;
&lt;h2 id=&quot;10-优美的特性&quot;&gt;&lt;a href=&quot;#10-优美的特性&quot; class=&quot;headerlink&quot; title=&quot;10. 优美的特性&quot;&gt;&lt;/a&gt;10. 优美的特性&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;我让你的脚玷污我的嘴唇，让你的肖像玷污我的眼睛，让你的每一部分玷污我的心，等候着你的答复&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;附录A-毒瘤&quot;&gt;&lt;a href=&quot;#附录A-毒瘤&quot; class=&quot;headerlink&quot; title=&quot;附录A. 毒瘤&quot;&gt;&lt;/a&gt;附录A. 毒瘤&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;那会在一言一行中证明其可怕&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;js对全局变量的依赖降低了程序的可靠性&lt;/li&gt;
&lt;li&gt;由于js有函数作用域但是没有块级作用域，所以更好的方式是在每个函数开头部分声明所有变量&lt;/li&gt;
&lt;li&gt;由于js的自动插入分号机制，建议将&lt;code&gt;{&lt;/code&gt;放在上一行的结束而不是新行&lt;/li&gt;
&lt;li&gt;Unicode把一对字符视为一个单一字符，js认为一对字符是两个不同的字符&lt;/li&gt;
&lt;li&gt;第二个可选参数是基数，建议总是带上10作为基数&lt;/li&gt;
&lt;li&gt;js没有真正的数组&lt;/li&gt;
&lt;li&gt;js中的众多假值，如下表：&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;值&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;“abc”&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;null&lt;/td&gt;
&lt;td&gt;Object&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;undefined&lt;/td&gt;
&lt;td&gt;Undefined&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;hasOwnProperty可以被重写覆盖&lt;/li&gt;
&lt;li&gt;js中的对象永远不会是真的空对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;附录B-糟粕&quot;&gt;&lt;a href=&quot;#附录B-糟粕&quot; class=&quot;headerlink&quot; title=&quot;附录B. 糟粕&quot;&gt;&lt;/a&gt;附录B. 糟粕&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;现在要请你告诉我，你究竟为了我哪一点坏处而开始爱我起来呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;===&lt;/code&gt;和&lt;code&gt;!==&lt;/code&gt;来判断是否相等，而不是&lt;code&gt;==&lt;/code&gt;和&lt;code&gt;!=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;避免使用with，除了不可预料外，它还会阻断变量名的词法作用域绑定&lt;/li&gt;
&lt;li&gt;避免使用eval，由于它需要运行编译器，所以降低了语言的性能，还削弱了程序的安全性，除此之外，也尽量避免Function构造器、setTimeout和setInterval的字符串形式的参数&lt;/li&gt;
&lt;li&gt;移除continue会使性能得到改善&lt;/li&gt;
&lt;li&gt;避免使用switch语句的case条件穿越&lt;/li&gt;
&lt;li&gt;对&lt;code&gt;if&lt;/code&gt;,&lt;code&gt;while&lt;/code&gt;,&lt;code&gt;do&lt;/code&gt;,&lt;code&gt;for&lt;/code&gt;总是使用代码块&lt;/li&gt;
&lt;li&gt;将&lt;code&gt;++&lt;/code&gt;和&lt;code&gt;--&lt;/code&gt;替换为&lt;code&gt;+=&lt;/code&gt;和&lt;code&gt;-=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;js位运算的多次转换反而会降低位运算带来的性能提高&lt;/li&gt;
&lt;li&gt;使用function表达式而不是语句&lt;/li&gt;
&lt;li&gt;js有一套类型的包装对象，应该尽量避免使用基本类型值的包装对象来创建基本类型&lt;/li&gt;
&lt;li&gt;对于js中的对象，一个更好的策略是不使用new（个人感觉没必要）&lt;/li&gt;
&lt;li&gt;避免使用void&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;javascript语言精粹简要笔记&quot;&gt;&lt;a href=&quot;#javascript语言精粹简要笔记&quot; class=&quot;headerlink&quot; title=&quot;javascript语言精粹简要笔记&quot;&gt;&lt;/a&gt;javascript语言精粹简要笔记&lt;/h1&gt;&lt;p&gt;由于个人很喜
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 155~157 天</title>
    <link href="http://archmee.github.io/201612/2016-12-11.html"/>
    <id>http://archmee.github.io/201612/2016-12-11.html</id>
    <published>2016-12-11T05:11:00.000Z</published>
    <updated>2016-12-11T09:18:21.886Z</updated>
    
    <content type="html">&lt;p&gt;在完成任务ife2015任务二中遇到的问题和解决方案：&lt;br&gt;&lt;strong&gt;ps&lt;/strong&gt;：很多和 &lt;a href=&quot;https://github.com/baidu-ife/ife/blob/master/2015_spring/task/task0002/review/IFE-review.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ife review&lt;/a&gt; 重复的地方不再列出&lt;/p&gt;
&lt;h2 id=&quot;util-js&quot;&gt;&lt;a href=&quot;#util-js&quot; class=&quot;headerlink&quot; title=&quot;util.js&quot;&gt;&lt;/a&gt;util.js&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;低版本浏览器没有Array.indexOf方法，使用了&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MDN的indexOf Polyfill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;低版本浏览器没有Object.keys方法，也使用了&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MDN的keys Polyfill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;遍历对象的时候要使用hasDontEnumerBug和propertyIsEnumerable（已解决：用了MDN提供的object.keys的pollyfill）&lt;br&gt;疑：不是用hasOwnProperty方法可以解决吗???&lt;/li&gt;
&lt;li&gt;获取元素在窗口中的位置除了用offsetParent遍历的方法外还有getBoundingClientRect的方法（已解决，直接调用）&lt;/li&gt;
&lt;li&gt;setCookie调用差8个小时，好像UTC的问题(已解决，不用toUTCString()而用toString，在没找到好的解决方案前暂时这样)&lt;/li&gt;
&lt;li&gt;$方法的改进，比如按照属性值匹配那个没有加tag（已解决），比如是否可以采用更优的从右向左扫描(放弃)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;task0003&quot;&gt;&lt;a href=&quot;#task0003&quot; class=&quot;headerlink&quot; title=&quot;task0003&quot;&gt;&lt;/a&gt;task0003&lt;/h2&gt;&lt;h3 id=&quot;轮播图小点li在在父元素ul中水平居中方法&quot;&gt;&lt;a href=&quot;#轮播图小点li在在父元素ul中水平居中方法&quot; class=&quot;headerlink&quot; title=&quot;轮播图小点li在在父元素ul中水平居中方法&quot;&gt;&lt;/a&gt;轮播图小点li在在父元素ul中水平居中方法&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;父元素text-align:center,子元素要为inline或inline-block&lt;/li&gt;
&lt;li&gt;父元素不用设置，子元素要为block类型，子元素设置margin:0 auto; display:table;&lt;/li&gt;
&lt;li&gt;通过定位，父元素设置相对定位:&lt;ul&gt;
&lt;li&gt;子元素定宽，然后绝对定位，left和right都为0，margin:0 auto;&lt;/li&gt;
&lt;li&gt;子元素定宽，然后绝对定位，{left:50%; margin-left:-50%;} 问题是通常不确定子元素的宽度&lt;/li&gt;
&lt;li&gt;子元素绝对定位，{left:50%; transform:translateX(-50%);}（ie9不兼容）&lt;/li&gt;
&lt;li&gt;父和子之间需要一层包裹wrap，wrap要设置为绝对定位并left:50%; 然后子元素相对定位, 然后left:-50%（注意是负值）（未验证！！！）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;父元素用flex显示，个人还没学过，暂不详解，但兼容性不好&lt;ul&gt;
&lt;li&gt;父元素display:flex，然后justify-content: center;&lt;/li&gt;
&lt;li&gt;父元素display:flex，子元素margin:0 auto;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用以上方法需要定宽的，可以在js运行时获取子元素宽度，然后就好办了&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;轮播图上下一张按钮的垂直居中&quot;&gt;&lt;a href=&quot;#轮播图上下一张按钮的垂直居中&quot; class=&quot;headerlink&quot; title=&quot;轮播图上下一张按钮的垂直居中&quot;&gt;&lt;/a&gt;轮播图上下一张按钮的垂直居中&lt;/h3&gt;&lt;p&gt;绝对定位且是inline-block的a元素要实现在父元素中垂直居中，父元素中vertical-align不起作用，因为vertical-align是对inline元素，line-height设在a上是a的行高，结果是a中的元素垂直居中，而line-height设置在父元素上的话，a由于是绝对定位，所以会出现了a中的文字垂直居中了，而a还在绝对定位的初始位置，这并不是想要的效果。&lt;br&gt;针对绝对定位且定宽高的元素垂直居中，网上找到的解决方案是：&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123; &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;top&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;bottom&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; auto &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;小结：&lt;/strong&gt;&lt;br&gt;通过上两个居中案例得出，如果一个固定宽高绝对定位的block元素要在父元素中水平居中对齐或者垂直居中对齐，可用top和bottom为0(垂直)，left和bottom为0(水平)，或4个方向都为0(水平垂直居中)，并同时使用&lt;code&gt;margin:auto&lt;/code&gt;可实现，当然，如果如果该元素不是绝对定位且定宽高的block元素的话，可使用其他方案（上述中block也包括inline-block）&lt;/p&gt;
&lt;h3 id=&quot;背景透明，文字不透明的解决方案&quot;&gt;&lt;a href=&quot;#背景透明，文字不透明的解决方案&quot; class=&quot;headerlink&quot; title=&quot;背景透明，文字不透明的解决方案&quot;&gt;&lt;/a&gt;背景透明，文字不透明的解决方案&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/PeunZhang/p/4089894.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;来自该文章链接#10楼评论&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;兼容IE，栗如：&lt;br&gt;非IE：&lt;code&gt;background:rgba(0,0,0,0.5);&lt;/code&gt;&lt;br&gt;IE：&lt;code&gt;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#7f000000,endColorstr=#7f000000);&lt;/code&gt;&lt;br&gt;rgba和IE下filter数值的转换：&lt;br&gt;rgba透明值 =&amp;gt; IE filter值&lt;br&gt;0.1 =&amp;gt; 19&lt;br&gt;0.2 =&amp;gt; 33&lt;br&gt;0.3 =&amp;gt; 4C&lt;br&gt;0.4 =&amp;gt; 66&lt;br&gt;0.5 =&amp;gt; 7F&lt;br&gt;0.6 =&amp;gt; 99&lt;br&gt;0.7 =&amp;gt; B2&lt;br&gt;0.8 =&amp;gt; C8&lt;br&gt;0.9 =&amp;gt; E5&lt;br&gt;转换公式：alpha*255再转换成16进制即可&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意1&lt;/strong&gt;：使用filter的时候background要使用IE不支持的方式，比如rgba，否则话会导致background生效而filter无效&lt;br&gt;&lt;strong&gt;注意2&lt;/strong&gt;：最好和下面提到的兼容样式方法结合起来使用&lt;/p&gt;
&lt;h3 id=&quot;IE6-7的链接虚线外框&quot;&gt;&lt;a href=&quot;#IE6-7的链接虚线外框&quot; class=&quot;headerlink&quot; title=&quot;IE6/7的链接虚线外框&quot;&gt;&lt;/a&gt;IE6/7的链接虚线外框&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/something/archive/2013/05/21/3090428.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;css去掉a标签点击后的虚线框&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123; &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;blr&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;function&quot;&gt;expression&lt;/span&gt;(this.onFocus=this.&lt;span class=&quot;function&quot;&gt;blur&lt;/span&gt;())&lt;/span&gt;&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当然css表达式不是一种好的方案，但如果和下面提到的兼容样式结合起来就会好很多，至少可以将通用css和兼容特定浏览器的css分开来&lt;/p&gt;
&lt;h3 id=&quot;兼容样式&quot;&gt;&lt;a href=&quot;#兼容样式&quot; class=&quot;headerlink&quot; title=&quot;兼容样式&quot;&gt;&lt;/a&gt;兼容样式&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/PeunZhang/archive/2012/04/09/2437563.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS hack方案整理&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 支持IE6、7 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;at_rule&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;media&lt;/span&gt; screen\&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;comment&quot;&gt;/*兼容ie67的css*/&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 支持IE8 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;at_rule&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;media&lt;/span&gt; \&lt;span class=&quot;number&quot;&gt;0s&lt;/span&gt;creen\ &lt;/span&gt;&amp;#123;&lt;span class=&quot;comment&quot;&gt;/*兼容ie8的css*/&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 支持IE6、7、8 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;at_rule&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;media&lt;/span&gt;  \&lt;span class=&quot;number&quot;&gt;0s&lt;/span&gt;creen\,screen\&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;span class=&quot;comment&quot;&gt;/*兼容ie678的css*/&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;task0004&quot;&gt;&lt;a href=&quot;#task0004&quot; class=&quot;headerlink&quot; title=&quot;task0004&quot;&gt;&lt;/a&gt;task0004&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;监听text/search等文本框的输入时除了要监听input事件还要在ie8及低版本浏览器中监听propertychange事件&lt;/li&gt;
&lt;li&gt;唯独ie9在按删除键时不会触发input或propertychange事件，所以我们直接针对ie9检测keydown事件的keyCode是否是删除键做处理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;task0005&quot;&gt;&lt;a href=&quot;#task0005&quot; class=&quot;headerlink&quot; title=&quot;task0005&quot;&gt;&lt;/a&gt;task0005&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;拖动时的文字选中问题，其他浏览器在拖动过程中阻止默认事件即可，而IE拖动时的文字选中，要用setCapture/releaseCapture&lt;/li&gt;
&lt;li&gt;ie7的offset值和其他浏览器不一样，所以用getBoundingClientRect函数获取&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在完成任务ife2015任务二中遇到的问题和解决方案：&lt;br&gt;&lt;strong&gt;ps&lt;/strong&gt;：很多和 &lt;a href=&quot;https://github.com/baidu-ife/ife/blob/master/2015_spring/task/task0002/re
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 124~154 天</title>
    <link href="http://archmee.github.io/201612/2016-12-08.html"/>
    <id>http://archmee.github.io/201612/2016-12-08.html</id>
    <published>2016-12-07T16:00:00.000Z</published>
    <updated>2016-12-11T09:17:06.898Z</updated>
    
    <content type="html">&lt;p&gt;从上次更新博客以来，时间已经过去了一个月，在这一个月当中完成的事情则是相当少，如果非要找个借口的话，那就是今年成都的冬季来地措不及防的早，整个这一个月除了几天少见有太阳，其他时候则全都在阴霾的笼罩之下。而我的行动也因此变得迟缓，哈哈哈哈哈哈哈哈哈哈哈~，不过也并不是完全荒废的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开始看《CSS权威指南》，已经看到了第5章，本来看之前以为这书会像传说中的像字典一样无聊，可是当我真正开始看的时候，才发现并没有，相反让我沉浸在书中对技术的细节描写当中，但是确实这本书不是我的当务之急，所以我还是会放一放&lt;/li&gt;
&lt;li&gt;然后拿起了《JS语言精粹》这本书，目前正在看第5章。&lt;/li&gt;
&lt;li&gt;将上篇博客中提到的IFE2015任务二进行了重(chong)构(xie)，我翻了一下github的提交记录：&lt;ul&gt;
&lt;li&gt;11.20 完成util.js，所以差不多从7号到20这13天都是在修改util.js，在IFE2015任务仓库的提交页面下，我把初级班和中级班的一半人的实现都看了一遍，大部分代码都差不多，但我还是从中搜集了一些好的实现放在了我的代码中。在看别人的代码过程中，我也在思考对比实现孰优孰劣，甚至对于自己有些复杂的实现，都要重新拟清原来的实现思路，因此也发现了以前未发现的一些隐藏Bug&lt;/li&gt;
&lt;li&gt;11.21 调整task0002_1，将原来的内部脚本改为外部脚本文件，并对代码进行了调整，比如原来一个功能全部写在一个函数中完成，现在按照功能单独提出来调用。如果和util.js做的事情有重复的地方改为调用，所以现在task0002的5个小练习都依赖util.js&lt;/li&gt;
&lt;li&gt;11.22 调整task0002_2&lt;/li&gt;
&lt;li&gt;11.24 重构task0002_4&lt;/li&gt;
&lt;li&gt;11.26 更改task0002_5的实现方式使其更简洁优雅 :)&lt;/li&gt;
&lt;li&gt;12.07 完成task0002_3轮播的重构，&lt;a href=&quot;https://archmee.github.io/201608/2016-08-29.html&quot;&gt;以前实现过这个功能并写了篇博客分析实现思路&lt;/a&gt;，而现在花了点时间改用面向对象的思想实现，感觉和组件有点像了：)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面是5个小练习的完成效果截图，&lt;a href=&quot;https://github.com/Archmee/Front-End-Demo/tree/master/ife_task/ife_task_2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;代码见github&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;提取兴趣爱好（根据输入中的分隔符分割兴趣爱好条目，并创建成可勾选复选框）&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/task2_1.jpg&quot; alt=&quot;提取兴趣爱好&quot;&gt;&lt;/li&gt;
&lt;li&gt;倒计时（计算了每次定时器的产生的误差做误差补偿）&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/task2_2.jpg&quot; alt=&quot;倒计时&quot;&gt;&lt;/li&gt;
&lt;li&gt;轮播图（利用构造器可创建多个轮播，不过每个轮播器需要自定义大小）&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/task2_3.jpg&quot; alt=&quot;轮播图&quot;&gt;&lt;br&gt;（ps：轮播图来自jd.com，侵删)&lt;/li&gt;
&lt;li&gt;输入提示框（类似百度搜索框，不过是本地数据，输入匹配的部分会高亮，方向键上下移动，单击或回车选中）&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/task2_4.jpg&quot; alt=&quot;输入提示框&quot;&gt;&lt;/li&gt;
&lt;li&gt;拖拽界面交互（在有拖动类的容器内任意拖放）&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/task2_5.jpg&quot; alt=&quot;拖拽界面交互&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;从上次更新博客以来，时间已经过去了一个月，在这一个月当中完成的事情则是相当少，如果非要找个借口的话，那就是今年成都的冬季来地措不及防的早，整个这一个月除了几天少见有太阳，其他时候则全都在阴霾的笼罩之下。而我的行动也因此变得迟缓，哈哈哈哈哈哈哈哈哈哈哈~，不过也并不是完全荒废
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 117~123 天</title>
    <link href="http://archmee.github.io/201611/2016-11-06.html"/>
    <id>http://archmee.github.io/201611/2016-11-06.html</id>
    <published>2016-11-05T16:00:00.000Z</published>
    <updated>2016-12-11T06:04:42.728Z</updated>
    
    <content type="html">&lt;p&gt;这几天将之前未完成的IFE 2015 任务二完成了，但是代码结构和编程思想都不是很理想，尤其是看了当时IFE团队review了IFE 2015的同学们的代码，指出的一些问题以及改进建议，&lt;a href=&quot;https://github.com/baidu-ife/ife/blob/master/2015_spring/task/task0002/review/IFE-review.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IFE Team review地址&lt;/a&gt;。甚至还给出了&lt;a href=&quot;https://github.com/baidu-ife/ife/tree/master/2015_spring/task/task0002/review/demo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考代码&lt;/a&gt;，目前为止我只看了util js部分，其他都还没看。&lt;br&gt;我也对自己的代码中有的问题进行了小结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码：完成任务的时候图一时方便，所以css和js都直接写到了相应的标签中而没有单独写到各自的文件中，因为我认为这不是当下最要紧的问题&lt;/li&gt;
&lt;li&gt;编程思想：虽然代码中做到了结构行为样式分离，但是JS代码混成了一团，耦合度高，而且还是完全在使用以前的面向过程的编程思路，连最基本的使用函数分解任务降低耦合度都没有做到&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;针对以上出现的问题，接下来几天想将部分代码进行重构和调整。&lt;br&gt;以下是完成的任务二的小练习1、2、4、5的Demo，之所以没有做小练习3-轮播，是因为我之前做过同样的东西：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Archmee/Front-End-Demo/blob/master/ife_task/ife_task_2/task0002_1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;1. 文本框&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Archmee/Front-End-Demo/blob/master/ife_task/ife_task_2/task0002_2.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;2. 倒计时&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Archmee/Front-End-Demo/blob/master/ife_task/ife_task_2/task0002_4.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;4. Auto suggestion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Archmee/Front-End-Demo/blob/master/ife_task/ife_task_2/task0002_5.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;5. 界面拖拽&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;——2016.12.08更新——-&lt;br&gt;更新：重构了任务2的第3个小练习，地址如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Archmee/Front-End-Demo/blob/master/ife_task/ife_task_2/task0002_3.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;3. 轮播&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这几天将之前未完成的IFE 2015 任务二完成了，但是代码结构和编程思想都不是很理想，尤其是看了当时IFE团队review了IFE 2015的同学们的代码，指出的一些问题以及改进建议，&lt;a href=&quot;https://github.com/baidu-ife/ife/bl
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 107~116 天</title>
    <link href="http://archmee.github.io/201610/2016-10-30.html"/>
    <id>http://archmee.github.io/201610/2016-10-30.html</id>
    <published>2016-10-29T16:00:00.000Z</published>
    <updated>2016-12-07T18:01:32.438Z</updated>
    
    <content type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在25号左右看完了JS《JS高级编程》一书。内容简要如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;23 离线应用与客户端缓存（Cookie、sessionStorage、localStorage、IndexedDB）&lt;/li&gt;
&lt;li&gt;24 最佳实践&lt;/li&gt;
&lt;li&gt;25 新兴的API&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在26号开始刷&lt;a href=&quot;http://www.imooc.com/course/programdetail/pid/32&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;慕课网的前端计划&lt;/a&gt;，但直接跳过了HTML、CSS、JS的初级部分，本想看完DOM事件后完成IFE2015任务二的部分&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;但是27号下午开始感冒了&lt;/li&gt;
&lt;li&gt;28号高烧腰痛难忍不能坐立，甚至下午出去逛超市差不多是挪着步子回来的，本打算第二天去医院挂个急诊，结果&lt;/li&gt;
&lt;li&gt;29号好多了，本以为痊愈了，但晚上开始口苦鼻塞、头痛欲裂，侧夜难眠&lt;/li&gt;
&lt;li&gt;30早上起来整个嘴唇都脱皮了，感觉上火比较严重，但是整个人感觉好多了，下午去药房随便拿了点药了事。我都觉得自己奇怪，病痛都差不多痊愈了才去买药来吃，想来也是因为自己忍受不了去医院挂号的麻烦。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来希望尽快完成IFE2015任务二吧！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;在25号左右看完了JS《JS高级编程》一书。内容简要如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;23 离线应用与客户端缓存（Cookie、sessionStorage、localStorage、IndexedDB）&lt;/li&gt;
&lt;li&gt;24 最佳实践&lt;/li&gt;
&lt;li
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 97~106 天</title>
    <link href="http://archmee.github.io/201610/2016-10-20.html"/>
    <id>http://archmee.github.io/201610/2016-10-20.html</id>
    <published>2016-10-19T16:00:00.000Z</published>
    <updated>2016-10-30T12:52:53.976Z</updated>
    
    <content type="html">&lt;p&gt;这10天左右时间从js高程第15章看到了第22章，其中15、16、18、19章只是翻了一下，没有详读，因为html5的api部分，我想等到真正使用的时候再细读，现在只需要了解大概就行了，而XML也不是当务之急，何况现在已经是JSON的天下了。百度IFE2015春季的题目正在做任务2，虽然都是入门开始的，但是感觉题目还是偏难的，如果没有看过js高程这种大部头或者到网上找答案，初学者应该很难完成的，至少只看百度IFE给的资料是没办法完成任务的。&lt;br&gt;章节列表如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;15.使用Canvas绘图&lt;ul&gt;
&lt;li&gt;2D上下文&lt;/li&gt;
&lt;li&gt;WebGL&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;16.HTML5脚本编程&lt;ul&gt;
&lt;li&gt;原生拖放&lt;/li&gt;
&lt;li&gt;媒体元素（Audio和Video）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;17.错误处理与调试&lt;/li&gt;
&lt;li&gt;18.Javascript与XML&lt;/li&gt;
&lt;li&gt;19.E4X（ES原生支持XML）&lt;/li&gt;
&lt;li&gt;20.JSON&lt;/li&gt;
&lt;li&gt;21.Ajax与Comet&lt;ul&gt;
&lt;li&gt;XMLHttpRequest对象&lt;/li&gt;
&lt;li&gt;XMLHttpRequest 2级&lt;/li&gt;
&lt;li&gt;进度事件&lt;/li&gt;
&lt;li&gt;跨源资源共享&lt;/li&gt;
&lt;li&gt;图像Ping、JSONP、Comet、Web Sockets 等跨域技术&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;22.高级技巧&lt;ul&gt;
&lt;li&gt;高级函数（安全的类型检测、作用域安全的构造函数、惰性载入函数、函数绑定、函数柯里化）&lt;/li&gt;
&lt;li&gt;防篡改对象（不可扩展对象、密封的对象、冻结的对象）&lt;/li&gt;
&lt;li&gt;高级定时器（重复的定时器、Yielding Process、函数节流）&lt;/li&gt;
&lt;li&gt;自定义事件&lt;/li&gt;
&lt;li&gt;拖放&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;眼看这本书就要看完了，是时候做点东西再继续看书了，纠结到底是先刷百度IFE2015的任务3呢，还是2016的任务2呢？2015任务3直接开始做一个单页应用，我感觉自己虽然js快学完了，但是要构建这样一个应用还是很困难，当然如果只是基于已有的操作DOM的知识当然能够实现出来，但是这不算一种好的实现方式，在知乎上有人说是看了《基于javascript的MVC富应用开发》这本书才做出来的，也就是说根据我现有的知识储备可能做出来的东西也只是糟糕的实现。而2016的任务2算是开发一些常见的模块化的组件，应该难度会稍微简单一点，但是我只是浏览了一下题目，没有详细看任务要求，难度也不是非常确定。&lt;/p&gt;
&lt;p&gt;下一步要看的书也在计划当中了。。。&lt;br&gt;至于什么时候能找工作，就另说了，至少要完成一个项目后再说吧！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这10天左右时间从js高程第15章看到了第22章，其中15、16、18、19章只是翻了一下，没有详读，因为html5的api部分，我想等到真正使用的时候再细读，现在只需要了解大概就行了，而XML也不是当务之急，何况现在已经是JSON的天下了。百度IFE2015春季的题目正在
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 96 天</title>
    <link href="http://archmee.github.io/201610/2016-10-10.html"/>
    <id>http://archmee.github.io/201610/2016-10-10.html</id>
    <published>2016-10-09T16:00:00.000Z</published>
    <updated>2016-10-26T14:20:54.863Z</updated>
    
    <content type="html">&lt;p&gt;今天完成了JS高程的第14章，并且开始做百度前端学院2015任务二：JS部分。&lt;br&gt;看了一篇学习资料 &lt;a href=&quot;http://www.ibm.com/developerworks/cn/web/1308_caiys_jsload/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript 的性能优化：加载和执行&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;概要如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;每个文件必须等到前一个文件下载并执行完成才会开始下载。在这些文件逐个下载过程中，用户看到的是一片空白的页面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从 IE 8、Firefox 3.5、Safari 4 和 Chrome 2 开始都允许并行下载 JavaScript 文件。这是个好消息，因为&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签在下载外部资源时不会阻塞其他&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签。遗憾的是，JavaScript 下载过程仍然会阻塞其他资源的下载,比如样式文件和图片。尽管脚本的下载过程不会互相影响，但页面仍然必须等待所有 JavaScript 代码下载并执行完成才能继续。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;由于脚本会阻塞页面其他资源的下载，因此推荐将所有&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签尽可能放到&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;标签的底部，以尽量减少对整个页面下载的影响。这是优化 JavaScript 的首要规则：将脚本放在底部。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;浏览器在解析 HTML 页面的过程中每遇到一个&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签，都会因执行脚本而导致一定的延时，因此最小化延迟时间将会明显改善页面的总体性能。所以减少页面包含的&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签数量有助于改善这一情况，不管是内嵌的还是外链的。可以把多个文件合并成一个，这样只需要引用一个&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签，就可以减少性能消耗。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为了确保内嵌脚本在执行时能获得最精确的样式信息，建议不要把内嵌脚本紧跟在&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;标签后面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;尽管下载单个较大的 JavaScript 文件只产生一次 HTTP 请求，却会锁死浏览器的一大段时间。为避免这种情况，需要通过一些特定的技术向页面中逐步加载 JavaScript 文件，这样做在某种程度上来说不会阻塞浏览器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当一个带有 defer 属性的 JavaScript 文件下载时，它不会阻塞浏览器的其他进程，因此这类文件可以与其他资源文件一起并行下载。&lt;br&gt;任何带有 defer 属性的&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;元素在 DOM 完成加载之前都不会被执行，无论内嵌或者是外链脚本都是如此。&lt;br&gt;说明：defer只有 IE 和 Firefox 3.5支持&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HTML 5 为&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签定义了一个新的扩展属性：async。它的作用和 defer 一样，能够异步地加载和执行脚本，不因为加载脚本而阻塞页面的加载。&lt;br&gt;在有 async 的情况下，JS 脚本一旦下载好了就会执行，所以很有可能不是按照原本的顺序来执行的。如果 JavaScript 脚本前后有依赖性，使用 async 就很有可能出现错误。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过标准 DOM 函数创建&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;元素&lt;br&gt;Firefox、Opera, Chorme 和 Safari 3+会在&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;节点接收完成之后发出一个 onload 事件。您可以监听这一事件，以得到脚本准备好的通知。&lt;br&gt;大部分浏览器将按照服务器返回它们的次序下载并运行不同的JS代码文件。您可以将下载操作串联在一起以保证他们的次序。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过 XHR 对象加载 JavaScript 脚本最主要的限制是：JavaScript 文件必须与页面放置在同一个域内，不能从 CDN 下载，所以大型网页通常不采用 XHR 脚本注入技术。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原文总结：&lt;br&gt;采用阻塞方法加载JS：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将所有的&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签放到页面底部，也就是闭合标签之前，这能确保在脚本执行前页面已经完成了渲染。&lt;/li&gt;
&lt;li&gt;尽可能地合并脚本。页面中的&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签越少，加载也就越快，响应也越迅速。无论是外链脚本还是内嵌脚本都是如此。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;采用无阻塞下载 JavaScript 脚本的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签的 defer 属性（仅适用于 IE 和 Firefox 3.5 以上版本）或者HTML5添加的async属性；&lt;/li&gt;
&lt;li&gt;使用动态创建的&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;元素来下载并执行代码；&lt;/li&gt;
&lt;li&gt;使用 XHR 对象下载 JavaScript 代码并注入页面中。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天完成了JS高程的第14章，并且开始做百度前端学院2015任务二：JS部分。&lt;br&gt;看了一篇学习资料 &lt;a href=&quot;http://www.ibm.com/developerworks/cn/web/1308_caiys_jsload/index.html&quot; targe
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
</feed>
