<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Archmee</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://archmee.github.io/"/>
  <updated>2016-10-20T18:20:42.933Z</updated>
  <id>http://archmee.github.io/</id>
  
  <author>
    <name>archmee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端之旅第 97~106 天</title>
    <link href="http://archmee.github.io/201610/2016-10-20.html"/>
    <id>http://archmee.github.io/201610/2016-10-20.html</id>
    <published>2016-10-19T16:00:00.000Z</published>
    <updated>2016-10-20T18:20:42.933Z</updated>
    
    <content type="html">&lt;p&gt;这10天左右时间从js高程第14章看到了第22章，其中15、16、18、19章只是翻了一下，没有详读，因为html5的api部分，我想等到真正使用的时候再细读，现在只需要了解大概就行了，而XML也不是当务之急，何况现在已经是JSON的天下了。百度IFE2015春季的题目正在做任务2，虽然都是入门开始的，但是感觉题目还是偏难的，如果没有看过js高程这种大部头或者到网上找答案，初学者应该很难完成的，至少只看百度IFE给的资料是没办法完成任务的。&lt;br&gt;章节列表如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;15.使用Canvas绘图&lt;ul&gt;
&lt;li&gt;2D上下文&lt;/li&gt;
&lt;li&gt;WebGL&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;16.HTML5脚本编程&lt;ul&gt;
&lt;li&gt;原生拖放&lt;/li&gt;
&lt;li&gt;媒体元素（Audio和Video）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;17.错误处理与调试&lt;/li&gt;
&lt;li&gt;18.Javascript与XML&lt;/li&gt;
&lt;li&gt;19.E4X（ES原生支持XML）&lt;/li&gt;
&lt;li&gt;20.JSON&lt;/li&gt;
&lt;li&gt;21.Ajax与Comet&lt;ul&gt;
&lt;li&gt;XMLHttpRequest对象&lt;/li&gt;
&lt;li&gt;XMLHttpRequest 2级&lt;/li&gt;
&lt;li&gt;进度事件&lt;/li&gt;
&lt;li&gt;跨源资源共享&lt;/li&gt;
&lt;li&gt;图像Ping、JSONP、Comet、Web Sockets 等跨域技术&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;22.高级技巧&lt;ul&gt;
&lt;li&gt;高级函数（安全的类型检测、作用域安全的构造函数、惰性载入函数、函数绑定、函数柯里化）&lt;/li&gt;
&lt;li&gt;防篡改对象（不可扩展对象、密封的对象、冻结的对象）&lt;/li&gt;
&lt;li&gt;高级定时器（重复的定时器、Yielding Process、函数节流）&lt;/li&gt;
&lt;li&gt;自定义事件&lt;/li&gt;
&lt;li&gt;拖放&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;眼看这本书就要看完了，是时候做点东西再继续看书了，纠结到底是先刷百度IFE2015的任务3呢，还是2016的任务2呢？2015任务3直接开始做一个单页应用，我感觉自己虽然js快学完了，但是要构建这样一个应用还是很困难，当然如果只是基于已有的操作DOM的知识当然能够实现出来，但是这不算一种好的实现方式，在知乎上有人说是看了《基于javascript的MVC富应用开发》这本书才做出来的，也就是说根据我现有的知识储备可能做出来的东西也只是糟糕的实现。而2016的任务2算是开发一些常见的模块化的组件，应该难度会稍微简单一点，但是我只是浏览了一下题目，没有详细看任务要求，难度也不是非常确定。&lt;/p&gt;
&lt;p&gt;下一步要看的书也在计划当中了。。。&lt;br&gt;至于什么时候能找工作，就另说了，至少要完成一个项目后再说吧！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这10天左右时间从js高程第14章看到了第22章，其中15、16、18、19章只是翻了一下，没有详读，因为html5的api部分，我想等到真正使用的时候再细读，现在只需要了解大概就行了，而XML也不是当务之急，何况现在已经是JSON的天下了。百度IFE2015春季的题目正在
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 96 天</title>
    <link href="http://archmee.github.io/201610/2016-10-10.html"/>
    <id>http://archmee.github.io/201610/2016-10-10.html</id>
    <published>2016-10-09T16:00:00.000Z</published>
    <updated>2016-10-10T18:21:50.330Z</updated>
    
    <content type="html">&lt;p&gt;今天完成了JS高程的第14章，并且开始做2015的百度前端春季学院任务JS部分。&lt;br&gt;看了一篇学习资料 &lt;a href=&quot;http://www.ibm.com/developerworks/cn/web/1308_caiys_jsload/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript 的性能优化：加载和执行&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;概要如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;每个文件必须等到前一个文件下载并执行完成才会开始下载。在这些文件逐个下载过程中，用户看到的是一片空白的页面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从 IE 8、Firefox 3.5、Safari 4 和 Chrome 2 开始都允许并行下载 JavaScript 文件。这是个好消息，因为&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签在下载外部资源时不会阻塞其他&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签。遗憾的是，JavaScript 下载过程仍然会阻塞其他资源的下载,比如样式文件和图片。尽管脚本的下载过程不会互相影响，但页面仍然必须等待所有 JavaScript 代码下载并执行完成才能继续。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;由于脚本会阻塞页面其他资源的下载，因此推荐将所有&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签尽可能放到&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;标签的底部，以尽量减少对整个页面下载的影响。这是优化 JavaScript 的首要规则：将脚本放在底部。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;浏览器在解析 HTML 页面的过程中每遇到一个&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签，都会因执行脚本而导致一定的延时，因此最小化延迟时间将会明显改善页面的总体性能。所以减少页面包含的&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签数量有助于改善这一情况，不管是内嵌的还是外链的。可以把多个文件合并成一个，这样只需要引用一个&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签，就可以减少性能消耗。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为了确保内嵌脚本在执行时能获得最精确的样式信息，建议不要把内嵌脚本紧跟在&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;标签后面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;尽管下载单个较大的 JavaScript 文件只产生一次 HTTP 请求，却会锁死浏览器的一大段时间。为避免这种情况，需要通过一些特定的技术向页面中逐步加载 JavaScript 文件，这样做在某种程度上来说不会阻塞浏览器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当一个带有 defer 属性的 JavaScript 文件下载时，它不会阻塞浏览器的其他进程，因此这类文件可以与其他资源文件一起并行下载。&lt;br&gt;任何带有 defer 属性的&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;元素在 DOM 完成加载之前都不会被执行，无论内嵌或者是外链脚本都是如此。&lt;br&gt;说明：defer只有 IE 和 Firefox 3.5支持&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HTML 5 为&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签定义了一个新的扩展属性：async。它的作用和 defer 一样，能够异步地加载和执行脚本，不因为加载脚本而阻塞页面的加载。&lt;br&gt;在有 async 的情况下，JS 脚本一旦下载好了就会执行，所以很有可能不是按照原本的顺序来执行的。如果 JavaScript 脚本前后有依赖性，使用 async 就很有可能出现错误。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过标准 DOM 函数创建&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;元素&lt;br&gt;Firefox、Opera, Chorme 和 Safari 3+会在&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;节点接收完成之后发出一个 onload 事件。您可以监听这一事件，以得到脚本准备好的通知。&lt;br&gt;大部分浏览器将按照服务器返回它们的次序下载并运行不同的JS代码文件。您可以将下载操作串联在一起以保证他们的次序。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过 XHR 对象加载 JavaScript 脚本最主要的限制是：JavaScript 文件必须与页面放置在同一个域内，不能从 CDN 下载，所以大型网页通常不采用 XHR 脚本注入技术。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原文总结：&lt;br&gt;采用阻塞方法加载JS：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将所有的&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签放到页面底部，也就是闭合标签之前，这能确保在脚本执行前页面已经完成了渲染。&lt;/li&gt;
&lt;li&gt;尽可能地合并脚本。页面中的&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签越少，加载也就越快，响应也越迅速。无论是外链脚本还是内嵌脚本都是如此。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;采用无阻塞下载 JavaScript 脚本的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签的 defer 属性（仅适用于 IE 和 Firefox 3.5 以上版本）或者HTML5添加的async属性；&lt;/li&gt;
&lt;li&gt;使用动态创建的&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;元素来下载并执行代码；&lt;/li&gt;
&lt;li&gt;使用 XHR 对象下载 JavaScript 代码并注入页面中。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天完成了JS高程的第14章，并且开始做2015的百度前端春季学院任务JS部分。&lt;br&gt;看了一篇学习资料 &lt;a href=&quot;http://www.ibm.com/developerworks/cn/web/1308_caiys_jsload/index.html&quot; targ
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 84~95 天</title>
    <link href="http://archmee.github.io/201610/2016-10-09.html"/>
    <id>http://archmee.github.io/201610/2016-10-09.html</id>
    <published>2016-10-08T16:00:00.000Z</published>
    <updated>2016-10-09T18:19:12.432Z</updated>
    
    <content type="html">&lt;p&gt;在国庆节前后接近两周的时间学习了JS高程7~13章，第7章还属于比较重要的语法知识，而从第8章开始后面就是BOM和DOM等部分，讲解了大量api的用法，遂不打算一一做笔记了，这里仅仅列一下第7章的纲要&lt;/p&gt;
&lt;h2 id=&quot;7-函数表达式&quot;&gt;&lt;a href=&quot;#7-函数表达式&quot; class=&quot;headerlink&quot; title=&quot;7.函数表达式&quot;&gt;&lt;/a&gt;7.函数表达式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在使用递归调用时，用arguments.callee比使用函数名更保险&lt;/li&gt;
&lt;li&gt;闭包是指有权访问另一个函数作用域中的变量的函数。创建闭包的常见方式，就是在一个函数内部创建另一个函数&lt;/li&gt;
&lt;li&gt;闭包会引用包含函数的整个活动对象&lt;/li&gt;
&lt;li&gt;可以用匿名函数模仿块级作用域减少向全局作用域添加过多的变量和函数&lt;/li&gt;
&lt;li&gt;JS用特权方法来访问私有变量和函数&lt;/li&gt;
&lt;li&gt;JS是以对象字面量的方式来创建单例对象的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至于这段时间的主要工作，其一是想快点把JS高程刷完，并且同时刷百度前端学院的一些题，书完了之后，就做百度前端学院的大作业，2015春季和2016春季都可以选择&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在国庆节前后接近两周的时间学习了JS高程7~13章，第7章还属于比较重要的语法知识，而从第8章开始后面就是BOM和DOM等部分，讲解了大量api的用法，遂不打算一一做笔记了，这里仅仅列一下第7章的纲要&lt;/p&gt;
&lt;h2 id=&quot;7-函数表达式&quot;&gt;&lt;a href=&quot;#7-函数表
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 78~83 天</title>
    <link href="http://archmee.github.io/201609/2016-09-26.html"/>
    <id>http://archmee.github.io/201609/2016-09-26.html</id>
    <published>2016-09-25T16:00:00.000Z</published>
    <updated>2016-09-26T15:41:06.928Z</updated>
    
    <content type="html">&lt;h2 id=&quot;6-面向对象&quot;&gt;&lt;a href=&quot;#6-面向对象&quot; class=&quot;headerlink&quot; title=&quot;6.面向对象&quot;&gt;&lt;/a&gt;6.面向对象&lt;/h2&gt;&lt;h3 id=&quot;属性&quot;&gt;&lt;a href=&quot;#属性&quot; class=&quot;headerlink&quot; title=&quot;属性&quot;&gt;&lt;/a&gt;属性&lt;/h3&gt;&lt;p&gt;ES中有两种属性：数据属性和访问器属性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据属性有4个描述其行为的特性：&lt;ul&gt;
&lt;li&gt;Configurable&lt;/li&gt;
&lt;li&gt;Enumerable&lt;/li&gt;
&lt;li&gt;Writable&lt;/li&gt;
&lt;li&gt;Value&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;访问器属性也有4个特性：&lt;ul&gt;
&lt;li&gt;Configurable&lt;/li&gt;
&lt;li&gt;Enumberable&lt;/li&gt;
&lt;li&gt;Get&lt;/li&gt;
&lt;li&gt;Set&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ES5提供了&lt;code&gt;Object.defineProperty()&lt;/code&gt;方法来修改属性默认的特性，&lt;code&gt;Object.defineProperties()&lt;/code&gt;方法可以通过描述符一次定义多个属性，&lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt;方法可以获取给定属性的描述符。&lt;/p&gt;
&lt;h3 id=&quot;创建对象&quot;&gt;&lt;a href=&quot;#创建对象&quot; class=&quot;headerlink&quot; title=&quot;创建对象&quot;&gt;&lt;/a&gt;创建对象&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;工厂模式&lt;/strong&gt;：在函数里面创建对象并初始化属性和方法，然后返回对象，创建对象直接调用函数即可。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;构造函数模式&lt;/strong&gt;：将利用函数是对象的本质，在函数内直接对this进行初始化。缺点是对象的方法没有达到复用的目的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;原型模式&lt;/strong&gt;：为了达到复用的目的，将对象属性和方法放进对象原型（object.prototype）中，这样每个对象就共享了属性和方法，而且每个实例可以定义自己专属的属性和方法，且会覆盖原型中的同名属性和方法。注意使用对象字面量语法会重写object.prototype，相当于是使用新对象覆盖了原型对象，导致某些引用关系丢失。这种模式的缺点是对原型对象中的引用类型的操作会共享给所有实例。&lt;br&gt;利用原型对象可以为原生对象添加新方法或重写&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;组合构造函数模式和原型模式&lt;/strong&gt;：对不需要共享的属性或方法用构造函数来定义，需要共享的属性或方法写进原型对象（推荐）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动态原型模式&lt;/strong&gt;：和组合模式类似，只是它把所有信息封装在构造函数中，也在构造函数初始化原型（经检查有必要时）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;寄生构造函数模式&lt;/strong&gt;：和工厂模式类似，只是在创建对象时不是直接调用函数，而是使用new关键字&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;稳妥构造函数模式&lt;/strong&gt;：和寄生模式类似，区别在：一是没有公共属性， 新创建对象的实例方法不引用this，二是不使用new操作符调用构造函数（这一点又和工厂模式类似）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一些有关的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;isPrototype()&lt;/code&gt;方法可以确定一个对象实例的原型，&lt;code&gt;Object.getPrototypeOf()&lt;/code&gt;返回一个对象的原型&lt;/li&gt;
&lt;li&gt;delete 操作符可以删除实例中定义的属性和方法。&lt;/li&gt;
&lt;li&gt;in 操作符用来确认是否能够访问指定对象的指定属性&lt;/li&gt;
&lt;li&gt;ES5中的&lt;code&gt;Object.keys()&lt;/code&gt;可以获取对象上所有可枚举的实例属性，而&lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt;方法可以获取所有实例属性，无论它是否可枚举&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;原型链&lt;/strong&gt;：使用要继承自的父类型的实例覆盖子类型的原型。所有函数的默认原型都是Object的实例。该种继承方法的缺点：一是父类型的实例属性顺理成章的成了现在对象的原型属性；二是在创建子类型实例时，不能向父类型构造函数传递参数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;借用构造函数&lt;/strong&gt;：方法是在子类型的构造函数内部调用父类型构造函数（用apply或call方法），这下可以传递参数了，但没有解决函数复用的问题，而且父类型的原型对象中的方法对子类型不可见。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;组合继承&lt;/strong&gt;：将原型链和借用构造函数的技术组合到一块，其背后的思想是使用原型链实现对原型属性和方法的继承。其缺点是在构造函数中和用实例覆盖子类型的原型对象的过程中，调用了2次父类型的构造函数，导致父类型的实例属性有2份，1份在子类型原型对象中，1份在子类型实例中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;原型式继承&lt;/strong&gt;：它的实现思路是在函数内借助给定的参数（对象）覆盖函数中一个全新的对象的原型，然后返回这个全新的对象，利用该函数实现了继承，每个实例都可以对自己的属性和方法进行自定义。这个技术和&lt;u&gt;原型继承&lt;/u&gt;的思路差不多，用对象实例去重写子类型的原型，只是它把步骤放到了函数里面，并且是返回了一个被更改过原型的空白对象。&lt;br&gt;  ES5的&lt;code&gt;Object.create()&lt;/code&gt;方法规范化了原型式继承，它用来创建并返回一个继承后的子对象。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;寄生式继承&lt;/strong&gt;：是和原型式继承紧密相关的一种方式，但是原型式继承返回的子类型没有任何自定义的属性和方法，所以寄生式继承是完成了二次封装，用来完善子类型的属性和方法。思路是创建一个函数，在函数中调用原型式继承中封装的步骤，然后定义子类型中应有的属性和方法。但是也没有解决方法复用的问题，相当于每个实例中都有一份自己的方法&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;寄生组合式继承&lt;/strong&gt;：通过借用构造函数继承来继承属性，通过原型链的混成形式来继承方法。基本思路是：不必为了指定子类型的原型而调用父类型的构造函数，我们需要的只是父类型的原型对象的一个副本而已。只是利用一个中间对象的实例覆盖了子类型的原型对象，而在子类型的构造函数中又调用父类型构造函数以达到继承属性的目的。（最常用最常用）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有关方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;instanceof 操作符可以测试实例与原型链中出现过的构造函数。&lt;code&gt;isPrototypeOf()&lt;/code&gt;测试调用该方法的原型是否是这个实例(参数)的原型&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;6-面向对象&quot;&gt;&lt;a href=&quot;#6-面向对象&quot; class=&quot;headerlink&quot; title=&quot;6.面向对象&quot;&gt;&lt;/a&gt;6.面向对象&lt;/h2&gt;&lt;h3 id=&quot;属性&quot;&gt;&lt;a href=&quot;#属性&quot; class=&quot;headerlink&quot; title=&quot;属性&quot;&gt;&lt;
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 77 天</title>
    <link href="http://archmee.github.io/201609/2016-09-19.html"/>
    <id>http://archmee.github.io/201609/2016-09-19.html</id>
    <published>2016-09-18T16:00:00.000Z</published>
    <updated>2016-09-19T17:53:40.198Z</updated>
    
    <content type="html">&lt;h2 id=&quot;1-JS简介&quot;&gt;&lt;a href=&quot;#1-JS简介&quot; class=&quot;headerlink&quot; title=&quot;1. JS简介&quot;&gt;&lt;/a&gt;1. JS简介&lt;/h2&gt;&lt;p&gt;第1章主要讲了JS的起源和发展历程，以及JS的基本组成情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个完整的JS实现包含三个部分：&lt;ul&gt;
&lt;li&gt;核心（ECMAScript）&lt;/li&gt;
&lt;li&gt;文档对象模型（DOM）&lt;/li&gt;
&lt;li&gt;浏览器对象模型（BOM）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Web浏览器只是ES实现可能的宿主环境之一&lt;/li&gt;
&lt;li&gt;DOM级别&lt;ul&gt;
&lt;li&gt;DOM1级：由2个模块组成，DOM Core和DOM HTML&lt;/li&gt;
&lt;li&gt;DOM2级：引入了更多新模块，在原来DOM的基础上又扩充了鼠标和用户界面事件、范围、遍历等。而且通过对象接口增加了对CSS的支持&lt;/li&gt;
&lt;li&gt;DOM3级：进一步扩展了DOM，引入了以统一方式加载和保存文档的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BOM只处理浏览器和框架&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-在HTML中使用JS&quot;&gt;&lt;a href=&quot;#2-在HTML中使用JS&quot; class=&quot;headerlink&quot; title=&quot;2. 在HTML中使用JS&quot;&gt;&lt;/a&gt;2. 在HTML中使用JS&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;元素定义了6个属性：&lt;ul&gt;
&lt;li&gt;src：指定要执行的JS文件位置&lt;/li&gt;
&lt;li&gt;charset：JS文件的编码&lt;/li&gt;
&lt;li&gt;async：异步加载脚本，但不依赖引入顺序&lt;/li&gt;
&lt;li&gt;defer：在文档完全被解析和显示之后才执行脚本（立即下载，延迟执行）&lt;/li&gt;
&lt;li&gt;language：已废弃&lt;/li&gt;
&lt;li&gt;type：编写的代码的内容类型，常见&lt;code&gt;&amp;lt;text/javascript&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;不仅可以放在&lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;里面，还可以放在&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;里面（最好是结束标签之前）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;文档模式：混杂模式和标准模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;noscript&amp;gt;&lt;/code&gt;用在不支持JS的浏览器中显示替换内容&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3-基本概念&quot;&gt;&lt;a href=&quot;#3-基本概念&quot; class=&quot;headerlink&quot; title=&quot;3. 基本概念&quot;&gt;&lt;/a&gt;3. 基本概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;标识符：首字符必须是字母、下划线(_)、美元符号($)。其他字符可以是字母、数字、下划线和美元符号&lt;/li&gt;
&lt;li&gt;严格模式：&lt;code&gt;&amp;quot;use strict&amp;quot;&lt;/code&gt;可以放在脚本的开头对整个脚本开启严格模式，也可以放在函数内部让函数在严格模式下执行&lt;/li&gt;
&lt;li&gt;JS代码语句不强制使用&lt;code&gt;;&lt;/code&gt;结束代码，但是建议不要省略&lt;/li&gt;
&lt;li&gt;标识符不能是&lt;strong&gt;关键字&lt;/strong&gt;和&lt;strong&gt;保留字&lt;/strong&gt;（测试时发现标识符可以是汉字，但是不建议使用）&lt;/li&gt;
&lt;li&gt;JS变量是松散类型（弱类型），即可以用来保存任何类型的数据&lt;/li&gt;
&lt;li&gt;JS声明变量使用&lt;code&gt;var&lt;/code&gt;关键字就是局部变量，否则就是全局变量&lt;/li&gt;
&lt;li&gt;可以使用一条语句定义多个变量，用逗号隔开即可&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-4-数据类型&quot;&gt;&lt;a href=&quot;#3-4-数据类型&quot; class=&quot;headerlink&quot; title=&quot;3.4 数据类型&quot;&gt;&lt;/a&gt;3.4 数据类型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ES有5种简单数据类型：&lt;strong&gt;Undefined、Null、Boolean、Number、String&lt;/strong&gt;。还有1种复杂数据类型 &lt;strong&gt;Object&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;typeof&lt;/code&gt;用来检测数据类型，它是一个操作符而不是函数，所以调用时可以用圆括号也可以不用&lt;/li&gt;
&lt;li&gt;声明变量未初始化值是”undefined”，对于没有声明的变量只能执行typeof检测数据类型，结果是”undefined”&lt;/li&gt;
&lt;li&gt;null表示一个空对象引用，所以执行&lt;code&gt;typeof null;&lt;/code&gt;结果是”object”&lt;/li&gt;
&lt;li&gt;undefined值是派生自null值的，因此相等性测试结果是true&lt;/li&gt;
&lt;li&gt;Boolean类型的true和false是区分大小写的，其他形式的都只是标识符，&lt;code&gt;Boolean()&lt;/code&gt;可以将其他值转换为Boolean值&lt;/li&gt;
&lt;li&gt;保存浮点数需要的内存空间是保存整数值的2倍&lt;/li&gt;
&lt;li&gt;永远不要测试某个特定的浮点数值&lt;/li&gt;
&lt;li&gt;ES能够保存的最大数值保存在Number.MAX_VALUE中，最小数值是Number.MIN_VALUE&lt;/li&gt;
&lt;li&gt;超出JS数值范围的值被自动转换成-Infinite(负无穷)或Infinite(正无穷)，&lt;code&gt;isFinite()&lt;/code&gt;函数可以用来确定一个数值是不是&lt;strong&gt;有穷的&lt;/strong&gt;（在最大和最小之间）&lt;/li&gt;
&lt;li&gt;NaN（Not a Number），这个数值用于表示一个本来要返回数值的操作数未返回数值的情况。NaN与任何值都不相等，包括NaN自身。&lt;code&gt;isNaN()&lt;/code&gt;函数接收到参数后，会尝试将这个值转换为数值，然后确定这个参数是否“不是数值”&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Number()&lt;/code&gt;、&lt;code&gt;parseInt()&lt;/code&gt;和&lt;code&gt;parseFloat()&lt;/code&gt;可以将非数值转换为数值。parseInt第2个参数可以指定转换时使用的基数&lt;/li&gt;
&lt;li&gt;数值、布尔值、对象和字符串值都有&lt;code&gt;toString()&lt;/code&gt;方法，但null和undefined值没有这个方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String()&lt;/code&gt;方法可以将任何类型的值转换为字符串&lt;/li&gt;
&lt;li&gt;ES中的对象其实是一组数据和功能的集合，Object的每个实例都具有下列属性和方法，由于在ES中Object是所有对象的基础，因此所有对象都具有这些基本的属性和方法&lt;ul&gt;
&lt;li&gt;constructor&lt;/li&gt;
&lt;li&gt;hasOwnProperty(name)&lt;/li&gt;
&lt;li&gt;isPrototypeOf(object)&lt;/li&gt;
&lt;li&gt;propertyIsEnumerable(propertyName)&lt;/li&gt;
&lt;li&gt;toLocalString()&lt;/li&gt;
&lt;li&gt;toString()&lt;/li&gt;
&lt;li&gt;valueOf()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-5-操作符&quot;&gt;&lt;a href=&quot;#3-5-操作符&quot; class=&quot;headerlink&quot; title=&quot;3.5 操作符&quot;&gt;&lt;/a&gt;3.5 操作符&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;相等(==)和不相等(!=)是先转换再比较，全等(===)和不全等(！==)仅比较不转换，作者推荐使用全等和不全等&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-6-语句&quot;&gt;&lt;a href=&quot;#3-6-语句&quot; class=&quot;headerlink&quot; title=&quot;3.6 语句&quot;&gt;&lt;/a&gt;3.6 语句&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;label语句可以在代码中添加标签，以便将来使用（比如跳转），通常配合循环语句使用&lt;/li&gt;
&lt;li&gt;with语句的作用是将代码的作用域设置到一个特定的对象中（严格模式不允许使用，且with语句导致性能下降，也不建议使用）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-7-函数&quot;&gt;&lt;a href=&quot;#3-7-函数&quot; class=&quot;headerlink&quot; title=&quot;3.7 函数&quot;&gt;&lt;/a&gt;3.7 函数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ES函数不介意传递进来多少个参数，也不在乎传递进来的参数是什么数据类型，在函数内部可以通过访问arguments对象来访问这个参数数组&lt;/li&gt;
&lt;li&gt;如果在ES中定义了2个同名函数，则该名字只属于后定义的函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;4-变量、作用域和内存问题&quot;&gt;&lt;a href=&quot;#4-变量、作用域和内存问题&quot; class=&quot;headerlink&quot; title=&quot;4. 变量、作用域和内存问题&quot;&gt;&lt;/a&gt;4. 变量、作用域和内存问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;基本类型和引用类型的值&lt;ul&gt;
&lt;li&gt;基本类型占据固定大小的空间，保存在栈内存中；引用类型的值是对象，保存在堆内存中。&lt;/li&gt;
&lt;li&gt;ES中所有参数都是按值传递的&lt;/li&gt;
&lt;li&gt;instanceOf操作符用于识别该变量是否是某个对象的实例&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;执行环境及作用域&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个执行环境都有一个与之关联的&lt;strong&gt;变量对象&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;全局执行环境被认为是window对象&lt;/li&gt;
&lt;li&gt;标识符解析是沿着作用域链一级一级搜索标识符的过程。搜索的过程始终从作用域链的前端开始，然后逐级向后回溯，直到找到标识符为止，如果找到全局执行环境的变量对象还没有找到标识符，就会发生错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;执行环境的类型只有2种——全局和局部（函数）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;catch和with语句可以延长作用域链&lt;/li&gt;
&lt;li&gt;JS没有块级作用域&lt;/li&gt;
&lt;li&gt;垃圾收集通常有2个策略：标记清除和引用计数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;5-引用类型&quot;&gt;&lt;a href=&quot;#5-引用类型&quot; class=&quot;headerlink&quot; title=&quot;5. 引用类型&quot;&gt;&lt;/a&gt;5. 引用类型&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Object类型&lt;ul&gt;
&lt;li&gt;字面量语法用花括号包围&lt;code&gt;{}&lt;/code&gt;，各属性之间用逗号分隔&lt;/li&gt;
&lt;li&gt;一般用点表示法访问对象属性，也可以使用方括号表示法来访问，作者建议除非必须否则用点表示法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Array类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字面量语法用方括号包围&lt;code&gt;[]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;每一项可以保存任意类型的值&lt;/li&gt;
&lt;li&gt;数组大小可动态调整&lt;/li&gt;
&lt;li&gt;使用Array构造函数是，可以省略new操作符&lt;/li&gt;
&lt;li&gt;length属性不是只读的，所以可以使用它调整数组大小&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Array.isArray()&lt;/code&gt;方法用来检查一个参数是否是数组(ES5)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;join()&lt;/code&gt;方法用传入的分隔符参数连接字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;push()&lt;/code&gt;和&lt;code&gt;pop()&lt;/code&gt;向数组末尾添加和删除元素，类似对栈的操作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shift()&lt;/code&gt;和&lt;code&gt;unshift()&lt;/code&gt;在数组开始的位置删除和插入元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sort()&lt;/code&gt;方法对数组进行排序，传入的参数是比较函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;concat()&lt;/code&gt;方法可以将当前数组和传入的数组参数连接起来创建一个新的数组&lt;/li&gt;
&lt;li&gt;&lt;code&gt;slice()&lt;/code&gt;从当前数组提取一或连续多项创建一个新数组&lt;/li&gt;
&lt;li&gt;&lt;code&gt;splice()&lt;/code&gt;向数组中插入项，利用参数的组合则可以完成数组的删除替换插入项&lt;/li&gt;
&lt;li&gt;&lt;code&gt;indexOf()&lt;/code&gt;和&lt;code&gt;lastIndexOf()&lt;/code&gt;返回要查找的项在数组中的位置，没找到则返回-1。这两个方法的不同在于一个是顺序查找，一个是逆序查找&lt;/li&gt;
&lt;li&gt;&lt;code&gt;every()&lt;/code&gt;、&lt;code&gt;filter()&lt;/code&gt;、&lt;code&gt;forEach()&lt;/code&gt;、&lt;code&gt;map()&lt;/code&gt;、&lt;code&gt;some()&lt;/code&gt;都是用来迭代数组的方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reduce()&lt;/code&gt;和&lt;code&gt;reduceRight()&lt;/code&gt;是用来归并数组的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Date类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Date.parse()&lt;/code&gt;返回日期字符串参数的毫秒数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Date.UTC()&lt;/code&gt;也返回表示日期的毫秒数，但是和parse参数不同&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Date.now()&lt;/code&gt;返回当前时间的毫秒数&lt;/li&gt;
&lt;li&gt;Date类型还有一些专门用于将日期格式化为字符串的方法：&lt;code&gt;toDateString()&lt;/code&gt;、&lt;code&gt;toTimeString()&lt;/code&gt;、&lt;code&gt;toLocaleDateString()&lt;/code&gt;、&lt;code&gt;toLocaleTimeString()&lt;/code&gt;、&lt;code&gt;toUTCString&lt;/code&gt;，更多的日期时间方法可以看书&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RegExp类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;正则表达式的字面量语法：&lt;br&gt;&lt;code&gt;var express = /pattern/flags;&lt;/code&gt;&lt;br&gt;flags有3个值，可配合使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;g: 表示全局模式&lt;/li&gt;
&lt;li&gt;i: 表示不区分大小写&lt;/li&gt;
&lt;li&gt;m: 表示多行模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RegExp每个实例都有下列属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;global：表示是否设置了g标志&lt;/li&gt;
&lt;li&gt;ignoreCase：表示是否设置了i标志&lt;/li&gt;
&lt;li&gt;lastIndex：表示开始搜索下一个匹配项的字符位置，从0算起:&lt;/li&gt;
&lt;li&gt;multiline：表示是否设置了m标志&lt;/li&gt;
&lt;li&gt;source：正则表达式的字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RegExp实例方法&lt;ul&gt;
&lt;li&gt;&lt;code&gt;test()&lt;/code&gt;方法测试参数字符串是否匹配正则表达式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exec()&lt;/code&gt;方法接受一个字符串参数，返回第一个匹配项信息的数组，但包含两个额外的属性：index和input，index表示匹配项在字符串中的位置，input表示应用正则表达式的字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RegExp构造函数属性：input、lastMatch、lastParen、leftContext、rightContext、multiline&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Function类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数实际上是对象&lt;/li&gt;
&lt;li&gt;函数没有重载，因为函数名称只是一个变量，函数同名就像变量同名会被覆盖一样。&lt;/li&gt;
&lt;li&gt;函数可以作为值来使用，所以也可以用作函数参数，也可以将函数当作结果返回&lt;/li&gt;
&lt;li&gt;函数内部有两个特殊对象：arguments和this，arguments对象中还有一个名叫callee的属性，它是一个指针，指向拥有这个arguments对象的函数。ES5还有另一个函数对象的属性：caller，它保存着调用当前函数的函数的引用&lt;/li&gt;
&lt;li&gt;每个函数都包含两个属性：length和prototype，length表示函数希望接收的命名参数的个数，prototype是保存它们所在实例方法的真正所在&lt;br&gt;  每个函数都包含两个非继承而来的方法：&lt;code&gt;apply()&lt;/code&gt;和&lt;code&gt;call()&lt;/code&gt;，这两个方法都是在指定的作用域中调用函数，实际上等于设置函数体内this对象的值。&lt;br&gt;  ES5还定义了一个方法&lt;code&gt;bind()&lt;/code&gt;，这个方法会创建一个函数实例，其this值会被绑定到传给bind()的参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;基本包装类型&lt;br&gt;ES还定义了3个特殊的引用类型：Boolean、Number和String，它们是基本类型值的基本包装类型对象。不建议显示创建基本包装类型的对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;String类型&lt;ul&gt;
&lt;li&gt;字符方法：&lt;code&gt;charAt()&lt;/code&gt;和&lt;code&gt;charCodeAt()&lt;/code&gt;用来访问特定字符&lt;/li&gt;
&lt;li&gt;字符串操作方法：&lt;code&gt;concat()&lt;/code&gt;和&lt;code&gt;+&lt;/code&gt;可以实现连接字符串。&lt;code&gt;slice()&lt;/code&gt;、&lt;code&gt;substr()&lt;/code&gt;、&lt;code&gt;substring()&lt;/code&gt;都是提取子字符串创建新字符串的方法&lt;/li&gt;
&lt;li&gt;字符串位置方法：&lt;code&gt;indexOf()&lt;/code&gt;和&lt;code&gt;lastIndexOf()&lt;/code&gt;可以从字符串中查找子字符串的位置&lt;/li&gt;
&lt;li&gt;去除前后空格：&lt;code&gt;trim()&lt;/code&gt;会创建一个字符串的副本，删除前后空格并返回。&lt;/li&gt;
&lt;li&gt;大小写转换：&lt;code&gt;toLowerCase()&lt;/code&gt;、&lt;code&gt;toUpperCase()&lt;/code&gt;、&lt;code&gt;toLocaleLowerCase()&lt;/code&gt;、&lt;code&gt;toLocaleUpperCase()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;模式匹配：&lt;br&gt;&lt;code&gt;match()&lt;/code&gt;接收正则表达式为参数，本质上和调用RegExp的exec方法差不多。&lt;br&gt;&lt;code&gt;search()&lt;/code&gt;返回字符串中第一个匹配项的索引。&lt;br&gt;&lt;code&gt;replace()&lt;/code&gt;方法用于替换字符串匹配项。&lt;br&gt;&lt;code&gt;split()&lt;/code&gt;基于特定的分隔符将一个字符串分割成多个子字符串，并将结果放在一个数组中。&lt;br&gt;&lt;code&gt;localeCompare()&lt;/code&gt;用于比较字符串。&lt;br&gt;&lt;code&gt;fromCharCode()&lt;/code&gt;是一个静态方法，它接收一个或多个字符编码，并将它转换成一个字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;单体内置对象&lt;br&gt;定义：由ES实现提供的，不依赖于宿主环境的对象，这些对象在ES程序执行之前就已经存在了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Global对象：不属于任何其他对象的属性和方法，最终都是它的属性和方法。所有全局作用域中定义的属性和函数，都是Global对象的属性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;URI编解码方法：&lt;code&gt;encodeURI()&lt;/code&gt;和&lt;code&gt;encodeURIComponent()&lt;/code&gt;可以对URI进行编码。&lt;code&gt;decodeURI()&lt;/code&gt;和&lt;code&gt;decodeURIComponent()&lt;/code&gt;是对应的解码方法。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eval()&lt;/code&gt;将传入字符串当做实际JS语句来解析&lt;/li&gt;
&lt;li&gt;。。。还有其他Global对象的属性。。。&lt;/li&gt;
&lt;li&gt;window对象，Web浏览器都是讲Global对象作为window对象的一部分加以实现的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Math对象：它提供的计算功能比我们自己编写的计算功能执行起来要快得多&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包含的属性都是数学计算中常用的特殊值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min()&lt;/code&gt;和&lt;code&gt;max()&lt;/code&gt;方法用于确定一组数值中的最大值和最小值&lt;/li&gt;
&lt;li&gt;舍入方法：&lt;code&gt;ceil()&lt;/code&gt;、&lt;code&gt;floor()&lt;/code&gt;、&lt;code&gt;round()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;random()&lt;/code&gt;方法返回0~1之间的随机数&lt;/li&gt;
&lt;li&gt;还有很多完成简单或复杂计算的方法：&lt;code&gt;pow()&lt;/code&gt;、&lt;code&gt;sqrt()&lt;/code&gt;等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-JS简介&quot;&gt;&lt;a href=&quot;#1-JS简介&quot; class=&quot;headerlink&quot; title=&quot;1. JS简介&quot;&gt;&lt;/a&gt;1. JS简介&lt;/h2&gt;&lt;p&gt;第1章主要讲了JS的起源和发展历程，以及JS的基本组成情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个完整的JS实现
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 69~76 天</title>
    <link href="http://archmee.github.io/201609/2016-09-18.html"/>
    <id>http://archmee.github.io/201609/2016-09-18.html</id>
    <published>2016-09-17T16:00:00.000Z</published>
    <updated>2016-09-18T16:03:33.195Z</updated>
    
    <content type="html">&lt;p&gt;时逢中秋佳节，又废了3天&lt;br&gt;这几天学习了JS高级编程前5章，想法是尽快刷一遍全书，再开始做小东西&lt;br&gt;但是这本书没有做笔记，原因是书上讲得足够详细了，在抄一遍浪费时间用处不大，不过可以一段时间回顾一下，做点摘要性质的知识点大纲&lt;br&gt;。。。&lt;br&gt;居然没什么写的了，剩下的当作留白吧！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;时逢中秋佳节，又废了3天&lt;br&gt;这几天学习了JS高级编程前5章，想法是尽快刷一遍全书，再开始做小东西&lt;br&gt;但是这本书没有做笔记，原因是书上讲得足够详细了，在抄一遍浪费时间用处不大，不过可以一段时间回顾一下，做点摘要性质的知识点大纲&lt;br&gt;。。。&lt;br&gt;居然没什么写的了，剩
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 57~68 天</title>
    <link href="http://archmee.github.io/201609/2016-09-10.html"/>
    <id>http://archmee.github.io/201609/2016-09-10.html</id>
    <published>2016-09-09T16:00:00.000Z</published>
    <updated>2016-09-10T16:55:20.263Z</updated>
    
    <content type="html">&lt;p&gt;这段时间多是荒废了的，所以做的事情不多，把《精通CSS》看完了，剩余的两章都是项目的实现，我分析了示例中的代码，但没发觉什么新东西，所以笔记也省略了&lt;/p&gt;
&lt;p&gt;再来中途参加了朋友的婚礼，耽搁了点时间&lt;/p&gt;
&lt;p&gt;继续学习智能社的JS视频教程，发现这个老师讲得挺好，他基本很少讲直接得理论知识，都是根据循序渐进的列子来带出知识点，并且讲解了当下很实用的一些网页效果，比如缓冲运动、焦点图滚动、淡入淡出，当然这个视频可能对JS学习并不完善，但是对于学习DOM编程入门挺好的，一边学可以一边实现常见的网页效果，会更有学习上的成就感。&lt;br&gt;而且现在根据他讲的内容对之前徒手撸的轮播图有了改进的想法，可以使其更完善。&lt;br&gt;准备明天开始刷JS高级编程，争取开启暴走模式&lt;/p&gt;
&lt;p&gt;上一篇博客后模仿了慕课网首页的导航效果，我只是实现了静态效果，轮播图没有做，不过是把以前写的代码融合进来，下面放上效果截图和DEMO：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/2016-09-11_004601.jpg&quot; alt=&quot;模仿慕课首页导航&quot;&gt;&lt;/p&gt;
&lt;script async src=&quot;https://jsfiddle.net/wnxh0ujj/embed/result,html,css,js/&quot;&gt;&lt;/script&gt;

</content>
    
    <summary type="html">
    
      &lt;p&gt;这段时间多是荒废了的，所以做的事情不多，把《精通CSS》看完了，剩余的两章都是项目的实现，我分析了示例中的代码，但没发觉什么新东西，所以笔记也省略了&lt;/p&gt;
&lt;p&gt;再来中途参加了朋友的婚礼，耽搁了点时间&lt;/p&gt;
&lt;p&gt;继续学习智能社的JS视频教程，发现这个老师讲得挺好，他基
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 55、56 天</title>
    <link href="http://archmee.github.io/201608/2016-08-29.html"/>
    <id>http://archmee.github.io/201608/2016-08-29.html</id>
    <published>2016-08-28T16:00:00.000Z</published>
    <updated>2016-08-29T16:09:03.311Z</updated>
    
    <content type="html">&lt;p&gt;最近在看智能社的JS视频教程，这两天学习了无缝滚动效果的实现，心想着感觉和轮播效果差不多，一冲动就徒手撸了一个图片轮播效果，其实两种东西差远了，如果非要说它们之间有什么关系的话，就是都要用JS&lt;/p&gt;
&lt;p&gt;哈哈哈.gif&lt;/p&gt;
&lt;p&gt;不过先声明，在实现这个轮播效果以前，只是在其他网站看过这种效果，并没有了解过技术上是怎么实现的，所以这里的轮播效果完全是按照自己的思路强撸的，bug。。。暂时没有，但不完善，也不算什么好的实践。&lt;/p&gt;
&lt;p&gt;下面是我的大概思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先html结构要一个图片列表，但用css全部隐藏。有切换上一张和下一张图片的按钮&lt;/li&gt;
&lt;li&gt;文档加载完成后，js取出图片列表，然后显示第1张图片&lt;/li&gt;
&lt;li&gt;创建图片上的那一排可以切换图片的小圆点，用ul生成，li个数取决于上一步列表长度，每个li嵌套一个a元素，并且将第一个小圆点添加到事先写好的css类，使其有激活的效果&lt;/li&gt;
&lt;li&gt;在生成li中a元素时，为每个a绑定onmouseover和onclick事件，在onmouseover时，保持原有游标和定时器，这里只是简单的将图片切换到当前图片，定时器时间到了，原来计算好的下一张图片是谁，现在还是切换谁。而onclick不一样，它首先会清除原有定时器，然后隐藏原有图片，修改游标值，淡入显示当前图片，并且启动定时器，保证切换的下一张图片是当前图片紧邻的下一张，而不是其他，其实这一个和自动切换图片代码是一样的，只是改了游标的值&lt;/li&gt;
&lt;li&gt;启动定时器（上一步中的定时器要点击事件发生时才会启动的），间隔多少秒后，开始自动切换下一张图片（目前没见过自动切换上一张）。刚开始我用的setInterval，后面发现如果切换的地方多了后，定时器之间有干扰，后面改为setTimeout，每次切换下一张，再次启动就ok了&lt;/li&gt;
&lt;li&gt;切换时，先取消小圆点的激活效果，再隐藏当前图片，然后移动游标位置，再显示下一张图片以及激活下一个小圆点&lt;/li&gt;
&lt;li&gt;在切换下一张图片时，加一点淡入效果，显得不那么突兀。淡入效果是我自己写的，设置一个初始的opacity，用setInterval定时器，渐变到1就ok了，淡出的话思路不变，opcity逐渐减小即可&lt;/li&gt;
&lt;li&gt;两个按钮分别绑定onclick事件，和切换下一张图片思路一样，只是这次变成手动切换而已，上一张就是把游标位置减1，并且判断是否小于0，小于0的话，要像求余数一样从倒数的位置开始了。下一张也要判断位置，如果超过列表长度，就要取余数并更新游标，自动切换时也要走这一步&lt;/li&gt;
&lt;li&gt;更复杂的切换效果还做不了，so……暂时到此为止……&lt;/li&gt;
&lt;li&gt;忘了提，小圆点上的onmouseover效果不是很理想，原因未知，所以先注释掉了&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面是最终效果截图和Demo&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/2016-08-29_235232.jpg&quot; alt=&quot;轮播效果截图&quot;&gt;&lt;/p&gt;
&lt;script async src=&quot;https://jsfiddle.net/ycssuxpj/embed/result,html,css,js/&quot;&gt;&lt;/script&gt;

&lt;blockquote&gt;
&lt;p&gt;ps：图片来自网络，侵删。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近在看智能社的JS视频教程，这两天学习了无缝滚动效果的实现，心想着感觉和轮播效果差不多，一冲动就徒手撸了一个图片轮播效果，其实两种东西差远了，如果非要说它们之间有什么关系的话，就是都要用JS&lt;/p&gt;
&lt;p&gt;哈哈哈.gif&lt;/p&gt;
&lt;p&gt;不过先声明，在实现这个轮播效果以前，
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 41~54 天</title>
    <link href="http://archmee.github.io/201608/2016-08-27.html"/>
    <id>http://archmee.github.io/201608/2016-08-27.html</id>
    <published>2016-08-26T16:00:00.000Z</published>
    <updated>2016-08-27T12:38:01.864Z</updated>
    
    <content type="html">&lt;p&gt;距离上一次更新博客已经时隔2周，这两周我在干嘛呢，主要是做了个播放器页面，看了《精通CSS》3~9章，以及开始学习智能社的js基础视频教程，所以下面主要整理了我看书的学习笔记。&lt;br&gt;速度这么慢，鬼知道我这两周经历了什么？？？&lt;/p&gt;
&lt;h2 id=&quot;3-可视化格式模型&quot;&gt;&lt;a href=&quot;#3-可视化格式模型&quot; class=&quot;headerlink&quot; title=&quot;3. 可视化格式模型&quot;&gt;&lt;/a&gt;3. 可视化格式模型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;背景会应用于由内容和内边距组成的区域，外边距是透明的，一般使用它控制元素之间的间隔&lt;/li&gt;
&lt;li&gt;outline和border不同的是，它绘制在元素框之上，所以它们不影响元素的大小或者布局&lt;/li&gt;
&lt;li&gt;增加padding、border、margin不会影响内容区域的尺寸，但是会增加元素框的总尺寸&lt;/li&gt;
&lt;li&gt;&lt;p&gt;外边距叠加&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当两个或更多垂直外边距相遇时，它们将保留一个较大外边距&lt;/li&gt;
&lt;li&gt;当A元素嵌入在B元素中时，如果B元素没有边框或内边距将两个元素的外边距分隔开，它们垂直方向的外边距也会叠加，并保留一个较大外边距&lt;/li&gt;
&lt;li&gt;当一个元素为空（没有任何内容），这个元素本身的垂直外边距也会发生叠加，并保留一个较大外边距&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;只有普通文档流中块框的垂直外边距才会发生叠加，行内框、浮动框、绝对定位框等内联、内联块元素之间的外边距不会发生叠加&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;块级框&lt;/strong&gt;从上到下一个接一个地垂直排列，框之间的的垂直距离由框的垂直外边距计算出来&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;行内框&lt;/strong&gt;在一行中水平排列，可以使用水平方向的内边距、边框和外边距调整它们的水平间距，但是垂直方向的内边距、行框、外边距不影响行内框的高度。同样，在行内框上设置显示高度或宽度也没有影响&lt;br&gt;由一行形成的水平框称为行框，行框的高度总是足以容纳它包含的所有行内框，但是，设置行高可以增加这个框的高度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;相对定位&lt;/strong&gt;：如果对一个元素进行相对定位，它将出现在它原来所在的位置，然后可以设置垂直和水平偏移，让这个元素相对于它的起点移动，在使用相对定位时，无论是否移动，元素仍然占据原来的空间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;绝对定位&lt;/strong&gt;：绝对定位使位置与文档流无关，因此不占据空间，普通文档流中其他元素的布局会忽略该元素的存在。绝对定位元素的位置是相对于距离它最近的那个已定位的祖先元素确定的，如果没有已定位祖先元素，那么它的位置是相对于初始包含块的。根据用户代理的不同，初始包含块可能是画布或HTML元素&lt;/li&gt;
&lt;li&gt;因为绝对定位元素的框与文档流无关，所以它们可能会覆盖文档流中的其他元素，可以通过z-index属性来控制这些框的叠放次序，值越高，就越层次越高&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;固定定位&lt;/strong&gt;：固定定位是绝对定位的一种，差异在于固定元素的包含块是视口(viewport)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;浮动的框可以左右移动，直到它的外边缘碰到包含框或另一个浮动框的边缘。因为浮动框不在普通文档流中，所以普通文档流中的块框表现得就像浮动框不存在一样。但是，块框中的内联元素受到浮动元素的影响，会移动给浮动元素留出空间。&lt;br&gt;对元素进行清理实际上是为前面的浮动元素留出垂直空间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;overflow属性定义包含的内容对于指定的尺寸太大的情况下元素应该怎么样。应用值为hidden或auto的overflow属性有一个很有用的副作用，它会自动地清理包含的任何浮动元素&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;4-背景图像效果&quot;&gt;&lt;a href=&quot;#4-背景图像效果&quot; class=&quot;headerlink&quot; title=&quot;4. 背景图像效果&quot;&gt;&lt;/a&gt;4. 背景图像效果&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用像素设置背景图像位置，那么图像左上角到元素左上角的距离就是指定的像素数。但使用百分比进行背景定位的工作方式不太一样，百分数定位并不对背景图像的左上角进行定位，而是使用图像左上角上对应的百分比作为对应点，再从对应点到元素左上角进行定位。&lt;/li&gt;
&lt;li&gt;混合使用关键字（如left、top等）和单位（像素、百分比）在某些浏览器中会导致错误，而且可能使css失效&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;4-2-圆角框&quot;&gt;&lt;a href=&quot;#4-2-圆角框&quot; class=&quot;headerlink&quot; title=&quot;4.2 圆角框&quot;&gt;&lt;/a&gt;4.2 圆角框&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;固定宽度的圆角框&lt;br&gt; 需要顶部和底部两个圆角图片，可垂直扩展，这种只适用于宽度固定且单色的框。要想实现水平和垂直都可扩展的圆角，可用四个角的圆角图片来实现，且需要增加额外的html标记，在水平方向的扩展也很有局限性&lt;/li&gt;
&lt;li&gt;山顶角&lt;br&gt; 使用位图角蒙版，白色蒙版将覆盖背景色，产生简单的曲线效果，但是仍然要添加无意义标记&lt;/li&gt;
&lt;li&gt;CSS 3 允许&lt;strong&gt;使用多个背景图像&lt;/strong&gt;，使用background-image指定多个图像，然后用其他几个属性指定想要的位置、是否重复等属性，而且现在不能使用简写background的形式，必须在各个属性中分别指定&lt;/li&gt;
&lt;li&gt;CSS 3 新增了&lt;strong&gt;border-radius&lt;/strong&gt;属性来绘制边框效果&lt;/li&gt;
&lt;li&gt;CSS 3 新增了&lt;strong&gt;border-image&lt;/strong&gt;属性，该属性允许指定一个图像作为边框&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;4-3-投影&quot;&gt;&lt;a href=&quot;#4-3-投影&quot; class=&quot;headerlink&quot; title=&quot;4.3 投影&quot;&gt;&lt;/a&gt;4.3 投影&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;简单的CSS投影，使用专门制作的投影图像应用于元素背景，然后负偏移元素框使其达到阴影效果&lt;/li&gt;
&lt;li&gt;CSS 3 支持 box-shadow直接创建投影，还可以和border-radius相互配合&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;4-4-不透明度&quot;&gt;&lt;a href=&quot;#4-4-不透明度&quot; class=&quot;headerlink&quot; title=&quot;4.4 不透明度&quot;&gt;&lt;/a&gt;4.4 不透明度&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;opacity，取值范围0~1，值越大越不透明，除了背景会生效外，应用它的元素的内容也会继承它，导致内容产生不透明度，这不是理想的效果&lt;/li&gt;
&lt;li&gt;RGBa，a代表alpha透明度&lt;/li&gt;
&lt;li&gt;PNG透明度，png图像格式最大的优点是它支持alpha透明度&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;4-5-图像替换&quot;&gt;&lt;a href=&quot;#4-5-图像替换&quot; class=&quot;headerlink&quot; title=&quot;4.5 图像替换&quot;&gt;&lt;/a&gt;4.5 图像替换&lt;/h3&gt;&lt;p&gt;由于不愿意将这些某些图像直接嵌入页面中，CSS作者发明了图像替换技术的概念。你可以像平常一样将文本添加到文档中，然后使用CSS隐藏文本并在它的位置上显示一个背景图像。这样的话，搜索引擎仍然可以搜索HTML文本，而且如果禁用CSS，文本仍然会显示。&lt;br&gt;后来发展了FIR（display:none OR visibility:none）、Phark（text-indent:-9999）、sFIR（flash技术和js）等图像替换方法&lt;/p&gt;
&lt;p&gt;ps：下面的章节示例比较多，我并不打算照搬代码，所以只是记录了一些关键点&lt;/p&gt;
&lt;h2 id=&quot;5-对链接应用样式&quot;&gt;&lt;a href=&quot;#5-对链接应用样式&quot; class=&quot;headerlink&quot; title=&quot;5. 对链接应用样式&quot;&gt;&lt;/a&gt;5. 对链接应用样式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;对链接伪类应用样式顺序：link、visited、hover、focus、active&lt;/li&gt;
&lt;li&gt;:target伪类可以为目标元素设置样式&lt;/li&gt;
&lt;li&gt;绝不要使用链接更新服务器，或者用技术术语来说，链接应该只用于GET请求，绝不要用于POST请求&lt;/li&gt;
&lt;li&gt;Pixy样式的翻转：不切换多个图像，而是使用一个图像并切换它的背景位置。使用单个图像的好处是减少了服务器请求的数量。&lt;/li&gt;
&lt;li&gt;CSS精灵是更彻底的Pixy技术，它把所有图标都放在一张或几张图片上，通过切换位置来应用图像&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;6-对列表应用样式和创建导航条&quot;&gt;&lt;a href=&quot;#6-对列表应用样式和创建导航条&quot; class=&quot;headerlink&quot; title=&quot;6. 对列表应用样式和创建导航条&quot;&gt;&lt;/a&gt;6. 对列表应用样式和创建导航条&lt;/h2&gt;&lt;p&gt;主要讲了创建垂直导航条和水平导航条的技术，以及如何创建圆角按钮样式的链接，和鼠标移入的翻转效果&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;制作水平导航条，一般是把列表元素显示为内联元素或者使其浮动&lt;/li&gt;
&lt;li&gt;有几种方法可以让父元素包含浮动的子元素。一个是添加一个进行清理的元素，但这会在页面中增加不必要的标记。另一种是让父元素浮动，并且使用某个元素（比如页脚）对它进行清理。第三种是用overflow:hidden技术，它产生的副作用会解决这个问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;7-对表单和数据表格应用样式&quot;&gt;&lt;a href=&quot;#7-对表单和数据表格应用样式&quot; class=&quot;headerlink&quot; title=&quot;7. 对表单和数据表格应用样式&quot;&gt;&lt;/a&gt;7. 对表单和数据表格应用样式&lt;/h2&gt;&lt;h3 id=&quot;表格&quot;&gt;&lt;a href=&quot;#表格&quot; class=&quot;headerlink&quot; title=&quot;表格&quot;&gt;&lt;/a&gt;表格&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;尽量避免使用表格来布局&lt;/li&gt;
&lt;li&gt;&lt;p&gt;表格特有的元素&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;caption：用于表格标题，样式caption-side决定了它显示在表格四周的位置&lt;/li&gt;
&lt;li&gt;sumary：应用于表格标签，用来描述表格的内容&lt;/li&gt;
&lt;li&gt;thead、tbody、tfoot：thead和tfoot只有1个，而tbody可以有多个&lt;/li&gt;
&lt;li&gt;col和colgroup：colgroup可以使用col元素对一或多列定义和分组&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;border-collapse决定了表格单元格边框。collapse则水平垂直都合并，separte是默认值，即分别使用自己的边框&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;border-spacing决定了单元格之间的距离&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;表单&quot;&gt;&lt;a href=&quot;#表单&quot; class=&quot;headerlink&quot; title=&quot;表单&quot;&gt;&lt;/a&gt;表单&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;fieldset用来对相关信息块进行分组&lt;/li&gt;
&lt;li&gt;label标签可以帮助添加结构和增加表单的可用性和可访问性&lt;br&gt;还有很多其他表单元素的应用以及对表单元素的样式处理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;8-布局&quot;&gt;&lt;a href=&quot;#8-布局&quot; class=&quot;headerlink&quot; title=&quot;8. 布局&quot;&gt;&lt;/a&gt;8. 布局&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在布局之前需要做的就是理清页面结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先把页面划分为大的结构性区域，比如页眉页脚主内容区&lt;/li&gt;
&lt;li&gt;然后，将注意力转移到内容区域本身，开始建立网格结构&lt;/li&gt;
&lt;li&gt;最后，在各个内容区域中寻找不同的布局结构，给内一个内容块一个有意义的名称，分析它们之间的关系&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;主内容是页面上最重要的东西，所以应该在文档中首先出现，而用样式来决定它们的显示位置&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后介绍了2列、3列的基于浮动的&lt;strong&gt;定宽、流式和弹性布局&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用流式布局时，尺寸是用百分数而不是像素设置的，这使流式布局能够相对于浏览器窗口进行伸缩。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;弹性布局相对于字号而不是浏览器宽度来设置元素的宽度。以em为单位设置宽度，可以确保在字号增加时整个布局随之扩大。&lt;br&gt;作者建议，用em为单位来设置容器的宽度，内部宽度仍然使用百分数，这样的话，内部宽度仍然是相对于字号的。这样就可以方便地修改布局的总尺寸，不必修改每个元素的宽度，这种解决方案更灵活、更容易维护。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于需要跨大区域的图像（比如站点页眉页脚或品牌区域中的图像）。可以考虑使用背景图像而不是图像标记&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;faux&lt;/strong&gt;列是一种对包含容器使用背景图像来制作视觉上和被包含的内容区等高的侧边栏效果的技术&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;等高列&lt;/strong&gt;的技术要点：对每一列设置一个很大的底内边距（大概是最短的列和最高的列之间的差值），然后再设置一个小于等于（这个取决于你是否需要间距效果）底内边距的负底外边距（注意是负，为了消除padding带来的视觉影响）&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;CSS3 列&lt;/strong&gt;：有几个主要属性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;column-count：表示总共多少列&lt;/li&gt;
&lt;li&gt;column-width：表示每列宽度&lt;/li&gt;
&lt;li&gt;column-gap：每列之间的间隔&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;它的优点就是在可用空间小于已指定的列的宽度时，它会减少列数&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ps：之前我对css 3列的概念有误解，我一直认为display:table-cell就是所谓的css 3列，不过现在看来错了太离谱了。甚至我在上一个大作业中还用了table-cell来做瀑布流布局。。。所以后面会花点时间更正&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;9-bug和修复bug&quot;&gt;&lt;a href=&quot;#9-bug和修复bug&quot; class=&quot;headerlink&quot; title=&quot;9. bug和修复bug&quot;&gt;&lt;/a&gt;9. bug和修复bug&lt;/h2&gt;&lt;p&gt;这一章主要讲了很多出现在IE6及其更低版本的bug以及修复方式，因为作者认为IE6现在还占据很大一部分用户，所以应该重视。但是考虑到这本书是09年的，且这几年技术更新比较大，所以个人认为实用性一般。这里也只是简单的摘录了一下常用的bug和常用修复方案&lt;/p&gt;
&lt;h3 id=&quot;捕捉bug&quot;&gt;&lt;a href=&quot;#捕捉bug&quot; class=&quot;headerlink&quot; title=&quot;捕捉bug&quot;&gt;&lt;/a&gt;捕捉bug&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;尽量在一开始就避免bug&lt;/li&gt;
&lt;li&gt;隔离问题&lt;/li&gt;
&lt;li&gt;创建基本测试案例&lt;/li&gt;
&lt;li&gt;修复问题，而不是修复症状&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;拥有布局&quot;&gt;&lt;a href=&quot;#拥有布局&quot; class=&quot;headerlink&quot; title=&quot;拥有布局&quot;&gt;&lt;/a&gt;拥有布局&lt;/h3&gt;&lt;p&gt;Windows上的IE使用布局概念来控制元素的尺寸和定位。那些“拥有布局”（have layout）的元素负责本身及其子元素的尺寸设置和定位，如果一个元素“没有拥有布局”，那么它的尺寸和位置由最近的拥有布局的祖先元素控制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拥有布局概念是Windows的IE特有的，而且它不是CSS属性&lt;/li&gt;
&lt;li&gt;可以使用JavaScript函数hasLayout查看一个元素是否拥有布局&lt;/li&gt;
&lt;li&gt;hasLayout是一个只读属性，所以无法使用JavaScript进行设置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;设置以下CSS属性会自动的使元素拥有布局&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;float&lt;/li&gt;
&lt;li&gt;display: inline-block&lt;/li&gt;
&lt;li&gt;width，height&lt;/li&gt;
&lt;li&gt;zoom: 任何值&lt;/li&gt;
&lt;li&gt;writing-mode（微软属性，不能通过检验）&lt;br&gt;在IE7中，以下属性也成了布局触发器&lt;/li&gt;
&lt;li&gt;overflow: hidden, scroll, auto&lt;/li&gt;
&lt;li&gt;min-width、max-width&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;部分问题解决方法&quot;&gt;&lt;a href=&quot;#部分问题解决方法&quot; class=&quot;headerlink&quot; title=&quot;部分问题解决方法&quot;&gt;&lt;/a&gt;部分问题解决方法&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;IE条件注释&lt;br&gt; 条件注释是一种专有的（因此是非标准的）对常规html注释的Microsoft扩展。条件注释能够根据条件显示代码块。尽管是非标准的，条件注释在其他所有浏览器看来是常规注释，因此本质上是无害的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果要为IE指定特定样式表，可以这样做&lt;/p&gt;
  &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--[if IE]&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/css/ie.css&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;![end if]--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;也可以指定特定版本的浏览器&lt;/p&gt;
  &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--[if IE 6]&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...样式表...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;![end if]--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可以指定一组浏览器&lt;/p&gt;
  &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--[if lt IE 6]&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...样式表...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;![end if]--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  说明：lt是less than的意思，即小于，gt为大于&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;还可以指定IE以外的浏览器   &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--[if !IE]&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...给除了IE外的浏览器指定样式表...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;![end if]--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;关于hack和过滤器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CSS被设计成具有很强的向前兼容性，这个特点意味着添加新的选择器，属性和值不会对老式浏览器产生严重的影响&lt;/li&gt;
&lt;li&gt;作为一般规则，应该使用依赖于不被支持的CSS的过滤器，而不是依赖某种浏览器bug的过滤器，这可能比较安全。最好完全避免使用过滤器&lt;/li&gt;
&lt;li&gt;明智的使用hack和过滤器，如果需要的hack比较多，那么最好将它们放在自己的样式表中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;星号HTML hack&lt;br&gt; 一般认为html元素是网页上的根元素，但是IE的老版本（IE6及以下）有一个匿名的根元素，它包围着html元素。可以使用通用选择器指定包围在另一个元素中的html元素&lt;/p&gt;
 &lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;* &lt;span class=&quot;tag&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自选择器hack&lt;br&gt; 因为子选择器是CSS 3才出来的，所以在老版本浏览器不支持的情况下会忽略它&lt;/p&gt;
 &lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;html&amp;gt;body &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;本章的最后的最后，可以考虑一下分级浏览器支持。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;想了一下，估计博客后面更新的频率会越来越慢了，仔细评估了一下，写读书笔记博客太费时间而且没有多少意义，书上已经写的清清楚楚明明白白了，自己无非是做了一些摘录性质的工作，so……&lt;/p&gt;
&lt;p&gt;总而言之言而总之，后期我更新的内容是大多是最近的学习内容，参考资料，技术总结，以及技术笔记demo展示等。哦，其实还是会写一些读书笔记的，可精可简，比如一本书的要点，点评或读后感什么的也不错&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;距离上一次更新博客已经时隔2周，这两周我在干嘛呢，主要是做了个播放器页面，看了《精通CSS》3~9章，以及开始学习智能社的js基础视频教程，所以下面主要整理了我看书的学习笔记。&lt;br&gt;速度这么慢，鬼知道我这两周经历了什么？？？&lt;/p&gt;
&lt;h2 id=&quot;3-可视化格式模型&quot;&gt;
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 35~40 天</title>
    <link href="http://archmee.github.io/201608/2016-08-13.html"/>
    <id>http://archmee.github.io/201608/2016-08-13.html</id>
    <published>2016-08-12T16:00:00.000Z</published>
    <updated>2016-08-13T13:10:25.172Z</updated>
    
    <content type="html">&lt;p&gt;在8.12完成了百度前端学院&lt;a href=&quot;https://github.com/baidu-ife/ife/tree/master/2015_spring/task/task0001&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;春季的第一个任务的第7个整站的大作业&lt;/a&gt;，今天来写点日志，现在已经感觉对盒子模型和布局理解更深入一点了。&lt;/p&gt;
&lt;p&gt;-&amp;gt;&lt;a href=&quot;https://github.com/Archmee/Front-End-Demo/tree/master/ife_task_007&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这是项目的github地址&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;已解决问题&quot;&gt;&lt;a href=&quot;#已解决问题&quot; class=&quot;headerlink&quot; title=&quot;已解决问题&quot;&gt;&lt;/a&gt;已解决问题&lt;/h2&gt;&lt;p&gt;这些已解决问题或记录，只是自己在遇到时随手记下来的，并且贴出了解决办法，并没有把每个问题的表现形式截图下来，问题和解决方式的描述也还有待调整，我争取看看有时间的时候完善补充一下。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;当a嵌入一个img时，a元素的高度和img不一样？（ 转自：&lt;a href=&quot;http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height）&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 这是 line-height 和 vertical-align 造成的，被称为幽灵空白节点，解决方案有以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;让 vertical-align 失效：&lt;code&gt;img { display: block; }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;vertical-align 默认为 baseline，更改为其他即可：&lt;code&gt;img { vertical-align:middle; }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;直接修改 line-height 值：&lt;code&gt;a { line-height: 5px; }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;修改 font-size：&lt;code&gt;a { font-size: 0; }&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;做banner的背景时找到一个新的css 3属性&lt;br&gt; &lt;code&gt;background-size: 100% 100%;&lt;/code&gt;，这样就可以控制背景图片的大小适应整个盒子&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;关于背景透明，文字不透明，解决方案 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两个DIV放在一个位置，文字DIV放上面，需要透明的DIV放下面&lt;/li&gt;
&lt;li&gt;使用css属性opacity（文字背景都透明）或者rgba（背景透明文字不透明），参考：&lt;a href=&quot;http://www.cnblogs.com/PeunZhang/p/4089894.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/PeunZhang/p/4089894.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;font-family应该优先指定英文字体，然后再指定中文字体。同时声明中文字体的字体名称（英文）和显示名称（中文）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;关于li元素之间的间隔，是inline-block导致的，之前遇到过这个问题，也在博客中提过，是用&lt;code&gt;display:table-cell;&lt;/code&gt;解决的，但是我发现它和最上面的问题一有点类似，采用&lt;code&gt;vertical-align:middle;&lt;/code&gt;也解决了问题，仔细检查发现虽然间隔小了很多但还是有一点间隔。所以还是采用&lt;code&gt;font-size:0;&lt;/code&gt;的方式解决了，其实浮动应该可以。&lt;br&gt; 在写表单的时候，若多个表单元素放在一行的话，也会出现间隔，用 letter-spacing 可以解决&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;了解word-wrap和word-break&lt;br&gt;一下内容来自这篇博客：www.cnblogs.com/2050/archive/2012/08/10/2632256.html。&lt;/p&gt;
&lt;p&gt; &lt;code&gt;word-wrap:break-word;&lt;/code&gt; 对长串英文不起作用，其实这是非常错误的，&lt;code&gt;word-wrap:break-word;&lt;/code&gt;照样能把一个长串英文或数字拆成多行。事实上，&lt;code&gt;word-wrap:break-word;&lt;/code&gt;与&lt;code&gt;word-break:break-all;&lt;/code&gt;共同点是都能把长单词强行断句，不同点是&lt;code&gt;word-wrap:break-word;&lt;/code&gt;会首先起一个新行来放置长单词，新的行还是放不下这个长单词则会对长单词进行强制断句；而&lt;code&gt;word-break:break-all;&lt;/code&gt;则不会把长单词放在一个新行里，当这一行放不下的时候就直接强制断句了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;页面底部采用text-align来居中，版权信息可以正常显示，但是github logo总是不居中，检查它的左边刚好在居中位置，所以采用了&lt;code&gt;margin-left: -50%;&lt;/code&gt; 将图片向左边缩进了自身宽度的边距&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;屏幕宽度小于980px就隐藏头部github图标&lt;/p&gt;
 &lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;at_rule&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;media&lt;/span&gt; screen and (max-width: &lt;span class=&quot;number&quot;&gt;980px&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;id&quot;&gt;#github-icon&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; none&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;之前主页的封面图是用背景来实现的，但是实际图片宽高大于盒子宽高，所以图片显示不完整，在网上找到解决方法是可以用background-size来缩放背景大小，我分别指定宽高为100%，就能适应盒子 大小了。&lt;br&gt;本来以为没问题了，但是今天在缩放窗口的时候发现，图片宽度会随着浏览器窗口调整导致挤压变形严重，在MDN看到一篇介绍background-size的文章，提到还有&lt;strong&gt;contain&lt;/strong&gt;和&lt;strong&gt;cover&lt;/strong&gt;属性可用，contain是按照原图宽高比例进行缩放，只要宽度发生变化，图片高度也会动态调整，这不是我期望的效果，而cover属性就能够填充整个盒子的宽高，并不会随着浏览器缩放调整大小，所以完美解决了这个问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;底部图标居中并底部对齐的问题，对copyright使用text-align:center可以居中，但是不能定位到底部，除非精确计算图标到版权文字的距离，但是不提倡这种硬编码方式。&lt;/p&gt;
&lt;p&gt;刚开始的时候我直接对a元素绝对定位，并且对齐了底部，当然还要对copyright这个div设置相对定位，结果发现它居中的位置是图标的左边位置，所以对img采用了margin-left:-50%使其居中，刚开始看没问题，但是发现和ie不兼容，因为text-align:center根本没有对a+img元素生效，所以图标在浏览器窗口最左边并且使用了img的负边距，所以图标只有右边一半可见。而且这种实现就是，a元素应该在的位置是可点击的，采用负边距后，导致a元素变成了原来宽度加上img的偏移位置，这样可点击的区域也变大了，所以这种方式不是很好。&lt;br&gt;然后我给a元素外面嵌套了一层div.icon，对其使用绝对定位和50%的left，a元素就都到中间偏右一点的位置去了，当然还是以img撑开的a元素的左边进行定位的，所以要对之前在img上使用的负边距使用到a上，不过这次不使用margin了，而是对a进行相对定位以及-50%的left，perfect！！！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;让整个块区域都是可点击区域，只需要把a样式设置为内联块，并且指定宽高就行（padding也可以）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;禁用链接 可对相关a元素使用 pointer-events: none; 但是IE9不兼容，可以添加disabled属性，对IE9有效&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;outline 设置a元素或者input元素等在聚焦时候的默认边框&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注意在设置text input和submit input的大小时的区别，因为text input大小和其他盒子模型一样，真正宽高=设置的宽高+padding+margin+border，而submit input就不一样了，他的宽高=你设置的宽高+margin=可见区域+padding+border+margin。&lt;br&gt;用另一种方式来说就是，你设置的text input的宽高并不包括内边距和边框，而submit input的宽高则包括内边距和边框，注意我们讨论的区别都不包括margin，因为margin在其两者上表现上是相同的。&lt;br&gt;type=”button”和type=”submit”效果一样， type=”text” 和type=”password”效果一样&lt;br&gt;解决方式有两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一种 是单独设置宽高，使其达到理想的盒子模型&lt;/li&gt;
&lt;li&gt;第二种 是使用css3属性box-sizing: content-box;设置盒子的大小控制方式，content-box就是可以让该盒子和其他盒子一样，指定的宽高不包括padding、border、margin等，而border-box就是默认的表现，padding、border都在指定的宽高内进行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;请看问题#14，在左右两个input元素高度一致时，左右不能对齐，就是不在同一条水平线上&lt;br&gt;已解决，办法是设置vertical-align为一个除了baseline外的值即可，可能还是跟inline-block元素的表现有关&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;默认字间距为2像素（只是目测了Chrome ^,^）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在写project.html页面时，在a元素中嵌入div，用作在鼠标经过图片时，弹出隐藏的文字框，显示文字部分有背景，在完全使用css的情况下，div和a元素盒子一样大小，需要显示的文字要底部对齐，用 &lt;code&gt;a div:hover&lt;/code&gt;来实现选择元素，在正常时，将文字和用text-indent隐藏，而hover时，添加背景和显示文字，并且用渐变方式实现背景(可以指定位置)，但是ie不兼容，文字和渐变背景都没有，然后我给盒子加了一个非渐变的默认背景，但是这样就是hover时整个盒子都有背景了，虽然不理想，但是不想为兼容性浪费太多时间，背景就先这样。&lt;br&gt;然后我又先后使用了&lt;code&gt;font-size:0;&lt;/code&gt;到&lt;code&gt;font-size:1em;&lt;/code&gt;，以及&lt;code&gt;opacity:1;&lt;/code&gt;到&lt;code&gt;opacity:0;&lt;/code&gt;达到隐藏显示文字的目的，但是ie仍不兼容，除了opacity能够在鼠标hover到文字上时可以达到效果，但是如果鼠标在div的非文字区域，就还是识别不到hover。&lt;br&gt;经过google，找到和我之前不一样的设置hover的方式，&lt;code&gt;a:hover div&lt;/code&gt; 选中元素，注意它是把hover添加到了a上，所以现在ie和其他浏览器都兼容了，甚至可以指定盒子不用完全和a一样大了，而指定自己想要的高度即可，这样我也可以不使用渐变背景来达到文字区域的背景了，ie也ok&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在project.html页面的瀑布流布局那里，a元素嵌入img和一个div，a和img都是inline-block的框，但是a元素始终没有img高，始终会少1px左右，虽然网上的方案都是像问题#1一样解决的，但是这里，只有问题1的第一种方法&lt;code&gt;img{ display:block ;}&lt;/code&gt; 才有效果，暂时不知道什么原因&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;待解决问题&quot;&gt;&lt;a href=&quot;#待解决问题&quot; class=&quot;headerlink&quot; title=&quot;待解决问题&quot;&gt;&lt;/a&gt;待解决问题&lt;/h2&gt;&lt;p&gt;其实看了百度学院老师review其他人的代码，发现自己也犯了几个同样的问题，需要对代码进行调整。目前已知的有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;右上角github icon是背景方式呈现，不需要img标签，并且在a元素中包含说明文字，底部图标一样&lt;/li&gt;
&lt;li&gt;底部link列表应该用dl而不是ul&lt;/li&gt;
&lt;li&gt;项目相关的图片和css使用到的图标应该分开放置，方便以后做cdn之类的&lt;/li&gt;
&lt;li&gt;日历并不是链接，没有可点击的事件，不需要使用a标签&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不过都是些小问题，马上就可以调整好了。接下来会看下css和html代码规范，看还有没需要修改的或者语义不正确的地方。&lt;/p&gt;
&lt;h2 id=&quot;截图&quot;&gt;&lt;a href=&quot;#截图&quot; class=&quot;headerlink&quot; title=&quot;截图&quot;&gt;&lt;/a&gt;截图&lt;/h2&gt;&lt;p&gt;上一次更新日志是前两个页面，现在放后面两个页面的截图:&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/2016-08-12_215651.jpg&quot; alt=&quot;项目&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/2016-08-12_215731.jpg&quot; alt=&quot;关于&quot;&gt;&lt;/p&gt;
&lt;p&gt;–END–&lt;br&gt;假装有彩蛋&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在8.12完成了百度前端学院&lt;a href=&quot;https://github.com/baidu-ife/ife/tree/master/2015_spring/task/task0001&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;春季的第一个任务的第7
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 24~34 天</title>
    <link href="http://archmee.github.io/201608/2016-0729-0808.html"/>
    <id>http://archmee.github.io/201608/2016-0729-0808.html</id>
    <published>2016-08-08T14:00:00.000Z</published>
    <updated>2016-08-09T06:14:49.758Z</updated>
    
    <content type="html">&lt;p&gt;最近不更新博客是因为“忙于”完成百度前端春季学院的大作业，可以从标题看出来，已经花了10天了，才完成前2个页面——摔！当然，投入和产出是成正比的，在完成后面的任务时我也在不断的对前面的代码进行“微调”以保证项目的统一性，所以修修改改了好多。不能每天都能全身心投入原因还有，有时候还要为生计烦劳，诸如一个人吃饭，该吃什么呢，自己做呢，还是点外卖呢，外卖又贵，自己做又要浪费几个小时，心塞！&lt;/p&gt;
&lt;p&gt;前面虽然有博客列了个人计划，但是现在看来计划已经被打破了，所以真是计划赶不上变化！&lt;/p&gt;
&lt;p&gt;下面是自己完成的2个页面截图，个人认为还原度还是很高的，完成后会放出github地址&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/2016-08-08-index-html.jpg&quot; alt=&quot;首页&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/2016-08-08_blog-html.jpg&quot; alt=&quot;文章&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近不更新博客是因为“忙于”完成百度前端春季学院的大作业，可以从标题看出来，已经花了10天了，才完成前2个页面——摔！当然，投入和产出是成正比的，在完成后面的任务时我也在不断的对前面的代码进行“微调”以保证项目的统一性，所以修修改改了好多。不能每天都能全身心投入原因还有，有
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>圣杯布局和双飞翼布局</title>
    <link href="http://archmee.github.io/201608/2016-08-08.html"/>
    <id>http://archmee.github.io/201608/2016-08-08.html</id>
    <published>2016-08-08T12:00:00.000Z</published>
    <updated>2016-08-09T06:32:14.360Z</updated>
    
    <content type="html">&lt;p&gt;圣杯布局和双飞翼布局在前面的步骤都是一样的，只是最后的步骤有点区别，且看&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;html结构&lt;/p&gt;
 &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;page&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;header&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;header&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;content&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;main&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;main&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;left&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;left&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;right&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;right&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;footer&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;footer&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 这里的重点在content区域，由于遵循主要内容main优先渲染，所以放在三列布局的前面&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;基础样式&lt;/p&gt;
 &lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;id&quot;&gt;#header&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;30px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;hexcolor&quot;&gt;#ddd&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;id&quot;&gt;#content&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;hexcolor&quot;&gt;#fff&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;id&quot;&gt;#footer&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;30px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;hexcolor&quot;&gt;#ddd&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.main&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;min-height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;  &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; red&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.left&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;min-height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;  &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;190px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; green&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.right&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;min-height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;  &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;190px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; blue&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 我们给了点基本样式，其中重点header和footer可以忽略不计，我们重点看三列布局的区域&lt;br&gt; &lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/12-53-32.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt; 另外两列都按照流的方式正常流入了页面，不过并不是我们期望的效果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;添加浮动&lt;br&gt; 给三列布局的样式分别添加浮动&lt;code&gt;float: left;&lt;/code&gt;，并且在footer样式上清除浮动&lt;code&gt;clear: both;&lt;/code&gt;，效果如下：&lt;br&gt; &lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/13-01-38.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt; 可以看出，由于main区域的宽度是100%，所以还是把另外两列撑下来了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用负边距&lt;br&gt; 使用负边距可以让另外两列和main区域处于同一水平位置，我们给left和right分别添加负边距&lt;/p&gt;
 &lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.left&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;marin-left&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; -&lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.right&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin-right&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; -&lt;span class=&quot;number&quot;&gt;190px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 给 left -100%的边距是为了让它缩进一行，回到上一行并且完全靠在左边位置，而right的负边距是自身的宽度，也就是等left离开后，它会完全靠在左边，在缩进自身宽度的负边距，就回到上一行，并且完全靠右。效果如下：&lt;br&gt; &lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/13-09-41.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt; perfect！！！但是，遗憾的是，虽然这两个回去了，main非常霸道，他居然没给人家让位置，所以另外两个小兄弟就以牙还牙的坐到main的身上，所以，现在看起来，main的左右都被遮住了。&lt;br&gt; 其实按照我们正常布局逻辑的话，左中右三列布局很容易就实现了，但是现在main优先的结构导致了更复杂的实现。&lt;/p&gt;
&lt;p&gt; 接下来也就是圣杯布局和双飞翼布局的分水岭了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;圣杯布局&lt;br&gt;圣杯布局的思想是，既然main被困在下面出不来，那么我们是否可以给content区内边距，把他挤到中间可见区域来。&lt;br&gt;然后我们给了content一个padding。&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;id&quot;&gt;#content&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;padding&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;190px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; &lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/13-29-26.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt; 但是left和right似乎不领情，仍然狠狠压着main，原因是left和right都被content包裹着，所以content有什么动静他们都一清二楚，在content的苦苦劝说下，left和right才答应挪出一点位置给main：&lt;/p&gt;
 &lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;class&quot;&gt;.left&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; relative&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;left&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; -&lt;span class=&quot;number&quot;&gt;190px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;/*left左移*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.right&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; relative&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;right&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; -&lt;span class=&quot;number&quot;&gt;190px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;/*right右移*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; &lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/13-37-02.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt; 现在已经达到我们期望的方式了，下面是我们的整个圣杯布局的css：&lt;/p&gt;
 &lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;id&quot;&gt;#header&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;30px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;hexcolor&quot;&gt;#ddd&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;id&quot;&gt;#content&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;hexcolor&quot;&gt;#fff&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;padding&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;190px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;id&quot;&gt;#footer&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;clear&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; both&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;30px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;hexcolor&quot;&gt;#ddd&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.main&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;float&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; left&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;min-height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;  &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; red&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.left&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;float&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; left&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;min-height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;  &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;190px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin-left&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; -&lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; green&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; relative&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;left&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; -&lt;span class=&quot;number&quot;&gt;190px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.right&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;float&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; left&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;min-height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;  &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;190px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin-left&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; -&lt;span class=&quot;number&quot;&gt;190px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; blue&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; relative&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;right&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; -&lt;span class=&quot;number&quot;&gt;190px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 那么下面来看，面对同样的问题，双飞翼布局是怎么处理的？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;双飞翼布局&lt;br&gt; &lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/13-09-41.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt; 我们随图片可以看到问题重现，main区域被遮盖了，淘宝的玉伯大侠提出了处理起来更简单的双飞翼布局的方案。&lt;br&gt; 双飞翼布局的思路是，首先要增加一点html，在原main中嵌入一个div包裹原来main包裹的内容，然后给内嵌的div一个左右边距，就达到目的了，现在html看起来是这样：&lt;/p&gt;
 &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;page&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;header&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;header&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;content&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;main&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;in-main&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;main&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;left&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;left&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;right&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;right&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;footer&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;footer&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 回到第5步实现圣杯布局之前的css，是这样：&lt;/p&gt;
 &lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;id&quot;&gt;#header&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;30px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;hexcolor&quot;&gt;#ddd&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;id&quot;&gt;#content&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;hexcolor&quot;&gt;#fff&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;id&quot;&gt;#footer&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;clear&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; both&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;30px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;hexcolor&quot;&gt;#ddd&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.main&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;float&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; left&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;min-height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;  &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; red&lt;/span&gt;&lt;/span&gt;;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.left&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;float&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; left&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;min-height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;  &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;190px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin-left&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; -&lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; green&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.right&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;float&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; left&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;min-height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;  &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;190px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin-left&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; -&lt;span class=&quot;number&quot;&gt;190px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; blue&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 现在我们只需要在此基础上给新增的in-main增加一行样式足矣：&lt;/p&gt;
 &lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;class&quot;&gt;.in-main&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;190px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 现在看看我们的效果，如图：&lt;br&gt; &lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/14-07-34.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 也很完美的解决了问题，而且使用了更少的样式，而且从上面可以很容易的看出这两种布局的区别。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;圣杯布局和双飞翼布局在前面的步骤都是一样的，只是最后的步骤有点区别，且看&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;html结构&lt;/p&gt;
 &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 21~23 天</title>
    <link href="http://archmee.github.io/201607/2016-07-26-28.html"/>
    <id>http://archmee.github.io/201607/2016-07-26-28.html</id>
    <published>2016-07-27T16:00:00.000Z</published>
    <updated>2016-07-29T06:26:30.367Z</updated>
    
    <content type="html">&lt;h2 id=&quot;维基大学的Challenge-5&quot;&gt;&lt;a href=&quot;#维基大学的Challenge-5&quot; class=&quot;headerlink&quot; title=&quot;维基大学的Challenge 5&quot;&gt;&lt;/a&gt;维基大学的Challenge 5&lt;/h2&gt;&lt;p&gt;完成了维基大学的Challenge 5，后面的挑战我不打算继续了，第6个是自己设计，第7个是模仿静态网页、第8个是CSS Zen Garden的学习。&lt;br&gt;在做Challenge 5的时候看了两篇分别介绍 &lt;a href=&quot;http://www.456bereastreet.com/lab/developing_with_web_standards/csslayout/2-col/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;2列布局&lt;/a&gt; 和 &lt;a href=&quot;http://www.456bereastreet.com/archive/201012/how_to_create_a_3-column_layout_with_css/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;3列布局&lt;/a&gt;的博客，不过方法都差不多，都是使用浮动来实现&lt;/p&gt;
&lt;script async src=&quot;https://jsfiddle.net/ym24ukus/6/embed/html,css,result/&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;读《精通CSS》&quot;&gt;&lt;a href=&quot;#读《精通CSS》&quot; class=&quot;headerlink&quot; title=&quot;读《精通CSS》&quot;&gt;&lt;/a&gt;读《精通CSS》&lt;/h2&gt;&lt;p&gt;开始看《精通CSS》，已经完成1、2章，笔记整理如下&lt;/p&gt;
&lt;h3 id=&quot;1-基础知识&quot;&gt;&lt;a href=&quot;#1-基础知识&quot; class=&quot;headerlink&quot; title=&quot;1. 基础知识&quot;&gt;&lt;/a&gt;1. 基础知识&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;有意义的标记为开发人员提供了几个重要的好处，&lt;ul&gt;
&lt;li&gt;与表现性的页面相比，有意义的页面更容易处理&lt;/li&gt;
&lt;li&gt;除了人之外，程序和其他设备也可以理解有意义的标记&lt;/li&gt;
&lt;li&gt;有意义的标记可以简便地将元素调整为你所需要的样式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;为元素命名class或id时，应该根据“它们是什么”来为元素命名&lt;/li&gt;
&lt;li&gt;class或id区分大小写&lt;/li&gt;
&lt;li&gt;只有在绝对确定这个元素之会出现一次的情况下，才应该使用ID&lt;/li&gt;
&lt;li&gt;为了将不必要的标记减到最少，应该只在没有现有元素能够实现区域分割的情况下使用div元素&lt;/li&gt;
&lt;li&gt;DTD是一组机器可读的规则，它们定义XML或HTML的特定版本中允许有什么，不允许有什么。在解析网页时，浏览器将使用这些规则检查页面的&lt;strong&gt;有效性&lt;/strong&gt;并且采取相应的措施。浏览器通过分析页面的DOCTYPE声明来了解要使用哪个DTD，由此知道要使用HTML的哪个版本。&lt;/li&gt;
&lt;li&gt;DOCTYPE有两种风格：&lt;strong&gt;严格&lt;/strong&gt;（strict）和&lt;strong&gt;过渡&lt;/strong&gt;（transitional）&lt;/li&gt;
&lt;li&gt;当浏览器厂商开始创建于标准兼容的浏览器时，他们希望确保向后兼容性。为了实现这一点，他们创建了两种呈现模式：&lt;strong&gt;标准模式&lt;/strong&gt;和&lt;strong&gt;混杂模式&lt;/strong&gt;。在标准模式中，浏览器根据规范呈现页面；在混杂模式中页面以一种比较宽松的向后兼容的方式显示。&lt;/li&gt;
&lt;li&gt;DOCTYPE切换是浏览器用来区分遗留文档和符合标准的文档的手段&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-为样式找到应用目标&quot;&gt;&lt;a href=&quot;#2-为样式找到应用目标&quot; class=&quot;headerlink&quot; title=&quot;2. 为样式找到应用目标&quot;&gt;&lt;/a&gt;2. 为样式找到应用目标&lt;/h3&gt;&lt;h4 id=&quot;选择器&quot;&gt;&lt;a href=&quot;#选择器&quot; class=&quot;headerlink&quot; title=&quot;选择器&quot;&gt;&lt;/a&gt;选择器&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;类型选择器有时候也称为元素选择器或简单选择器，用来寻找特定类型的元素。&lt;/li&gt;
&lt;li&gt;后代选择器可用来寻找特定元素或元素组的后代，&lt;code&gt;ul li {}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;不要给太多元素指定不同的类，而应将一个类或ID应用于它们的祖先，然后使用后代选择器定位它们。&lt;/li&gt;
&lt;li&gt;伪类选择器可以根据文档结构之外的其他条件对元素应用样式。&lt;code&gt;:link&lt;/code&gt;和&lt;code&gt;:visited&lt;/code&gt;称为链接伪类，只能应用于锚元素，&lt;code&gt;:hover&lt;/code&gt;和&lt;code&gt;:active&lt;/code&gt;和&lt;code&gt;:focus&lt;/code&gt;称为动态伪类，理论上可以应用于任何元素。通过把伪类连接在一起，可以创建更复杂的行为&lt;/li&gt;
&lt;li&gt;通用选择器用一个&lt;code&gt;*&lt;/code&gt;号表示，一般用来对页面上所有元素应用样式。&lt;/li&gt;
&lt;li&gt;高级选择器&lt;ul&gt;
&lt;li&gt;子选择器：只选择元素的直接后代，即子元素&lt;code&gt;p &amp;gt; span{}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;相邻同胞选择器：可用于定位同一个父元素下某个元素相邻的元素。&lt;code&gt;h2 + p{}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;属性选择器：可以根据某个属性是否存在&lt;code&gt;img[title] {}&lt;/code&gt;，或属性的值来寻找元素&lt;code&gt;img[title=china] {}&lt;/code&gt;，关于更多使用属性值来寻找元素的方法可以查看W3School的教程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;层叠&quot;&gt;&lt;a href=&quot;#层叠&quot; class=&quot;headerlink&quot; title=&quot;层叠&quot;&gt;&lt;/a&gt;层叠&lt;/h4&gt;&lt;p&gt;作者的样式表是由站点的开发者编写的，被认为是最重要的样式表。用户可以通过浏览器应用自己的样式，这些样式表的重要度低一级。最后是浏览器或用户代理使用的样式表，它们的重要度是最低的，所以你总是可以覆盖它们。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;层叠采用以下重要度次序：&lt;ol&gt;
&lt;li&gt;标有&lt;code&gt;!important&lt;/code&gt;的用户样式&lt;/li&gt;
&lt;li&gt;标有&lt;code&gt;!important&lt;/code&gt;的作者样式&lt;/li&gt;
&lt;li&gt;作者样式&lt;/li&gt;
&lt;li&gt;用户样式&lt;/li&gt;
&lt;li&gt;浏览器/用户代理应用的样式&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后根据选择器的特殊性决定规则的次序，具有更特殊选择器的规则优于具有一般选择器的规则，如果两个规则的特殊性相同，那么后定义的规则优先&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择器的特殊性分成4个成分等级：a、b、c、d&lt;ul&gt;
&lt;li&gt;如果样式是行内样式，那么a=1&lt;/li&gt;
&lt;li&gt;b等于ID选择器的总数&lt;/li&gt;
&lt;li&gt;c等于类、伪类和属性选择器的数量&lt;/li&gt;
&lt;li&gt;d等于类型选择器和伪元素的数量&lt;br&gt;最后按照abcd的顺序将计算的值列出，数字越大的就越特殊&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;建议：尽量保持一般性样式非常一般，特殊性样式尽可能特殊，这样就不需要覆盖特殊样式了。如果发现不得不多次覆盖一般样式，那么从更一般的规则中删除需要覆盖的声明，并且将它显示地应用于需要它的每个元素，这样做可能更简单。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后：&lt;em&gt;一种有意思的特殊性用法是在主体(body)标签上应用类或ID，这样做之后，就可以根据页面或在站点范围内覆盖样式。&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h4&gt;&lt;p&gt;应用样式的元素的后代会继承样式的某些属性，直接应用于元素的任何样式总会覆盖继承而来的样式，这是因为继承而来的样式的特殊性为空。&lt;/p&gt;
&lt;h4 id=&quot;规划、组织和维护样式表&quot;&gt;&lt;a href=&quot;#规划、组织和维护样式表&quot; class=&quot;headerlink&quot; title=&quot;规划、组织和维护样式表&quot;&gt;&lt;/a&gt;规划、组织和维护样式表&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;最近的浏览器基准测试已经表明，导入样式表比链接样式表要慢&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在使用多个CSS文件时，还有两个速度相关的问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多个文件会导致从服务器发送更多数据包，这些数据包的数量（而不是内容）会影响下载时间&lt;/li&gt;
&lt;li&gt;另外，浏览器只能从同一个域同时下载数量有限的文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于这些原因，使用结构良好的&lt;strong&gt;单一CSS文件&lt;/strong&gt;可以显著提高下载速度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;良好的代码结构和清晰的注释有助于代码的维护，在每个注释头中添加一个标志(比如&lt;code&gt;@&lt;/code&gt;)会有助于寻找特定的样式&lt;br&gt;作者推荐的代码结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一般性样式&lt;pre&gt;&lt;code&gt;- 主体样式
- reset样式
- 链接
- 标题
- 其他元素
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;辅助样式&lt;pre&gt;&lt;code&gt;- 表单
- 通知和错误
- 一致的条目
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;页面结构&lt;pre&gt;&lt;code&gt;- 标题、页脚和导航
- 布局
- 其他页面结构元素
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;页面组件&lt;pre&gt;&lt;code&gt;- 各个页面
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;覆盖&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;减小CSS文件大小可以通过删除注释和空白，但最好方法可能是启用服务器端压缩GZIP&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;样式指南是帮助维护或实现站点的好方法，通过制定一些简单的原则，可以确保站点的开发以可控制的方式进行，同时防止样式随着时间的推移变得散乱。&lt;/li&gt;
&lt;li&gt;模式组合是一个页面或一系列页面，它们使用当前的样式表显示站点上可能出现的每种每种样式排列组合，从标题级别和文本样式直到特定的内容和布局类型。这些页面可以让后端和前端开发人员方便地构建页面组合&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;深入理解-line-height&quot;&gt;&lt;a href=&quot;#深入理解-line-height&quot; class=&quot;headerlink&quot; title=&quot;深入理解 line-height&quot;&gt;&lt;/a&gt;深入理解 line-height&lt;/h2&gt;&lt;p&gt;在百度学院的任务列表上推荐了一篇详解line-height的博客，学习了一下，文章分析的非常细致，原文请戳 &lt;a href=&quot;http://www.cnblogs.com/fengzheng126/archive/2012/05/18/2507632.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《深入了解CSS的行高line-height属性》&lt;/a&gt;，我只做了些摘录性的笔记&lt;br&gt;可以有5种方式来定义line-height。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以被定义为：&lt;code&gt;body {line-height:normal;}&lt;/code&gt;，会根据自己的font-size和一个大概默认的系数来计算行高，但系数不能通过样式更改&lt;/li&gt;
&lt;li&gt;可以被定义为：&lt;code&gt;body {line-height:inherit;}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;可以使用一个百分比的值：&lt;code&gt;body {line-height:120%;}&lt;/code&gt;，这种方法会导致所有继承的元素的行高都是一样通过body的font-size计算出来的固定值，而不是通过自己的font-size计算出来的&lt;/li&gt;
&lt;li&gt;可以被定义为一个长度值(px,em等)：&lt;code&gt;body {line-height:25px;}&lt;/code&gt;，表现同百分比&lt;/li&gt;
&lt;li&gt;也可以被定义为纯数字：&lt;code&gt;body {line-height:1.2;}&lt;/code&gt;，和normal差不多，但是可定义自己期望的行高系数基于当前行的字体大小来计算。WCAG 2.0规定1.5为最佳&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;计算后的line-height-font-size就是可用的间距了，将其/2然后分别放到当前行的顶部和底部&lt;/p&gt;
&lt;p&gt;上面那篇博客中还讲解了line-height应用于内容时可能发生的复杂情形，我就不搬运了&lt;/p&gt;
&lt;h2 id=&quot;圣马杯-amp-双飞翼布局&quot;&gt;&lt;a href=&quot;#圣马杯-amp-双飞翼布局&quot; class=&quot;headerlink&quot; title=&quot;圣马杯 &amp;amp; 双飞翼布局&quot;&gt;&lt;/a&gt;圣马杯 &amp;amp; 双飞翼布局&lt;/h2&gt;&lt;p&gt;另外还学习了圣马杯和淘宝的双飞翼布局，并总结了一点异同点&lt;br&gt;相同点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用同样的html结构，基于优先渲染主要内容的原则，会把主内容区放在前面&lt;/li&gt;
&lt;li&gt;都是多列布局&lt;/li&gt;
&lt;li&gt;同样使用浮动技术和左右负边距来布局&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不同点表现在主内容被遮盖时&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;圣马杯布局对多列的wrapper采用了padding，但是会导致左右列位置发生变化，然后对左右列使用&lt;code&gt;position:relative&lt;/code&gt;和&lt;code&gt;left&lt;/code&gt;或&lt;code&gt;right&lt;/code&gt;的方法纠正&lt;/li&gt;
&lt;li&gt;双飞翼布局则将在主内容区中多嵌套了一层wrapper，然后对嵌套在主内容区的wrapper使用左右margin来保证内容区想要显示的内容在正确的位置上&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这是几篇介绍双飞翼布局和圣马杯的博客：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.imooc.com/wenda/detail/254035&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;双飞翼布局介绍-始于淘宝UED&lt;/a&gt;，其实这篇博客是比较权威的一篇，但是描述时上下文有点对应不上，而且展示页面访问不了，所以理解起来很费劲&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.fazero.cc/2015/07/25/CSS%E5%B8%83%E5%B1%80-%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80vs%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS布局-圣杯布局vs双飞翼布局&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/imwtr/p/4441741.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS布局 – 圣杯布局 &amp;amp; 双飞翼布局&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/langzs/archive/2013/01/27/taobaoshuangfeiyi.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS布局之–淘宝双飞翼布局&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我打算自己写一篇博客专门介绍这两种布局方式&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;维基大学的Challenge-5&quot;&gt;&lt;a href=&quot;#维基大学的Challenge-5&quot; class=&quot;headerlink&quot; title=&quot;维基大学的Challenge 5&quot;&gt;&lt;/a&gt;维基大学的Challenge 5&lt;/h2&gt;&lt;p&gt;完成了维基大学的Challe
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 18~20 天</title>
    <link href="http://archmee.github.io/201607/2016-07-23-25.html"/>
    <id>http://archmee.github.io/201607/2016-07-23-25.html</id>
    <published>2016-07-24T16:00:00.000Z</published>
    <updated>2016-07-25T16:30:11.145Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Challenge-3&quot;&gt;&lt;a href=&quot;#Challenge-3&quot; class=&quot;headerlink&quot; title=&quot;Challenge 3&quot;&gt;&lt;/a&gt;Challenge 3&lt;/h2&gt;&lt;p&gt;23号做维基Challenge 3的时候看了推荐的&lt;a href=&quot;http://maxdesign.com.au/articles/two-columns/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一篇两列布局教程&lt;/a&gt;，它使用了一种很新颖的方式实现了两列布局，它的新颖之处就在于，虽然仍然使用浮动，但它使用背景图像来造成视觉上的分栏，而不是给各列设置背景颜色或图像，这样做保证了两列在视觉上的等高，这样不管是哪一列增高了，随着列的增高导致整个布局增高，而背景在Y轴平铺之后，另一列在视觉上也增高了&lt;/p&gt;
&lt;script async src=&quot;https://jsfiddle.net/ym24ukus/embed/html,css,result/&quot;&gt;&lt;/script&gt;

&lt;p&gt;自己仿造教程做了Challenge 3（因为这个需要专门制作背景图像，所以我使用了现成的图像）&lt;/p&gt;
&lt;script async src=&quot;https://jsfiddle.net/ym24ukus/2/embed/html,css,result/&quot;&gt;&lt;/script&gt;

&lt;p&gt;然后按照自己理解用另一种方式实现了同样效果&lt;/p&gt;
&lt;script async src=&quot;https://jsfiddle.net/ym24ukus/3/embed/html,css,result/&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;Challenge-4&quot;&gt;&lt;a href=&quot;#Challenge-4&quot; class=&quot;headerlink&quot; title=&quot;Challenge 4&quot;&gt;&lt;/a&gt;Challenge 4&lt;/h2&gt;&lt;p&gt;25号做了Challenge 4，Demo如下，css中也注释了不同的实现方式：&lt;/p&gt;
&lt;script async src=&quot;https://jsfiddle.net/ym24ukus/4/embed/html,css,result/&quot;&gt;&lt;/script&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Challenge-3&quot;&gt;&lt;a href=&quot;#Challenge-3&quot; class=&quot;headerlink&quot; title=&quot;Challenge 3&quot;&gt;&lt;/a&gt;Challenge 3&lt;/h2&gt;&lt;p&gt;23号做维基Challenge 3的时候看了推荐的&lt;a href=&quot;
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 16、17 天</title>
    <link href="http://archmee.github.io/201607/2016-07-21-22.html"/>
    <id>http://archmee.github.io/201607/2016-07-21-22.html</id>
    <published>2016-07-21T16:00:00.000Z</published>
    <updated>2016-07-23T15:11:33.987Z</updated>
    
    <content type="html">&lt;p&gt;到上一篇博客为止，已经完成了《Head First HTML&amp;amp;CSS》这本书的学习，所以接下来会注重实践任务，先做一些静态页面，熟悉HTML以及CSS。&lt;br&gt;这两天的学习内容如下&lt;/p&gt;
&lt;h2 id=&quot;终结慕课网HTML-CSS基础课程&quot;&gt;&lt;a href=&quot;#终结慕课网HTML-CSS基础课程&quot; class=&quot;headerlink&quot; title=&quot;终结慕课网HTML+CSS基础课程&quot;&gt;&lt;/a&gt;终结慕课网HTML+CSS基础课程&lt;/h2&gt;&lt;p&gt;在写我最开始的几篇博客中，已经完成了慕课网 &lt;a href=&quot;http://www.imooc.com/learn/9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML+CSS基础课程&lt;/a&gt; 的HTML部分，这两天花了点时间完成了CSS部分，记录了一些笔记&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在网页中，元素有三种布局模型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;流动模型（Flow）：默认html元素流入页面的方式&lt;/li&gt;
&lt;li&gt;浮动模型 (Float)：使用float技术&lt;/li&gt;
&lt;li&gt;层模型（Layer）：层模型有三种形式：&lt;ul&gt;
&lt;li&gt;绝对定位(position: absolute)&lt;/li&gt;
&lt;li&gt;相对定位(position: relative)&lt;/li&gt;
&lt;li&gt;固定定位(position: fixed)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当元素被设置为块状元素时用 text-align：center 就不起作用了，这时也分两种情况：定宽块状元素和不定宽块状元素。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;满足定宽和块状两个条件的元素是可以通过设置“左右margin”值为“auto”来实现居中的。&lt;/li&gt;
&lt;li&gt;不定宽度的块状元素有三种方法居中（这三种方法目前使用的都很多）：&lt;ol&gt;
&lt;li&gt;使用 table 等表格标签&lt;/li&gt;
&lt;li&gt;设置 display: inline 方法：与第一种类似，显示类型设为行内元素，进行不定宽元素的属性设置&lt;/li&gt;
&lt;li&gt;通过给父元素设置 float，然后给父元素设置 position:relative 和 left:50%，子元素设置 position:relative 和 left: -50% 来实现水平居中。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;父元素高度确定的单行文本的竖直居中的方法是通过设置父元素的 height 和 line-height 高度一致来实现的。(height: 该元素的高度，line-height: 顾名思义，行高（行间距），指在文本中，行与行之间的 基线间的距离 )。&lt;br&gt;line-height 与 font-size 的计算值之差，在 CSS 中成为“行间距”。分为两半，分别加到一个文本行内容的顶部和底部。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;父元素高度确定的多行文本、图片等的竖直居中的方法有两种： &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用插入 table (包括tbody、tr、td)标签，同时设置 vertical-align：middle。 css 中有一个用于竖直居中的属性 vertical-align，在父元素设置此样式时，会对inline-block类型的子元素都有用。&lt;/li&gt;
&lt;li&gt;在 chrome、firefox 及 IE8 以上的浏览器下可以设置块级元素的 display 为 table-cell（设置为表格单元显示），激活 vertical-align 属性，但注意 IE6、7 并不支持这个样式, 兼容性比较差。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有一个有趣的现象就是当为元素（不论之前是什么类型元素，display:none 除外）设置以下2个之一：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;position : absolute &lt;/li&gt;
&lt;li&gt;float : left 或 float:right &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;简单来说，只要html代码中出现以上其中之一，元素的display显示类型就会自动变为以 display:inline-block（内联块元素）的方式显示，当然就可以设置元素的 width 和 height 了，且默认宽度不占满父元素。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;维基大学-CSS-Challenge&quot;&gt;&lt;a href=&quot;#维基大学-CSS-Challenge&quot; class=&quot;headerlink&quot; title=&quot;维基大学 CSS Challenge&quot;&gt;&lt;/a&gt;维基大学 CSS Challenge&lt;/h2&gt;&lt;p&gt;不知道是从哪里找到了这个页面&lt;a href=&quot;https://en.wikiversity.org/wiki/Web_Design/CSS_challenges&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wikiversity CSS challenges&lt;/a&gt;，上面列出了7个循序渐进的挑战项目，无外乎CSS的基础知识的运用，盒子模型，字体排版、以及布局。&lt;br&gt;目前为止我完成了前2个（其实是3个，还有一个可选Challenge 2 A），代码已经放到了github上&lt;br&gt;Challenge 2 A Demo：&lt;/p&gt;
&lt;script async src=&quot;https://jsfiddle.net/ym24ukus/1/embed/html,css,result/&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;first-letter-和-first-letter-的区别：&quot;&gt;&lt;a href=&quot;#first-letter-和-first-letter-的区别：&quot; class=&quot;headerlink&quot; title=&quot;:first-letter 和 ::first-letter 的区别：&quot;&gt;&lt;/a&gt;:first-letter 和 ::first-letter 的区别：&lt;/h2&gt;&lt;p&gt;对于 CSS 2， &lt;strong&gt;伪元素&lt;/strong&gt;采用单冒号前缀语法. 因为&lt;strong&gt;伪类&lt;/strong&gt;也是同样的语法，所以使得两者难以区分。CSS2.1 改变了伪元素的前缀语法可以解决这个问题，现在伪元素采用双冒号前缀，并且伪类仍然采用单冒号前缀。&lt;br&gt;CSS2伪类单冒号语法已得到广泛支持时，所有支持双冒号的浏览器同样也支持旧的单冒号语法。&lt;br&gt;考虑浏览器兼容性的话，:first-letter 是一个更有效的选择; 否则， ::first-letter 更受欢迎。&lt;/p&gt;
&lt;h2 id=&quot;未来一段时间的计划&quot;&gt;&lt;a href=&quot;#未来一段时间的计划&quot; class=&quot;headerlink&quot; title=&quot;未来一段时间的计划&quot;&gt;&lt;/a&gt;未来一段时间的计划&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;完成CSS Challenge上面的内容&lt;/li&gt;
&lt;li&gt;核对下百度学院上的学习路径&lt;/li&gt;
&lt;li&gt;模仿生日管家官网（&lt;a href=&quot;http://shengri.cn/）&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://shengri.cn/）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;除了验证html、css外，还要看一些编码规范，对项目进行整理&lt;/li&gt;
&lt;li&gt;了解less或sass并对模仿的项目进行重构&lt;/li&gt;
&lt;li&gt;模仿CSS-Tricks（&lt;a href=&quot;https://css-tricks.com/），再用less或sass进行重构&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://css-tricks.com/），再用less或sass进行重构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;学习js、jsDOM、jQ，做相关技术的项目&lt;/li&gt;
&lt;li&gt;了解webpack等工具&lt;/li&gt;
&lt;li&gt;学习js更高级的内容&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然计划只是计划，永远赶不上变化，学习过程中也会不断调整计划&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;到上一篇博客为止，已经完成了《Head First HTML&amp;amp;CSS》这本书的学习，所以接下来会注重实践任务，先做一些静态页面，熟悉HTML以及CSS。&lt;br&gt;这两天的学习内容如下&lt;/p&gt;
&lt;h2 id=&quot;终结慕课网HTML-CSS基础课程&quot;&gt;&lt;a href=&quot;#终
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 14、15 天</title>
    <link href="http://archmee.github.io/201607/2016-07-19-20.html"/>
    <id>http://archmee.github.io/201607/2016-07-19-20.html</id>
    <published>2016-07-19T16:00:00.000Z</published>
    <updated>2016-07-21T06:08:30.814Z</updated>
    
    <content type="html">&lt;p&gt;把这两天的学习笔记总结在了一起，如下。&lt;/p&gt;
&lt;h2 id=&quot;第13章-表格与列表&quot;&gt;&lt;a href=&quot;#第13章-表格与列表&quot; class=&quot;headerlink&quot; title=&quot;第13章. 表格与列表&quot;&gt;&lt;/a&gt;第13章. 表格与列表&lt;/h2&gt;&lt;h3 id=&quot;表格&quot;&gt;&lt;a href=&quot;#表格&quot; class=&quot;headerlink&quot; title=&quot;表格&quot;&gt;&lt;/a&gt;表格&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;标记表格、&lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt;标记表格行、&lt;code&gt;&amp;lt;th&amp;gt;&lt;/code&gt;定义表头单元格（可以是顶部，也可以在左侧）、&lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt;定义表内容单元格，&lt;code&gt;&amp;lt;caption&amp;gt;&lt;/code&gt;定义表格标题（caption-side 规则可以指定表格标题的显示位置）&lt;/li&gt;
&lt;li&gt;HTML表格允许你使用HTML标记指定表格的结构，而CSS表格显示则提供了一种可以用类似表格的表现方式显示块级元素&lt;/li&gt;
&lt;li&gt;&lt;p&gt;表格单元格没有外边距，单元格之间的空间叫做 border-spacing（边框间距），border-spacing为所有单元格设置一个共同的间距，也就是说它是针对整个表格，而不是为单独的单元格设置。&lt;br&gt;border-spacing还可以在垂直方向和水平方向设置不同的边框间距&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;border-spacing&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;10px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;/*10px的水平边框间距，5px的垂直边框间距*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;border-collapse 规则可折叠表格边框，使单元格之间没有间距&lt;code&gt;border-collapse:collapse;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;nth-child 伪类可选择位于父元素下的第n个子元素，第0个代表没有选中，而且&lt;strong&gt;不限制于元素类型&lt;/strong&gt;&lt;/p&gt;
  &lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*可以直接指定奇偶数段落*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:nth-child(even)&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123; &lt;span class=&quot;comment&quot;&gt;/*odd是奇数*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; red&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*还可以使用简单的多项式指定*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:nth-child(2n+1)&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; white&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;nth-of-type 伪类可指定位于父元素下的同类型的第n个元素，&lt;strong&gt;要限制元素类型&lt;/strong&gt;（书上没有讲这个）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;表格可以嵌套&lt;/li&gt;
&lt;li&gt;可以给&lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt;添加&lt;code&gt;rowspan&lt;/code&gt; 和&lt;code&gt;colspan&lt;/code&gt;属性来指定跨行跨列&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;列表&quot;&gt;&lt;a href=&quot;#列表&quot; class=&quot;headerlink&quot; title=&quot;列表&quot;&gt;&lt;/a&gt;列表&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;list-style-type属性值可以更改列表标记：&lt;ul&gt;
&lt;li&gt;disc：圆点&lt;/li&gt;
&lt;li&gt;circle：空心圆&lt;/li&gt;
&lt;li&gt;square：方块&lt;/li&gt;
&lt;li&gt;none：无标记&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;list-style-image 指定图像代替列表标记&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;list-style-postion&lt;/strong&gt; 可以指定列表标记的回绕方式：&lt;ul&gt;
&lt;li&gt;inside：使列表标记包含在li元素文字内，换行的文字会在标记下面回绕&lt;/li&gt;
&lt;li&gt;outside：默认值，使标记独立于文字，换行的文字不会在标记下面回绕&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;当用 nth-child 为表格奇偶行指定不同颜色时，如果同时给 &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt;添加了&lt;code&gt;rowspan&lt;/code&gt; 属性的话，浏览器会将设置跨行的行计算在内来计算 td 位于 nth-child 的顺序，这样导致表格样式看起来很混乱，暂时没找到不使用js等技术的方法，除非不使用 nth-child，而改用类来手动指定。问题如下代码：&lt;/p&gt;
&lt;script async src=&quot;https://jsfiddle.net/7zh7uo7s/7/embed/html,css,result/&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;第14章-表单&quot;&gt;&lt;a href=&quot;#第14章-表单&quot; class=&quot;headerlink&quot; title=&quot;第14章. 表单&quot;&gt;&lt;/a&gt;第14章. 表单&lt;/h2&gt;&lt;h3 id=&quot;常见表单元素&quot;&gt;&lt;a href=&quot;#常见表单元素&quot; class=&quot;headerlink&quot; title=&quot;常见表单元素&quot;&gt;&lt;/a&gt;常见表单元素&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;text input 用于单行文本输入&lt;/li&gt;
&lt;li&gt;submit input 用于创建提交表单的按钮，value属性可指定提交按钮的文字&lt;/li&gt;
&lt;li&gt;radio input 用于创建单选框，同组的只能使用一个同一name，因为同一时刻只有一个被选中，checked 是布尔属性，可以为单选框和复选框标记默认值&lt;/li&gt;
&lt;li&gt;checkbox input 用于创建复选框，checked 是布尔属性，可以为单选框和复选框标记默认值，同组的一次也只使用一个name，但是在后面加上[]便于服务器脚本识别多个值，如&lt;code&gt;name=&amp;quot;name[]&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;textarea 创建多行文本输入区&lt;/li&gt;
&lt;li&gt;select 结合 option 创建选择菜单，selected是布尔属性，可以为菜单选择提供默认值，布尔属性&lt;code&gt;multiple&lt;/code&gt;可将这个菜单变成多选菜单，name属性是给select而不是option&lt;/li&gt;
&lt;li&gt;input 是&lt;strong&gt;内联元素&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;html5新增表单元素&quot;&gt;&lt;a href=&quot;#html5新增表单元素&quot; class=&quot;headerlink&quot; title=&quot;html5新增表单元素&quot;&gt;&lt;/a&gt;html5新增表单元素&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;number input 创建文本输入框用于输入数字，可用min和max属性指定数字范围，如果超出范围提交表单会发出警告&lt;/li&gt;
&lt;li&gt;range input 创建一个滑动条来选择范围&lt;/li&gt;
&lt;li&gt;color input 创建一个颜色选择器提供颜色输入&lt;/li&gt;
&lt;li&gt;date input 创建日期选择器&lt;/li&gt;
&lt;li&gt;email input 提供邮件地址输入框，类似文本框&lt;/li&gt;
&lt;li&gt;tel input 提供电话号码输入框，类似文本框&lt;/li&gt;
&lt;li&gt;url input 提供url输入框，类似文本框&lt;/li&gt;
&lt;li&gt;password input 提供密码输入框，会对输入的文本加掩码，当然这仅仅只是防止了输入密码时被别人看到，并不能保证数据传输的安全性&lt;/li&gt;
&lt;li&gt;file input 提供文件上传控件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;使用表单&quot;&gt;&lt;a href=&quot;#使用表单&quot; class=&quot;headerlink&quot; title=&quot;使用表单&quot;&gt;&lt;/a&gt;使用表单&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;action 属性指定表单提交的服务器脚本地址&lt;/li&gt;
&lt;li&gt;method 提供提交的方法，有GET和POST两种&lt;ul&gt;
&lt;li&gt;GET：会将你的表单变量追加到URL最后，然后请求服务器&lt;/li&gt;
&lt;li&gt;POST：这种方式会打包你的表单变量，在后台把它们发送到服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;fieldset+legend 可以对表单元素进行视觉上的分组&lt;/li&gt;
&lt;li&gt;placeholder 属性为输入框提供提示文字，它不会作为表单的值提交&lt;/li&gt;
&lt;li&gt;required 可用于任何表单控件，指示一个域是必须要提供值的&lt;/li&gt;
&lt;li&gt;合理使用&lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt;标记可增强页面的可访问性，可以提供页面结构的更多信息，使你更容易对标签设置样式，另外也有助于有视力障碍的用户使用屏幕阅读器更准确的标识表单元素&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Demo：&lt;/p&gt;
&lt;script async src=&quot;https://jsfiddle.net/1jdux83p/2/embed/html,css,result/&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;附录-没有谈到的十大主题&quot;&gt;&lt;a href=&quot;#附录-没有谈到的十大主题&quot; class=&quot;headerlink&quot; title=&quot;附录. 没有谈到的十大主题&quot;&gt;&lt;/a&gt;附录. 没有谈到的十大主题&lt;/h2&gt;&lt;h3 id=&quot;1-更多CSS选择器&quot;&gt;&lt;a href=&quot;#1-更多CSS选择器&quot; class=&quot;headerlink&quot; title=&quot;1. 更多CSS选择器&quot;&gt;&lt;/a&gt;1. 更多CSS选择器&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;伪元素：可以用来选择元素的某些部分，如&lt;code&gt;p:first-letter&lt;/code&gt;会选择段落中的第一个字母&lt;/li&gt;
&lt;li&gt;属性选择器：通过元素的属性来匹配选择器，如&lt;code&gt;img[width]&lt;/code&gt;会选择提供了width属性的img元素&lt;/li&gt;
&lt;li&gt;兄弟选择器：根据兄弟来选择一个元素，如&lt;code&gt;h1+p&lt;/code&gt;会选择所有h1后面的p元素&lt;/li&gt;
&lt;li&gt;结合选择器：通过对各种已有选择器进行组合来选择元素&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-开发商特定的CSS属性&quot;&gt;&lt;a href=&quot;#2-开发商特定的CSS属性&quot; class=&quot;headerlink&quot; title=&quot;2. 开发商特定的CSS属性&quot;&gt;&lt;/a&gt;2. 开发商特定的CSS属性&lt;/h3&gt;&lt;p&gt;通常是浏览器制造商为他们的浏览器增加新的功能来测试新特性，常见的几个特定属性如下表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;浏览器&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-moz-&lt;/td&gt;
&lt;td&gt;mozilla的firefox&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-webkit-&lt;/td&gt;
&lt;td&gt;Safari和Chrome&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-ms-&lt;/td&gt;
&lt;td&gt;微软的IE浏览器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-o-&lt;/td&gt;
&lt;td&gt;Opera浏览器&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;使用方式是用上表的名称结合css相应属性&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;trasform&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;function&quot;&gt;rotate&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;45deg&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;-moz-trasform&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;function&quot;&gt;rotate&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;45deg&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;/*支持firefox*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;-webkit-trasform&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;function&quot;&gt;rotate&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;45deg&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;/*支持Chrome等*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;-ms-trasform&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;function&quot;&gt;rotate&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;45deg&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;/*支持IE*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;-o-trasform&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;function&quot;&gt;rotate&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;45deg&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;/*支持Opera*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-CSS变换与过渡&quot;&gt;&lt;a href=&quot;#3-CSS变换与过渡&quot; class=&quot;headerlink&quot; title=&quot;3. CSS变换与过渡&quot;&gt;&lt;/a&gt;3. CSS变换与过渡&lt;/h3&gt;&lt;p&gt;可以对元素做充分的2D和3D变换，Demo&lt;/p&gt;
&lt;p&gt;&lt;script async src=&quot;http://jsfiddle.net/1jdux83p/1/embed/html,css,result/&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;虽然我写了针对ie的效果，但是ie好像不支持&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;4-交互&quot;&gt;&lt;a href=&quot;#4-交互&quot; class=&quot;headerlink&quot; title=&quot;4. 交互&quot;&gt;&lt;/a&gt;4. 交互&lt;/h3&gt;&lt;h3 id=&quot;5-HTML5-API和Web应用&quot;&gt;&lt;a href=&quot;#5-HTML5-API和Web应用&quot; class=&quot;headerlink&quot; title=&quot;5. HTML5 API和Web应用&quot;&gt;&lt;/a&gt;5. HTML5 API和Web应用&lt;/h3&gt;&lt;h3 id=&quot;6-再谈Web字体&quot;&gt;&lt;a href=&quot;#6-再谈Web字体&quot; class=&quot;headerlink&quot; title=&quot;6. 再谈Web字体&quot;&gt;&lt;/a&gt;6. 再谈Web字体&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;有一些免费的字体服务可以使用&lt;/li&gt;
&lt;li&gt;浏览器下载字体时会有不同表现，有些浏览器会显示一个备份字体，另外一些可能会等待字体下载完毕后才显示文本&lt;/li&gt;
&lt;li&gt;一旦下载了字体，会由浏览器缓存，下次遇到该字体时不会再次下载&lt;/li&gt;
&lt;li&gt;所有现代浏览器（IE9+）都支持Web字体&lt;/li&gt;
&lt;li&gt;有很多免费字体可以使用&lt;/li&gt;
&lt;li&gt;使用Web字体可能会对你的页面性能产生一定影响&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@font-face&lt;/code&gt;规则中的字体应当仅限于页面中真正使用的字体&lt;/li&gt;
&lt;li&gt;如果你有某个字体的许可证，要与你的开发商核对一下，他们可能在你的web上也可以使用&lt;/li&gt;
&lt;li&gt;与传统字体一样，一定要包含某个字体作为退路，以免你的字体不可用，或者获取、解码字体时遇到错误&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;7-创建Web页面的工具&quot;&gt;&lt;a href=&quot;#7-创建Web页面的工具&quot; class=&quot;headerlink&quot; title=&quot;7. 创建Web页面的工具&quot;&gt;&lt;/a&gt;7. 创建Web页面的工具&lt;/h3&gt;&lt;h3 id=&quot;8-XHTML&quot;&gt;&lt;a href=&quot;#8-XHTML&quot; class=&quot;headerlink&quot; title=&quot;8. XHTML&quot;&gt;&lt;/a&gt;8. XHTML&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;如果你需要验证文档或者把你的文档转换成xml，或者SVG，就需要使用XHTML&lt;/li&gt;
&lt;li&gt;所有元素都必须是良构的，良构是指，要结束所有元素，用引号包围属性值，合法嵌套元素等，所有void元素都必须在结束标签以前使用&lt;code&gt;/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;页面应当指定application/xhtml+xml MIME类型&lt;/li&gt;
&lt;li&gt;确保html元素中包含XHTML命名空间&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;9-服务器端脚本&quot;&gt;&lt;a href=&quot;#9-服务器端脚本&quot; class=&quot;headerlink&quot; title=&quot;9. 服务器端脚本&quot;&gt;&lt;/a&gt;9. 服务器端脚本&lt;/h3&gt;&lt;h3 id=&quot;10-音频-Audio&quot;&gt;&lt;a href=&quot;#10-音频-Audio&quot; class=&quot;headerlink&quot; title=&quot;10. 音频 Audio&quot;&gt;&lt;/a&gt;10. 音频 Audio&lt;/h3&gt;&lt;p&gt;HTML利用&lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;元素提供了一种标准方法在页面中播放音频，而无需使用插件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;与视频类似，音频也没有标准编码，目前有3种主流格式：MP3、WAV、Ogg Vorbis&lt;/li&gt;
&lt;li&gt;audio元素及其javascript API提供了其他控制&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;把这两天的学习笔记总结在了一起，如下。&lt;/p&gt;
&lt;h2 id=&quot;第13章-表格与列表&quot;&gt;&lt;a href=&quot;#第13章-表格与列表&quot; class=&quot;headerlink&quot; title=&quot;第13章. 表格与列表&quot;&gt;&lt;/a&gt;第13章. 表格与列表&lt;/h2&gt;&lt;h3 id=&quot;表格&quot;&gt;
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 13 天</title>
    <link href="http://archmee.github.io/201607/2016-07-18.html"/>
    <id>http://archmee.github.io/201607/2016-07-18.html</id>
    <published>2016-07-17T16:00:00.000Z</published>
    <updated>2016-07-21T05:53:57.095Z</updated>
    
    <content type="html">&lt;h2 id=&quot;第12章-html5标记&quot;&gt;&lt;a href=&quot;#第12章-html5标记&quot; class=&quot;headerlink&quot; title=&quot;第12章. html5标记&quot;&gt;&lt;/a&gt;第12章. html5标记&lt;/h2&gt;&lt;h3 id=&quot;常用标签&quot;&gt;&lt;a href=&quot;#常用标签&quot; class=&quot;headerlink&quot; title=&quot;常用标签&quot;&gt;&lt;/a&gt;常用标签&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;标签&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;定义页面头部内容或某个区块的顶部&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;footer&lt;/td&gt;
&lt;td&gt;定义页面底部内容或某个区块的底部&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nav&lt;/td&gt;
&lt;td&gt;定义导航&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;time&lt;/td&gt;
&lt;td&gt;表现日期时间, 详细可以查看&lt;a href=&quot;http://www.w3school.com.cn/tags/tag_time.asp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;w3school&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;section&lt;/td&gt;
&lt;td&gt;表示一个由相关内容构成的结构明确的区块&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;article&lt;/td&gt;
&lt;td&gt;表示可以独立于页面上的其余元素进行重用和分发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;aside&lt;/td&gt;
&lt;td&gt;定义页面的补充内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;video&lt;/td&gt;
&lt;td&gt;定义和视频媒体有关的内容&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;header 和 footer 都不仅仅用于主页眉页脚，如果你希望把一些元素组合起来放在一个首部或尾部中，都可以使用该标签。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Video&quot;&gt;&lt;a href=&quot;#Video&quot; class=&quot;headerlink&quot; title=&quot;Video&quot;&gt;&lt;/a&gt;Video&lt;/h3&gt;&lt;h4 id=&quot;video-相关属性：&quot;&gt;&lt;a href=&quot;#video-相关属性：&quot; class=&quot;headerlink&quot; title=&quot;video 相关属性：&quot;&gt;&lt;/a&gt;video 相关属性：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;src&lt;/code&gt; 指定视频位置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt; 说明视频类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;controls&lt;/code&gt; 是布尔属性，用来显示播放控件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;autoplay&lt;/code&gt; 是布尔属性，是否加载页面时自动播放&lt;/li&gt;
&lt;li&gt;&lt;code&gt;loop&lt;/code&gt; 布尔属性，是否循环播放&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width&lt;/code&gt; 和 &lt;code&gt;height&lt;/code&gt; 指定显示视频的窗口大小&lt;/li&gt;
&lt;li&gt;&lt;code&gt;poster&lt;/code&gt; 可以指定视频的一帧画面或其他图片作为视频封面，视频默认取第一帧画面&lt;/li&gt;
&lt;li&gt;&lt;code&gt;preload&lt;/code&gt; 可以细粒度地指定视频加载方式&lt;ul&gt;
&lt;li&gt;none：在用户真正播放视频之前不下载视频&lt;/li&gt;
&lt;li&gt;metadata：下载视频元数据，但是不下载视频内容&lt;/li&gt;
&lt;li&gt;auto：让浏览器自己决定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;视频格式&quot;&gt;&lt;a href=&quot;#视频格式&quot; class=&quot;headerlink&quot; title=&quot;视频格式&quot;&gt;&lt;/a&gt;视频格式&lt;/h4&gt;&lt;p&gt;一个视频文件包含两部分，一个视频部分和一个音频部分，每个部分使用一种特定的编码类型来编码，包含视频和音频的文件称为容器，也有自己的格式和格式名。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;视频容器类型&lt;/th&gt;
&lt;th&gt;视频容器格式&lt;/th&gt;
&lt;th&gt;视频编码格式&lt;/th&gt;
&lt;th&gt;音频编码格式&lt;/th&gt;
&lt;th&gt;支持情况&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;MP4容器&lt;/td&gt;
&lt;td&gt;.mp4&lt;/td&gt;
&lt;td&gt;H.264视频编码&lt;/td&gt;
&lt;td&gt;ACC音频编码&lt;/td&gt;
&lt;td&gt;Safari、IE9、部分Chrome&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WebM容器&lt;/td&gt;
&lt;td&gt;.webm&lt;/td&gt;
&lt;td&gt;Vp8视频编码&lt;/td&gt;
&lt;td&gt;Vorbis音频编码&lt;/td&gt;
&lt;td&gt;Firfox、Chrome、Opera&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ogg容器&lt;/td&gt;
&lt;td&gt;.ogv&lt;/td&gt;
&lt;td&gt;Theora视频编码&lt;/td&gt;
&lt;td&gt;Vorbis音频编码&lt;/td&gt;
&lt;td&gt;Firfox、Chrome、Opera&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;Demo&quot;&gt;&lt;a href=&quot;#Demo&quot; class=&quot;headerlink&quot; title=&quot;Demo&quot;&gt;&lt;/a&gt;Demo&lt;/h4&gt;&lt;p&gt;简单的使用video播放视频&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;video&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;controls&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;autoplay&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;320&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;200&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;video/tweetship.mp4&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;poster&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;images/poster.png&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;video&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果要为多种浏览器提供多种视频格式支持，可用 source 列出可用视频格式，浏览器会从上至下查找，对于每个source元素，浏览器会加载每个视频文件的元数据，查看能不能播放这个视频，直到找到它能播放的视频格式。&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;video&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;controls&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;autoplay&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;320&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;200&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;poster&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;images/poster.png&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;video/tweetsip.mp4&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;video/tweetsip.webm&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;video/tweetsip.ogv&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;Sorry! your browser doesn&#39;t support the video element.&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;video&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是这样做导致浏览器在播放视频之前做了太多检查工作，会影响效率，我们可以为每个 source 提供 type 属性帮助浏览器确定视频类型&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;video&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;controls&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;autoplay&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;320&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;200&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;poster&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;images/poster.png&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;video/tweetsip.mp4&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&#39;video/mp4; codecs=&quot;avcl.42E01E, mp4a.40.2&quot;&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;video/tweetsip.webm&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&#39;video/webm; codecs=&quot;vp8, vorbis&quot;&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;video/tweetsip.ogv&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&#39;video/ogg; codecs=&quot;theora, vorbis&quot;&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;Sorry! your browser doesn&#39;t support the video element.&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;video&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;type&lt;/code&gt; 属性首先说明了视频文件的MIME类型，然后codecs参数指定哪个编码器对视频和音频编码，来创建编码的视频文件。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果要支持IE9或其他老版本浏览器用flash，可以在source列表最后添加object元素&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;其他&quot;&gt;&lt;a href=&quot;#其他&quot; class=&quot;headerlink&quot; title=&quot;其他&quot;&gt;&lt;/a&gt;其他&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;CDN（Content delivery Network）是内容分发网络的简称&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;导航条中的&lt;code&gt;li&lt;/code&gt;元素之间产生了边距，不知为何，看了这篇&lt;a href=&quot;http://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《去除inline-block元素间间距的N种方法》&lt;/a&gt; 后知道这是inline-block导致的，文章中使用了很多方式来解决这个问题，而我采用了在ul的样式中写入&lt;code&gt;display:table;&lt;/code&gt;的方式&lt;/li&gt;
&lt;li&gt;IE9不支持本章节的视频播放，暂未找到理想的解决办法&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第12章-html5标记&quot;&gt;&lt;a href=&quot;#第12章-html5标记&quot; class=&quot;headerlink&quot; title=&quot;第12章. html5标记&quot;&gt;&lt;/a&gt;第12章. html5标记&lt;/h2&gt;&lt;h3 id=&quot;常用标签&quot;&gt;&lt;a href=&quot;#常用标签&quot; c
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 9~12 天</title>
    <link href="http://archmee.github.io/201607/2016-07-14-17.html"/>
    <id>http://archmee.github.io/201607/2016-07-14-17.html</id>
    <published>2016-07-16T16:00:00.000Z</published>
    <updated>2016-07-18T12:00:40.542Z</updated>
    
    <content type="html">&lt;p&gt;7月14、15、16、17这几天断片了(懒癌发作)，学习也变得闲散起来，总共的学习内容也就差不多平时一天的内容，这里是对这几天学习内容的总结，《Head First HTML &amp;amp; CSS》第11章关于布局和定位讲得非常细致，所以总结的文字也很抽象，需要看书配合图文才能更好理解。&lt;/p&gt;
&lt;h2 id=&quot;第11章-布局和定位&quot;&gt;&lt;a href=&quot;#第11章-布局和定位&quot; class=&quot;headerlink&quot; title=&quot;第11章. 布局和定位&quot;&gt;&lt;/a&gt;第11章. 布局和定位&lt;/h2&gt;&lt;h3 id=&quot;布局&quot;&gt;&lt;a href=&quot;#布局&quot; class=&quot;headerlink&quot; title=&quot;布局&quot;&gt;&lt;/a&gt;布局&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;流让CSS有了强大威力，流实际上就是浏览器在页面中摆放HTML元素所用的方法。浏览器从HTML文件最上面开始，从上到下沿着元素流逐个显示所遇到的各个元素&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;块元素&lt;/strong&gt;从上向下流，各元素之间有一个换行。而&lt;strong&gt;内联元素&lt;/strong&gt;在水平方向会相互挨着，总体上会从左到右、从上往下流（左上方到右下方）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;盒子模型的外边距&lt;/strong&gt;：如果浏览器并排放置内联元素，内联元素水平方上的外边距会正常显示。而浏览器上下放置块元素时，块元素在垂直方向上的外边距会折叠为最大的那个外边距高度（嵌套的话会根据外面的元素的边框，如果有边框就不会折叠，否则嵌套也会折叠）&lt;/li&gt;
&lt;li&gt;对于所有浮动元素，都必须指定一个宽度，当然图像除外，因为图像有自己的默认宽度&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;浮动元素&lt;/strong&gt;不再是正常流的一部分&lt;/li&gt;
&lt;li&gt;float属性首先尽可能的根据float值浮动一个元素，然后它下面的块元素会忽略它的存在，而内联元素都会绕流这个元素。&lt;/li&gt;
&lt;li&gt;css &lt;code&gt;clear&lt;/code&gt;属性要求：当元素流入页面时，这个元素的左边、右边或两边（取决于clear的值）不能有浮动元素，所以被指定了clear属性的元素流入页面时，会根据左右是否有浮动元素来下移直到左右都没有浮动元素为止。&lt;/li&gt;
&lt;li&gt;浮动元素的外边距并不会碰到正常流中元素的外边距，所以他们不会折叠&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可以浮动内联元素，比如图像，但是其他内联元素不常见&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当用户调整屏幕大小时，你的设计仍能保持原样，这称为&lt;strong&gt;冻结布局&lt;/strong&gt;。冻结布局会通过指定宽度锁定元素，让他们冻结在页面上，这样这些元素根本不能移动，就能避免由于窗口扩展带来的问题。自然流入页面或使用浮动的是&lt;strong&gt;流体布局&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;流体和冻结之间的状态就是&lt;strong&gt;凝胶布局&lt;/strong&gt;：通过设置&lt;code&gt;margin: 0 auto;&lt;/code&gt;来实现，凝胶布局将冻结布局的元素在浏览器中居中显示。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;定位&quot;&gt;&lt;a href=&quot;#定位&quot; class=&quot;headerlink&quot; title=&quot;定位&quot;&gt;&lt;/a&gt;定位&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;浏览器会将绝对定位元素从流中完全删除，然后将这个元素放在指定位置上。位置可以通过&lt;code&gt;top&lt;/code&gt;、&lt;code&gt;bottom&lt;/code&gt;、&lt;code&gt;left&lt;/code&gt;、&lt;code&gt;right&lt;/code&gt;这几个属性来指定相对于最近已定位的祖宗元素的偏移。&lt;/li&gt;
&lt;li&gt;流中的块元素和内联元素会忽略绝对定位元素正常流入页面，和float有区别&lt;/li&gt;
&lt;li&gt;绝对定位不用指定元素宽度。&lt;/li&gt;
&lt;li&gt;每个定位元素（绝对、相对和固定定位）都有一个&lt;code&gt;z-index&lt;/code&gt;属性，这会指定它在一个虚拟的z轴上的位置，&lt;code&gt;z-index&lt;/code&gt;值越大，元素越出现在屏幕的上层，&lt;code&gt;z-index&lt;/code&gt;可以为负值&lt;/li&gt;
&lt;li&gt;&lt;p&gt;position属性值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;static：静态定位（默认值），元素会放在正常的文档流中，由浏览器决定决定这些静态定位元素的位置而不是你&lt;/li&gt;
&lt;li&gt;absolute：绝对定位，浏览器将其从文档流中删除，并相对于最近已定位的祖宗元素来定位&lt;/li&gt;
&lt;li&gt;fixed：固定定位，浏览器将元素放在相对于浏览器窗口的一个位置上（而不是页面），所以固定元素永远不会移动&lt;/li&gt;
&lt;li&gt;relative：相对定位，会让元素正常流入页面，而定位也是相对于该元素在流中的原有位置进行偏移&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;指定位置时可以使用像素，也可以使用百分比&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;css表格显示&lt;/strong&gt;工作方式与正常表格一样，都有行和列的定义：首先在html中定义表格的行列结构，然后将表结构相应的&lt;em&gt;块元素&lt;/em&gt;的display属性设置为table、table-row、table-cell，就指定了相应元素显示方式为表格、行、列。可以用指定&lt;code&gt;border-spacing&lt;/code&gt;为表格指定外边距，并且不会和紧邻的垂直外边距折叠&lt;/li&gt;
&lt;li&gt;vertical-align用来设置垂直对齐方式，有属性值：top顶部对齐、middle居中对齐、和bottom底部对齐&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;7月14、15、16、17这几天断片了(懒癌发作)，学习也变得闲散起来，总共的学习内容也就差不多平时一天的内容，这里是对这几天学习内容的总结，《Head First HTML &amp;amp; CSS》第11章关于布局和定位讲得非常细致，所以总结的文字也很抽象，需要看书配合图文才
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 8 天</title>
    <link href="http://archmee.github.io/201607/2016-07-13.html"/>
    <id>http://archmee.github.io/201607/2016-07-13.html</id>
    <published>2016-07-12T16:00:00.000Z</published>
    <updated>2016-07-13T18:17:55.245Z</updated>
    
    <content type="html">&lt;h2 id=&quot;10-div和span&quot;&gt;&lt;a href=&quot;#10-div和span&quot; class=&quot;headerlink&quot; title=&quot;10. div和span&quot;&gt;&lt;/a&gt;10. div和span&lt;/h2&gt;&lt;h3 id=&quot;div&quot;&gt;&lt;a href=&quot;#div&quot; class=&quot;headerlink&quot; title=&quot;div&quot;&gt;&lt;/a&gt;div&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;div是一个&lt;strong&gt;块元素&lt;/strong&gt;，可用于展现页面底层逻辑结构，也以便于为某个逻辑去应用样式&lt;/li&gt;
&lt;li&gt;在页面中使用div，但不要滥用。如果这样做有助于你将页面分解为逻辑区，从而&lt;strong&gt;保证结构清晰并便于指定样式&lt;/strong&gt;，那么可以增加更多的结构，如果只是为了在页面中创建大量结构而增加div，就只会让页面更复杂，而没有任何实际好处。&lt;/li&gt;
&lt;li&gt;width属性只是指定内容区的样式，不包括margin、border和padding，所以整个盒子的宽度是内容区、margin、border和padding的总和&lt;/li&gt;
&lt;li&gt;一个块元素的宽度默认是auto，auto允许内容填满除了内外边距和边框之外的可用空间&lt;/li&gt;
&lt;li&gt;text-align会对块元素中所有内联元素对齐（并非只有文字），而text-align属性只能在块元素上设置，如果直接在内联元素上使用，则不起作用。text-align属性可以被继承（这点很重要）&lt;/li&gt;
&lt;li&gt;line-height属性有一点特殊，如果直接使用一个数字作为它的值，而不是一个度量单位，则该元素会基于文本自己所在的行字体的大小的倍数作为行高。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;div允许你为&lt;em&gt;块级内容&lt;/em&gt;建立逻辑划分，span元素则采用类似方法建立&lt;em&gt;内联内容&lt;/em&gt;的逻辑分组。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果一个&lt;em&gt;内联元素&lt;/em&gt;四周都增加外边距，只能看到左边和右边增加了空间。你也可以对内联元素上边和下边增加内边距，不过这个内边距不会影响包围它的其他内联元素的间距，所以内边距会与其他内联元素重叠。&lt;br&gt;图像也是内联元素，但是它的宽度、内边距和外边距属性表现都更像是块元素。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;font&quot;&gt;&lt;a href=&quot;#font&quot; class=&quot;headerlink&quot; title=&quot;font&quot;&gt;&lt;/a&gt;font&lt;/h3&gt;&lt;p&gt;font属性的简写形式：&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;font: font-style font-variant font-weight font-size/line-height font-family;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt; 前3个属性是可选的，它们必须出现在font-size前面，font-size必须指定，line-height是可选的，多个字体要在font-family之间用逗号分隔。&lt;/p&gt;
&lt;h3 id=&quot;伪类&quot;&gt;&lt;a href=&quot;#伪类&quot; class=&quot;headerlink&quot; title=&quot;伪类&quot;&gt;&lt;/a&gt;伪类&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;它允许你根据浏览器的决定来指定这些元素的样式。&lt;/li&gt;
&lt;li&gt;它为你提供了有效的方法，可以根据访问者使用页面时发生的情况来对元素指定样式&lt;/li&gt;
&lt;li&gt;对于a元素的伪类，一般认为适当的顺序为：link、visited、hover、focus、active&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;层叠&quot;&gt;&lt;a href=&quot;#层叠&quot; class=&quot;headerlink&quot; title=&quot;层叠&quot;&gt;&lt;/a&gt;层叠&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定样式表中的一组样式，浏览器就是以层叠方式来确定具体使用哪一个样式。&lt;/li&gt;
&lt;li&gt;浏览器应用样式的优先级是网页开发者、网页访问者（基本不会有访问者建立自己的样式表）、浏览器。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;浏览器处理层叠的过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;收集所有样式表（来自网页开发者、网页访问者、浏览器）&lt;/li&gt;
&lt;li&gt;找到所有匹配的声明&lt;/li&gt;
&lt;li&gt;对所有匹配的规则排序&lt;/li&gt;
&lt;li&gt;按特定性对所有声明排序（按照网页开发者、网页访问者、浏览器分组，再在各自的组中分别计算特定性并排序）&lt;/li&gt;
&lt;li&gt;最后，对于冲突的规则，按照它们在各自样式表中出现的顺序进行排序，并选择后出现的顺序（就近原则）&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;如果css属性最后上加了&lt;code&gt;!important&lt;/code&gt;，则它的优先级最高，会覆盖其他样式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;关于特定性的计算，在我前面的博客中记录过一种方式，和这本书的方式稍有差别，我将其统一为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择器包含一个id+100&lt;/li&gt;
&lt;li&gt;选择器包含一个类或者伪类+10&lt;/li&gt;
&lt;li&gt;选择器包含一个元素+1&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;按上述方法累加的总和就是该选择器的特定性值，对于有相同特定性的元素，则根据样式表中的顺序再次排序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;疑问？&quot;&gt;&lt;a href=&quot;#疑问？&quot; class=&quot;headerlink&quot; title=&quot;疑问？&quot;&gt;&lt;/a&gt;疑问？&lt;/h3&gt;&lt;p&gt;如果经过所有步骤还是没有找到特定属性的属性值，就使用继承机制，如果该属性不能被继承，则使用浏览器的默认样式。&lt;br&gt;这段话是我对书上一段对话的概括，本来层叠这一点书上讲的就比较混乱，看了这段话更加疑惑了，一是不知道他所谓的所有步骤是针对某一层来说，还是针对上面讲的所有步骤，因为前面已经收集了所有来自几个层次的样式表，并且排了序，现在应该就排序过后的样式进行应用，怎么又扯到继承，又用到了浏览器默认样式？&lt;br&gt;我认为作者这段话是用在在计算网页开发者这一层样式的特定性的时候的结尾的。也有可能就是在网页开发者、网页访问者、浏览器这三个层面都没有找到特定属性，再利用继承和浏览器默认样式。&lt;br&gt;不知道这样理解对不对，希望以后回来解答。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;10-div和span&quot;&gt;&lt;a href=&quot;#10-div和span&quot; class=&quot;headerlink&quot; title=&quot;10. div和span&quot;&gt;&lt;/a&gt;10. div和span&lt;/h2&gt;&lt;h3 id=&quot;div&quot;&gt;&lt;a href=&quot;#div&quot; class=&quot;
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 7 天</title>
    <link href="http://archmee.github.io/201607/2016-07-12.html"/>
    <id>http://archmee.github.io/201607/2016-07-12.html</id>
    <published>2016-07-11T16:00:00.000Z</published>
    <updated>2016-07-12T19:19:52.560Z</updated>
    
    <content type="html">&lt;h2 id=&quot;9-盒模型&quot;&gt;&lt;a href=&quot;#9-盒模型&quot; class=&quot;headerlink&quot; title=&quot;9. 盒模型&quot;&gt;&lt;/a&gt;9. 盒模型&lt;/h2&gt;&lt;h3 id=&quot;padding、margin、border&quot;&gt;&lt;a href=&quot;#padding、margin、border&quot; class=&quot;headerlink&quot; title=&quot;padding、margin、border&quot;&gt;&lt;/a&gt;padding、margin、border&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;盒子由内容区、内边距、边框、外边距构成&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/01-16-43.jpg&quot; alt=&quot;box model from book&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内容区被可选的透明内边距包围，内边距会将内容和边框隔开&lt;/li&gt;
&lt;li&gt;内边距周围可能放着一个可选的边框&lt;/li&gt;
&lt;li&gt;有一个可选的透明外边距包围着边框，外边距用于在页面上的不同元素之间增加空间。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;内边距和外边距之间有一个区别：元素的背景颜色或背景图像会延伸到内边距下面，但不会延伸到外边距。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;css指定内边距用padding，边框用border，外边距用margin，每一个又可以单独指定上、右、下、左顺时针的四个方向的值，如&lt;code&gt;margin-right:100px&lt;/code&gt;，但border由于要指定多个值，所以使用方式更灵活&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;border 是简写，可以指定4个方向的border都使用相同值，border-width、border-color、border-style是全写形式。&lt;/li&gt;
&lt;li&gt;border-top可以指定上面的border样式，但这仍然是一种简写形式，可以采用全写border-top-width、border-top-color、border-top-style来分别指定，且4个方向都采用同样规则&lt;/li&gt;
&lt;li&gt;border-width可以使用像素，也可以使用关键字thin(细)、medium(中)和thick(粗)，但是关键字方式根据浏览器会有不同表现。&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;border-style（包括其他简写全写形式） 可用样式：solid(实线)、double(双线)、groov(槽线)、outset(外凸)、inset(内凹)、ridge(脊线)、dotted(虚线)、dashed(破折线)，&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;border-radius是css3用来指定边框圆角的属性，全写可以指定一个盒子四个角的圆角，一般使用像素值，要具体指定某一个角的值可以用全写，如&lt;code&gt;border-top-left-radius:3px;&lt;/code&gt;，另外几个角top-right、bottom-left、bottom-right使用相同的规则&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;background&quot;&gt;&lt;a href=&quot;#background&quot; class=&quot;headerlink&quot; title=&quot;background&quot;&gt;&lt;/a&gt;background&lt;/h3&gt;&lt;p&gt;background是插入背景图像的简写形式，也可以分别指定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;background-image 指定背景图像url&lt;/li&gt;
&lt;li&gt;background-position 指定背景图像的相对位置，可以使用像素和百分数，还可以使用关键字top、bottom、left、right和center&lt;/li&gt;
&lt;li&gt;background-repeat 指定图像是否重复，repeat表示重复，no-repeat表示不重复，repeat-x只在x方向重复，repeat-y只在y方向重复，inherit表示按照父元素的方式处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;关于使用background-image和用img插入图像可以这样考虑，img是用来插入照片或logo等图像，而background-image是用来增强页面表现样式用的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;id&quot;&gt;&lt;a href=&quot;#id&quot; class=&quot;headerlink&quot; title=&quot;id&quot;&gt;&lt;/a&gt;id&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;id只能指定页面中的一个元素&lt;/li&gt;
&lt;li&gt;class要以字母开头，而id可以以数字或字母开头&lt;/li&gt;
&lt;li&gt;id只是一个元素的唯一标识符，不过这并不妨碍这个元素属于一个或多个类，即指定了id的元素仍然可以指定class。&lt;/li&gt;
&lt;li&gt;如果想对多个元素使用某个样式，就要用class，但如果只想给一个特定的元素加入样式，或者页面上只有一个元素，就应该使用id。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;媒体查询&quot;&gt;&lt;a href=&quot;#媒体查询&quot; class=&quot;headerlink&quot; title=&quot;媒体查询&quot;&gt;&lt;/a&gt;媒体查询&lt;/h3&gt;&lt;p&gt;媒体查询可以针对将要显示页面的设备类型来调整页面的样式。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;用link标记指定相应设备的样式文件，这样可以给指定设备指定单独的css文件，比如&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;lounge.css&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;media&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;screen&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--针对屏幕设备--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;lounge-mobile.css&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;media&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;screen and (max-device-width: 480px)&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--针对屏幕宽度不超过480px的设备--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;也可以在css文件中针对相应设备使用媒体查询，但是这样会导致css文件变得庞大&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;at_rule&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;media&lt;/span&gt; screen and (max-device-width: &lt;span class=&quot;number&quot;&gt;480px&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*针对屏幕宽度不超过480px的设备指定css样式*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;at_rule&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;media&lt;/span&gt; print &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*针对打印机指定css样式*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*这里可以写所有设备通用的规则*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;查询中还有很多属性可以使用，如min-device-width以及设备的方向orientation&lt;/li&gt;
&lt;li&gt;max-device-width和min-device-width媒体属性依赖于设备的实际屏幕而不是你的浏览器窗口宽度，而max-width和min-width则表示浏览器窗口的最大和最小宽度而不是屏幕大小。&lt;/li&gt;
&lt;li&gt;可以在&lt;a href=&quot;http://www.w3.org/TR/css3-mediaqueries&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.w3.org/TR/css3-mediaqueries&lt;/a&gt; 网站了解css3媒体查询规范细节&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;IE8以及以前版本浏览器不支持媒体查询&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;其他&quot;&gt;&lt;a href=&quot;#其他&quot; class=&quot;headerlink&quot; title=&quot;其他&quot;&gt;&lt;/a&gt;其他&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;line-height用于指定行间距&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;感悟&quot;&gt;&lt;a href=&quot;#感悟&quot; class=&quot;headerlink&quot; title=&quot;感悟&quot;&gt;&lt;/a&gt;感悟&lt;/h2&gt;&lt;p&gt;感觉每天写博客总结都要浪费好多时间……&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;9-盒模型&quot;&gt;&lt;a href=&quot;#9-盒模型&quot; class=&quot;headerlink&quot; title=&quot;9. 盒模型&quot;&gt;&lt;/a&gt;9. 盒模型&lt;/h2&gt;&lt;h3 id=&quot;padding、margin、border&quot;&gt;&lt;a href=&quot;#padding、margin、bor
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
</feed>
