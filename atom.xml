<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Archmee</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://archmee.github.io/"/>
  <updated>2016-07-18T11:45:28.567Z</updated>
  <id>http://archmee.github.io/</id>
  
  <author>
    <name>archmee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端之旅第 12 天</title>
    <link href="http://archmee.github.io/201607/2016-07-17.html"/>
    <id>http://archmee.github.io/201607/2016-07-17.html</id>
    <published>2016-07-16T16:00:00.000Z</published>
    <updated>2016-07-18T11:45:28.567Z</updated>
    
    <content type="html">&lt;p&gt;6月14、15、16、17这几天断片了(懒癌发作)，学习也变得闲散起来，这里总结这几天总共学习的内容，《Head First HTML &amp;amp; CSS》第11章关于布局和定位讲得非常细致，所以总结的文字也很抽象，需要看书配合图文才能更好理解。&lt;/p&gt;
&lt;h2 id=&quot;第11章-布局和定位&quot;&gt;&lt;a href=&quot;#第11章-布局和定位&quot; class=&quot;headerlink&quot; title=&quot;第11章. 布局和定位&quot;&gt;&lt;/a&gt;第11章. 布局和定位&lt;/h2&gt;&lt;h3 id=&quot;布局&quot;&gt;&lt;a href=&quot;#布局&quot; class=&quot;headerlink&quot; title=&quot;布局&quot;&gt;&lt;/a&gt;布局&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;流让CSS有了强大威力，流实际上就是浏览器在页面中摆放HTML元素所用的方法。浏览器从HTML文件最上面开始，从上到下沿着元素流逐个显示所遇到的各个元素&lt;/li&gt;
&lt;li&gt;块元素从上向下流，各元素之间有一个换行。而内联元素在水平方向会相互挨着，总体上会从左到右、从上往下流（左上方到右下方）。&lt;/li&gt;
&lt;li&gt;盒子模型的外边距：如果浏览器并排放置内联元素，内联元素水平方上的外边距会正常显示。而浏览器上下放置块元素时，块元素在垂直方向上的外边距会折叠为最大的那个外边距高度（嵌套的话会根据外面的元素的边框，如果有边框就不会折叠，否则嵌套也会折叠）&lt;/li&gt;
&lt;li&gt;对于所有浮动元素，都必须指定一个宽度，当然图像除外，因为图像有自己的默认宽度&lt;/li&gt;
&lt;li&gt;浮动元素不再是正常流的一部分&lt;/li&gt;
&lt;li&gt;float属性首先尽可能的根据float值浮动一个元素，然后它下面的块元素会忽略它的存在，而内联元素都会绕流这个元素。&lt;/li&gt;
&lt;li&gt;css &lt;code&gt;clear&lt;/code&gt;属性要求：当元素流入页面时，这个元素的左边、右边或两边（取决于clear的值）不能有浮动元素，所以被指定了clear属性的元素流入页面时，会根据左右是否有浮动元素来下移直到左右都没有浮动元素为止。&lt;/li&gt;
&lt;li&gt;浮动元素的外边距并不会碰到正常流中元素的外边距，所以他们不会折叠&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可以浮动内联元素，比如图像，但是其他内联元素不常见&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当用户调整屏幕大小时，你的设计仍能保持原样，这称为&lt;strong&gt;冻结布局&lt;/strong&gt;。冻结布局会通过指定宽度锁定元素，让他们冻结在页面上，这样这些元素根本不能移动，就能避免由于窗口扩展带来的问题。自然流入页面或使用浮动的是&lt;strong&gt;流体布局&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;流体和冻结之间的状态就是&lt;strong&gt;凝胶布局&lt;/strong&gt;：通过设置&lt;code&gt;margin: 0 auto;&lt;/code&gt;来实现，凝胶布局将冻结布局的元素在浏览器中居中显示。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;定位&quot;&gt;&lt;a href=&quot;#定位&quot; class=&quot;headerlink&quot; title=&quot;定位&quot;&gt;&lt;/a&gt;定位&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;浏览器会将绝对定位元素从流中完全删除，然后将这个元素放在指定位置上。位置可以通过&lt;code&gt;top&lt;/code&gt;、&lt;code&gt;bottom&lt;/code&gt;、&lt;code&gt;left&lt;/code&gt;、&lt;code&gt;right&lt;/code&gt;这几个属性来指定相对于最近已定位的祖宗元素的偏移。&lt;/li&gt;
&lt;li&gt;流中的块元素和内联元素会忽略绝对定位元素正常流入页面，和float有区别&lt;/li&gt;
&lt;li&gt;绝对定位不用指定宽度。&lt;/li&gt;
&lt;li&gt;每个定位元素（绝对、相对和固定定位）都有一个&lt;code&gt;z-index&lt;/code&gt;属性，这会指定它在一个虚拟的z轴上的位置，&lt;code&gt;z-index&lt;/code&gt;值越大，元素越出现在屏幕的上层，&lt;code&gt;z-index&lt;/code&gt;可以为负值&lt;/li&gt;
&lt;li&gt;&lt;p&gt;position属性值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;static：静态定位（默认值），元素会放在正常的文档流中，由浏览器决定决定这些静态定位元素的位置而不是你&lt;/li&gt;
&lt;li&gt;absolute：绝对定位，浏览器将其从文档流中删除，并相对于最近已定位的祖宗元素来定位&lt;/li&gt;
&lt;li&gt;fixed：固定定位，浏览器将元素放在相对于浏览器窗口的一个位置上（而不是页面），所以固定元素永远不会移动&lt;/li&gt;
&lt;li&gt;relative：相对定位，会让元素正常流入页面，而定位也是相对于该元素在流中的原有位置进行偏移&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;指定位置时可以使用像素，也可以使用百分比&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;css表格显示&lt;/strong&gt;工作方式与正常表格一样，都有行和列的定义：首先在html中定义表格的行列结构，然后将表结构相应的&lt;em&gt;块元素&lt;/em&gt;的display属性设置为table、table-row、table-cell，就指定了相应元素显示方式为表格、行、列。可以用指定&lt;code&gt;border-spacing&lt;/code&gt;为表格指定外边距，并且不会和紧邻的垂直外边距折叠&lt;/li&gt;
&lt;li&gt;vertical-align用来设置垂直对齐方式，有属性值：top顶部对齐、middle居中对齐、和bottom底部对齐&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;6月14、15、16、17这几天断片了(懒癌发作)，学习也变得闲散起来，这里总结这几天总共学习的内容，《Head First HTML &amp;amp; CSS》第11章关于布局和定位讲得非常细致，所以总结的文字也很抽象，需要看书配合图文才能更好理解。&lt;/p&gt;
&lt;h2 id=&quot;第
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 8 天</title>
    <link href="http://archmee.github.io/201607/2016-07-13.html"/>
    <id>http://archmee.github.io/201607/2016-07-13.html</id>
    <published>2016-07-12T16:00:00.000Z</published>
    <updated>2016-07-13T18:17:55.245Z</updated>
    
    <content type="html">&lt;h2 id=&quot;10-div和span&quot;&gt;&lt;a href=&quot;#10-div和span&quot; class=&quot;headerlink&quot; title=&quot;10. div和span&quot;&gt;&lt;/a&gt;10. div和span&lt;/h2&gt;&lt;h3 id=&quot;div&quot;&gt;&lt;a href=&quot;#div&quot; class=&quot;headerlink&quot; title=&quot;div&quot;&gt;&lt;/a&gt;div&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;div是一个&lt;strong&gt;块元素&lt;/strong&gt;，可用于展现页面底层逻辑结构，也以便于为某个逻辑去应用样式&lt;/li&gt;
&lt;li&gt;在页面中使用div，但不要滥用。如果这样做有助于你将页面分解为逻辑区，从而&lt;strong&gt;保证结构清晰并便于指定样式&lt;/strong&gt;，那么可以增加更多的结构，如果只是为了在页面中创建大量结构而增加div，就只会让页面更复杂，而没有任何实际好处。&lt;/li&gt;
&lt;li&gt;width属性只是指定内容区的样式，不包括margin、border和padding，所以整个盒子的宽度是内容区、margin、border和padding的总和&lt;/li&gt;
&lt;li&gt;一个块元素的宽度默认是auto，auto允许内容填满除了内外边距和边框之外的可用空间&lt;/li&gt;
&lt;li&gt;text-align会对块元素中所有内联元素对齐（并非只有文字），而text-align属性只能在块元素上设置，如果直接在内联元素上使用，则不起作用。text-align属性可以被继承（这点很重要）&lt;/li&gt;
&lt;li&gt;line-height属性有一点特殊，如果直接使用一个数字作为它的值，而不是一个度量单位，则该元素会基于文本自己所在的行字体的大小的倍数作为行高。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;div允许你为&lt;em&gt;块级内容&lt;/em&gt;建立逻辑划分，span元素则采用类似方法建立&lt;em&gt;内联内容&lt;/em&gt;的逻辑分组。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果一个&lt;em&gt;内联元素&lt;/em&gt;四周都增加外边距，只能看到左边和右边增加了空间。你也可以对内联元素上边和下边增加内边距，不过这个内边距不会影响包围它的其他内联元素的间距，所以内边距会与其他内联元素重叠。&lt;br&gt;图像也是内联元素，但是它的宽度、内边距和外边距属性表现都更像是块元素。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;font&quot;&gt;&lt;a href=&quot;#font&quot; class=&quot;headerlink&quot; title=&quot;font&quot;&gt;&lt;/a&gt;font&lt;/h3&gt;&lt;p&gt;font属性的简写形式：&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;font: font-style font-variant font-weight font-size/line-height font-family;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt; 前3个属性是可选的，它们必须出现在font-size前面，font-size必须指定，line-height是可选的，多个字体要在font-family之间用逗号分隔。&lt;/p&gt;
&lt;h3 id=&quot;伪类&quot;&gt;&lt;a href=&quot;#伪类&quot; class=&quot;headerlink&quot; title=&quot;伪类&quot;&gt;&lt;/a&gt;伪类&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;它允许你根据浏览器的决定来指定这些元素的样式。&lt;/li&gt;
&lt;li&gt;它为你提供了有效的方法，可以根据访问者使用页面时发生的情况来对元素指定样式&lt;/li&gt;
&lt;li&gt;对于a元素的伪类，一般认为适当的顺序为：link、visited、hover、focus、active&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;层叠&quot;&gt;&lt;a href=&quot;#层叠&quot; class=&quot;headerlink&quot; title=&quot;层叠&quot;&gt;&lt;/a&gt;层叠&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定样式表中的一组样式，浏览器就是以层叠方式来确定具体使用哪一个样式。&lt;/li&gt;
&lt;li&gt;浏览器应用样式的优先级是网页开发者、网页访问者（基本不会有访问者建立自己的样式表）、浏览器。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;浏览器处理层叠的过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;收集所有样式表（来自网页开发者、网页访问者、浏览器）&lt;/li&gt;
&lt;li&gt;找到所有匹配的声明&lt;/li&gt;
&lt;li&gt;对所有匹配的规则排序&lt;/li&gt;
&lt;li&gt;按特定性对所有声明排序（按照网页开发者、网页访问者、浏览器分组，再在各自的组中分别计算特定性并排序）&lt;/li&gt;
&lt;li&gt;最后，对于冲突的规则，按照它们在各自样式表中出现的顺序进行排序，并选择后出现的顺序（就近原则）&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;如果css属性最后上加了&lt;code&gt;!important&lt;/code&gt;，则它的优先级最高，会覆盖其他样式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;关于特定性的计算，在我前面的博客中记录过一种方式，和这本书的方式稍有差别，我将其统一为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择器包含一个id+100&lt;/li&gt;
&lt;li&gt;选择器包含一个类或者伪类+10&lt;/li&gt;
&lt;li&gt;选择器包含一个元素+1&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;按上述方法累加的总和就是该选择器的特定性值，对于有相同特定性的元素，则根据样式表中的顺序再次排序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;疑问？&quot;&gt;&lt;a href=&quot;#疑问？&quot; class=&quot;headerlink&quot; title=&quot;疑问？&quot;&gt;&lt;/a&gt;疑问？&lt;/h3&gt;&lt;p&gt;如果经过所有步骤还是没有找到特定属性的属性值，就使用继承机制，如果该属性不能被继承，则使用浏览器的默认样式。&lt;br&gt;这段话是我对书上一段对话的概括，本来层叠这一点书上讲的就比较混乱，看了这段话更加疑惑了，一是不知道他所谓的所有步骤是针对某一层来说，还是针对上面讲的所有步骤，因为前面已经收集了所有来自几个层次的样式表，并且排了序，现在应该就排序过后的样式进行应用，怎么又扯到继承，又用到了浏览器默认样式？&lt;br&gt;我认为作者这段话是用在在计算网页开发者这一层样式的特定性的时候的结尾的。也有可能就是在网页开发者、网页访问者、浏览器这三个层面都没有找到特定属性，再利用继承和浏览器默认样式。&lt;br&gt;不知道这样理解对不对，希望以后回来解答。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;10-div和span&quot;&gt;&lt;a href=&quot;#10-div和span&quot; class=&quot;headerlink&quot; title=&quot;10. div和span&quot;&gt;&lt;/a&gt;10. div和span&lt;/h2&gt;&lt;h3 id=&quot;div&quot;&gt;&lt;a href=&quot;#div&quot; class=&quot;
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 7 天</title>
    <link href="http://archmee.github.io/201607/2016-07-12.html"/>
    <id>http://archmee.github.io/201607/2016-07-12.html</id>
    <published>2016-07-11T16:00:00.000Z</published>
    <updated>2016-07-12T19:19:52.560Z</updated>
    
    <content type="html">&lt;h2 id=&quot;9-盒模型&quot;&gt;&lt;a href=&quot;#9-盒模型&quot; class=&quot;headerlink&quot; title=&quot;9. 盒模型&quot;&gt;&lt;/a&gt;9. 盒模型&lt;/h2&gt;&lt;h3 id=&quot;padding、margin、border&quot;&gt;&lt;a href=&quot;#padding、margin、border&quot; class=&quot;headerlink&quot; title=&quot;padding、margin、border&quot;&gt;&lt;/a&gt;padding、margin、border&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;盒子由内容区、内边距、边框、外边距构成&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/01-16-43.jpg&quot; alt=&quot;box model from book&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内容区被可选的透明内边距包围，内边距会将内容和边框隔开&lt;/li&gt;
&lt;li&gt;内边距周围可能放着一个可选的边框&lt;/li&gt;
&lt;li&gt;有一个可选的透明外边距包围着边框，外边距用于在页面上的不同元素之间增加空间。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;内边距和外边距之间有一个区别：元素的背景颜色或背景图像会延伸到内边距下面，但不会延伸到外边距。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;css指定内边距用padding，边框用border，外边距用margin，每一个又可以单独指定上、右、下、左顺时针的四个方向的值，如&lt;code&gt;margin-right:100px&lt;/code&gt;，但border由于要指定多个值，所以使用方式更灵活&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;border 是简写，可以指定4个方向的border都使用相同值，border-width、border-color、border-style是全写形式。&lt;/li&gt;
&lt;li&gt;border-top可以指定上面的border样式，但这仍然是一种简写形式，可以采用全写border-top-width、border-top-color、border-top-style来分别指定，且4个方向都采用同样规则&lt;/li&gt;
&lt;li&gt;border-width可以使用像素，也可以使用关键字thin(细)、medium(中)和thick(粗)，但是关键字方式根据浏览器会有不同表现。&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;border-style（包括其他简写全写形式） 可用样式：solid(实线)、double(双线)、groov(槽线)、outset(外凸)、inset(内凹)、ridge(脊线)、dotted(虚线)、dashed(破折线)，&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;border-radius是css3用来指定边框圆角的属性，全写可以指定一个盒子四个角的圆角，一般使用像素值，要具体指定某一个角的值可以用全写，如&lt;code&gt;border-top-left-radius:3px;&lt;/code&gt;，另外几个角top-right、bottom-left、bottom-right使用相同的规则&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;background&quot;&gt;&lt;a href=&quot;#background&quot; class=&quot;headerlink&quot; title=&quot;background&quot;&gt;&lt;/a&gt;background&lt;/h3&gt;&lt;p&gt;background是插入背景图像的简写形式，也可以分别指定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;background-image 指定背景图像url&lt;/li&gt;
&lt;li&gt;background-position 指定背景图像的相对位置，可以使用像素和百分数，还可以使用关键字top、bottom、left、right和center&lt;/li&gt;
&lt;li&gt;background-repeat 指定图像是否重复，repeat表示重复，no-repeat表示不重复，repeat-x只在x方向重复，repeat-y只在y方向重复，inherit表示按照父元素的方式处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;关于使用background-image和用img插入图像可以这样考虑，img是用来插入照片或logo等图像，而background-image是用来增强页面表现样式用的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;id&quot;&gt;&lt;a href=&quot;#id&quot; class=&quot;headerlink&quot; title=&quot;id&quot;&gt;&lt;/a&gt;id&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;id只能指定页面中的一个元素&lt;/li&gt;
&lt;li&gt;class要以字母开头，而id可以以数字或字母开头&lt;/li&gt;
&lt;li&gt;id只是一个元素的唯一标识符，不过这并不妨碍这个元素属于一个或多个类，即指定了id的元素仍然可以指定class。&lt;/li&gt;
&lt;li&gt;如果想对多个元素使用某个样式，就要用class，但如果只想给一个特定的元素加入样式，或者页面上只有一个元素，就应该使用id。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;媒体查询&quot;&gt;&lt;a href=&quot;#媒体查询&quot; class=&quot;headerlink&quot; title=&quot;媒体查询&quot;&gt;&lt;/a&gt;媒体查询&lt;/h3&gt;&lt;p&gt;媒体查询可以针对将要显示页面的设备类型来调整页面的样式。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;用link标记指定相应设备的样式文件，这样可以给指定设备指定单独的css文件，比如&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;lounge.css&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;media&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;screen&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--针对屏幕设备--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;lounge-mobile.css&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;media&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;screen and (max-device-width: 480px)&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--针对屏幕宽度不超过480px的设备--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;也可以在css文件中针对相应设备使用媒体查询，但是这样会导致css文件变得庞大&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;at_rule&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;media&lt;/span&gt; screen and (max-device-width: &lt;span class=&quot;number&quot;&gt;480px&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*针对屏幕宽度不超过480px的设备指定css样式*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;at_rule&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;media&lt;/span&gt; print &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*针对打印机指定css样式*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*这里可以写所有设备通用的规则*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;查询中还有很多属性可以使用，如min-device-width以及设备的方向orientation&lt;/li&gt;
&lt;li&gt;max-device-width和min-device-width媒体属性依赖于设备的实际屏幕而不是你的浏览器窗口宽度，而max-width和min-width则表示浏览器窗口的最大和最小宽度而不是屏幕大小。&lt;/li&gt;
&lt;li&gt;可以在&lt;a href=&quot;http://www.w3.org/TR/css3-mediaqueries&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.w3.org/TR/css3-mediaqueries&lt;/a&gt; 网站了解css3媒体查询规范细节&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;IE8以及以前版本浏览器不支持媒体查询&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;其他&quot;&gt;&lt;a href=&quot;#其他&quot; class=&quot;headerlink&quot; title=&quot;其他&quot;&gt;&lt;/a&gt;其他&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;line-height用于指定行间距&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;感悟&quot;&gt;&lt;a href=&quot;#感悟&quot; class=&quot;headerlink&quot; title=&quot;感悟&quot;&gt;&lt;/a&gt;感悟&lt;/h2&gt;&lt;p&gt;感觉每天写博客总结都要浪费好多时间……&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;9-盒模型&quot;&gt;&lt;a href=&quot;#9-盒模型&quot; class=&quot;headerlink&quot; title=&quot;9. 盒模型&quot;&gt;&lt;/a&gt;9. 盒模型&lt;/h2&gt;&lt;h3 id=&quot;padding、margin、border&quot;&gt;&lt;a href=&quot;#padding、margin、bor
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 6 天</title>
    <link href="http://archmee.github.io/201607/2016-07-11.html"/>
    <id>http://archmee.github.io/201607/2016-07-11.html</id>
    <published>2016-07-11T14:56:00.000Z</published>
    <updated>2016-07-11T20:06:23.319Z</updated>
    
    <content type="html">&lt;p&gt;下面是今天学习《Head First HTML &amp;amp; CSS》第7、8章的学习笔记&lt;/p&gt;
&lt;h2 id=&quot;第7章-CSS入门&quot;&gt;&lt;a href=&quot;#第7章-CSS入门&quot; class=&quot;headerlink&quot; title=&quot;第7章. CSS入门&quot;&gt;&lt;/a&gt;第7章. CSS入门&lt;/h2&gt;&lt;h3 id=&quot;添加CSS的3种方法&quot;&gt;&lt;a href=&quot;#添加CSS的3种方法&quot; class=&quot;headerlink&quot; title=&quot;添加CSS的3种方法&quot;&gt;&lt;/a&gt;添加CSS的3种方法&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;内嵌样式：可以直接在标签里面写样式 &lt;code&gt;&amp;lt;p style=&amp;quot;color:red;...&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;内联样式：在head标签里 &lt;code&gt;&amp;lt;style&amp;gt; css样式 &amp;lt;/style&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;外部样式：在head标签里以文件方式包含进来 &lt;code&gt;&amp;lt;link type=&amp;quot;text/css&amp;quot; rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;css样式文件&amp;quot;&amp;gt;&lt;/code&gt;，在html5中已经不需要type属性，因为样式表目前只有css&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;以上3种方法优先级依次从高到低，但是推荐顺序从低到高&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;继承和覆盖继承&quot;&gt;&lt;a href=&quot;#继承和覆盖继承&quot; class=&quot;headerlink&quot; title=&quot;继承和覆盖继承&quot;&gt;&lt;/a&gt;继承和覆盖继承&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;继承是指从父元素那里继承样式，不是所有样式都能继承，一部分如&lt;code&gt;font-family&lt;/code&gt;等可以继承，而&lt;code&gt;border&lt;/code&gt;就不可继承。一般来说会影响文本外观的样式都能继承。&lt;/li&gt;
&lt;li&gt;覆盖继承是指在子元素中使用了和父元素重复的样式规则，那么子元素的样式就会覆盖父元素的样式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;其他知识点&quot;&gt;&lt;a href=&quot;#其他知识点&quot; class=&quot;headerlink&quot; title=&quot;其他知识点&quot;&gt;&lt;/a&gt;其他知识点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;CSS使用&lt;code&gt;/*这是注释*/&lt;/code&gt;这样的格式来注释&lt;/li&gt;
&lt;li&gt;多个选择器应用同样的样式用&lt;code&gt;,&lt;/code&gt;号隔开&lt;/li&gt;
&lt;li&gt;一个元素可以加入多个类(class)，只需要把各个类名放在class属性中，并且用空格隔开即可，而且顺序并不重要，因为就算规则冲突，也是根据css文件中出现的顺序而不是这个顺序。如果你希望一个元素拥有不同类中定义的不同样式，那么就要使用多个类。&lt;/li&gt;
&lt;li&gt;如果多个选择器选择一个元素，就会发生冲突，如果一个规则比其他规则更“特定”，就胜出。&lt;/li&gt;
&lt;li&gt;如果由于两个选择器有相同的特定性而无法解决冲突，就要利用CSS文件中规则的先后顺序(就近原则)来解决问题，往往是越靠后越优胜。&lt;/li&gt;
&lt;li&gt;W3C CSS验证工具：&lt;a href=&quot;http://jigsaw.w3.org/css-validator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://jigsaw.w3.org/css-validator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;第8章-增加字体和颜色样式&quot;&gt;&lt;a href=&quot;#第8章-增加字体和颜色样式&quot; class=&quot;headerlink&quot; title=&quot;第8章. 增加字体和颜色样式&quot;&gt;&lt;/a&gt;第8章. 增加字体和颜色样式&lt;/h2&gt;&lt;h3 id=&quot;字体样式&quot;&gt;&lt;a href=&quot;#字体样式&quot; class=&quot;headerlink&quot; title=&quot;字体样式&quot;&gt;&lt;/a&gt;字体样式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;font-family 指定页面中使用的字体，可以指定特定的字体，也可以指定某一字体系列。font-family字体系列有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Sans-serif&lt;/strong&gt; 无衬线字体系列，计算机屏幕上更易读&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Serif&lt;/strong&gt; 衬线字体系列，适用于印刷品&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Monospace&lt;/strong&gt;字体系列，每个字符等宽，主要用于显示软件代码&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cursive&lt;/strong&gt;字体系列，类似手写体&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Fantasy&lt;/strong&gt;字体系列包含有某种风格的装饰性字体&lt;/p&gt;
&lt;p&gt;作者推荐方法：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/*字体生效的顺序是从前往后*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/*推荐使用sans-serif系列字体的方法，先提供候选字体，最后提供字体系列，浏览器会选择该系列的默认字体来显示*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-family&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; Verdana, Geneva, Arail, sans-serif&lt;/span&gt;&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;如果字体名中间包含空格，则需要用双引号&lt;code&gt;&amp;quot;&lt;/code&gt;将其包围起来，如&lt;code&gt;&amp;quot;Microsoft Yahei&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;font-size 控制字体大小，可以使用的方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;px：实际上是指字体高度（字体最高部分和最低部分之间的距离）&lt;/li&gt;
&lt;li&gt;%：相对于父元素的字体的百分比&lt;/li&gt;
&lt;li&gt;em：和%一样，只是用倍数表示，如1.2em=120%&lt;/li&gt;
&lt;li&gt;关键字：xx-small、x-small、small、medium、large、x-large、xx-large，他们之间是20%的关系，但是具体值基于浏览器默认值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作者推荐指定字体方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;选择一个关键字，指定它作为body规则的字体大小，这相当于页面默认字体大小（如果使用像素，老版本的IE不支持）&lt;/li&gt;
&lt;li&gt;使用em或%，相对于body字体大小指定其他元素的字体大小&lt;br&gt;作者认为这样做的好处是，所有字体都会基于浏览器字体大小进行相对调整。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;color 设置字体颜色，实际上它控制着一个元素的前景色，包括边框等…&lt;/li&gt;
&lt;li&gt;font-style 指定字体倾斜，none、italic和oblique，italic和oblique在不同浏览器可能会有不同表现&lt;/li&gt;
&lt;li&gt;font-weight 影响字体粗细，lighter、normal、bold、bolder、100~900之间100的倍数数值（未广泛支持）&lt;/li&gt;
&lt;li&gt;text-decoration 增加更多文本风格，none、underline、overline、line-through。除了第一个外的在同一条规则中可以叠加使用，如&lt;code&gt;text-decoration: underline overline;&lt;/code&gt;，如果写在多个样式中，则会覆盖显示&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Web字体&quot;&gt;&lt;a href=&quot;#Web字体&quot; class=&quot;headerlink&quot; title=&quot;Web字体&quot;&gt;&lt;/a&gt;Web字体&lt;/h3&gt;&lt;p&gt;由于不确定用户是否安装了指定字体，所以如果希望用户使用统一字体，则可以采用Web字体。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Web开放字体格式：简称woff（Web Open Font Format），文件后缀&lt;code&gt;.woff&lt;/code&gt;，woff是作为Web字体的标准字体格式出现的。&lt;/li&gt;
&lt;li&gt;常用web字体：&lt;ul&gt;
&lt;li&gt;TureType字体: .ttf&lt;/li&gt;
&lt;li&gt;OpenType字体: .otf(建立在TureType基础之上)&lt;/li&gt;
&lt;li&gt;Embedded OpenType字体: .eot(OpenType的一种压缩形式，仅IE支持)&lt;/li&gt;
&lt;li&gt;SVG字体: .svg(通用图像格式)&lt;/li&gt;
&lt;li&gt;Web开放字体: .woff(建立在TureType基础之上，已经发展为标准)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为页面添加web字体：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在服务器上保存你想使用的字体(或用托管服务)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在css文件中添加@font-face规则，这是css一个比较新的特性。@font-face是一个内置的css规则，而不是一个选择器规则。&lt;/p&gt;
 &lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;at_rule&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;font-face&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-family&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;string&quot;&gt;&quot;指定字体名&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;function&quot;&gt;url&lt;/span&gt;(http://x.svg),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;function&quot;&gt;url&lt;/span&gt;(http://x.woff)&lt;/span&gt;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;/*src可以指定多个字体位置的url，用逗号分隔*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在你想使用该字体的地方用font-family规则指定 &lt;code&gt;{ font-family: &amp;quot;你指定的字体名&amp;quot;; }&lt;/code&gt;，这个名字是你在font-face规则中定义的字体名。&lt;/p&gt;
&lt;p&gt;如果要使用多个字体，则要创建多个@font-face，而且要分别指定唯一的名字。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：移动设备和小型设备并不支持web字体&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@font-face是一个内置规则，@import和@media也是内置的规则，@import允许导入其他CSS文件，@media允许创建特定于某些“媒体”类型的CSS规则&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Web颜色&quot;&gt;&lt;a href=&quot;#Web颜色&quot; class=&quot;headerlink&quot; title=&quot;Web颜色&quot;&gt;&lt;/a&gt;Web颜色&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;rgb（red green blue）是3基色，可以按不同比例混合出任何一种其他颜色&lt;/li&gt;
&lt;li&gt;有4种方法给css规则指定颜色&lt;ol&gt;
&lt;li&gt;颜色名：&lt;code&gt;color: orange;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;3基色百分比：&lt;code&gt;color: rgb(80%, 40%, 0%);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;3基色数值（0-255之间）：&lt;code&gt;color: rgb(204, 102, 12);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;十六进制码：&lt;code&gt;color: #cc6600;&lt;/code&gt;（每2位代表rgb的0-255的数值的十六进制，从左至右依次是&lt;strong&gt;红、绿、蓝&lt;/strong&gt;，如果每组分量中两位数字都相同，则可以简写，#cc6600可以简写#c60，而#cc6610就不可以）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;其他知识点-1&quot;&gt;&lt;a href=&quot;#其他知识点-1&quot; class=&quot;headerlink&quot; title=&quot;其他知识点&quot;&gt;&lt;/a&gt;其他知识点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt;用来强调，&lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;用来特别强调&lt;/li&gt;
&lt;li&gt;一般来说，h1是默认字体大小的200%，h2是150%，h3是120%，h4是100%，h5是90%，h6是60%。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;下面是今天学习《Head First HTML &amp;amp; CSS》第7、8章的学习笔记&lt;/p&gt;
&lt;h2 id=&quot;第7章-CSS入门&quot;&gt;&lt;a href=&quot;#第7章-CSS入门&quot; class=&quot;headerlink&quot; title=&quot;第7章. CSS入门&quot;&gt;&lt;/a&gt;第7章. C
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 5 天</title>
    <link href="http://archmee.github.io/201607/2016-07-10.html"/>
    <id>http://archmee.github.io/201607/2016-07-10.html</id>
    <published>2016-07-09T16:00:00.000Z</published>
    <updated>2016-07-10T18:08:13.145Z</updated>
    
    <content type="html">&lt;p&gt;其实回头看前几天的学习内容比较杂乱，导致耗费了一些不必要的精力，其实现在最应该做的是先系统的看点书，但由于我还有点前端基础，而且早上不想看书的特点，估计后面还是会学习网上的课程，下午和晚上的时间用于看书和写博客。&lt;br&gt;下面只有今天学习 《Head First HTML &amp;amp; CSS》第5、6章的笔记&lt;/p&gt;
&lt;h2 id=&quot;第5章-为你的页面增加图像&quot;&gt;&lt;a href=&quot;#第5章-为你的页面增加图像&quot; class=&quot;headerlink&quot; title=&quot;第5章. 为你的页面增加图像&quot;&gt;&lt;/a&gt;第5章. 为你的页面增加图像&lt;/h2&gt;&lt;h3 id=&quot;JPEG、PNG和GIF的对比&quot;&gt;&lt;a href=&quot;#JPEG、PNG和GIF的对比&quot; class=&quot;headerlink&quot; title=&quot;JPEG、PNG和GIF的对比&quot;&gt;&lt;/a&gt;JPEG、PNG和GIF的对比&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;JPEG&lt;/th&gt;
&lt;th&gt;PNG&lt;/th&gt;
&lt;th&gt;GIF&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;适合连续色调图像，如照片&lt;/td&gt;
&lt;td&gt;适合单色图像和线条构成的图像&lt;/td&gt;
&lt;td&gt;和PNG类似，适合于单色图像和线条构成的图像&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可以表示包含多达千万种不同颜色的图像&lt;/td&gt;
&lt;td&gt;可以表示包含上百万种不同颜色的图像，PNG有3种：PNG-8、PNG-24、PNG-32&lt;/td&gt;
&lt;td&gt;GIF可以表示最多256种不同颜色的图像&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;“有损”压缩&lt;/td&gt;
&lt;td&gt;“无损”压缩&lt;/td&gt;
&lt;td&gt;也是一种“无损”压缩格式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;不支持透明度&lt;/td&gt;
&lt;td&gt;支持透明度&lt;/td&gt;
&lt;td&gt;支持透明度，不过只允许一种颜色设置为透明&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;文件比较小，以便Web页面更高效的显示&lt;/td&gt;
&lt;td&gt;与相应JPEG相比，PNG文件更大一些，和GIF相比则取决于使用的颜色数&lt;/td&gt;
&lt;td&gt;GIF通常比相应JPEG文件大&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;不支持动画&lt;/td&gt;
&lt;td&gt;支持动画(只有firefox)&lt;/td&gt;
&lt;td&gt;支持动画&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;lt-img-gt-的其他知识点&quot;&gt;&lt;a href=&quot;#lt-img-gt-的其他知识点&quot; class=&quot;headerlink&quot; title=&quot;&amp;lt;img&amp;gt; 的其他知识点&quot;&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; 的其他知识点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;浏览器通常会同时获取多个图像&lt;/li&gt;
&lt;li&gt;如果在&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;中提供了width和height，浏览器在显示图像之前就开始建立页面布局，否则浏览器在布局后才知道图像大小，则会重新调整页面布局。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;提供的width和height并不影响下载图像的大小，图像仍然按照原始尺寸大小下载下来，并通过width和height在页面上缩放，并不是会下载更小尺寸的图片。&lt;/li&gt;
&lt;li&gt;浏览器是在下载了html文件并开始显示页面后才下载图像，所以事先它并不知道图像大小。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;是内联元素。&lt;/li&gt;
&lt;li&gt;蒙版是图形编辑工具用颜色来&lt;strong&gt;柔化&lt;/strong&gt;文本边缘的功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;第6章-标准及其他&quot;&gt;&lt;a href=&quot;#第6章-标准及其他&quot; class=&quot;headerlink&quot; title=&quot;第6章. 标准及其他&quot;&gt;&lt;/a&gt;第6章. 标准及其他&lt;/h2&gt;&lt;h3 id=&quot;DOCTYPE-类型&quot;&gt;&lt;a href=&quot;#DOCTYPE-类型&quot; class=&quot;headerlink&quot; title=&quot;DOCTYPE 类型&quot;&gt;&lt;/a&gt;DOCTYPE 类型&lt;/h3&gt;&lt;p&gt;文档类型定义（doctype）用来告诉浏览器使用的HTML版本&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;html4.01 doctype:&lt;/p&gt;
 &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;doctype&quot;&gt;&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org//TR/html4/strict.dtd&quot;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;xhtml doctype:&lt;/p&gt;
 &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;doctype&quot;&gt;&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.1//EN&quot; &quot;http://www.w3.org//TR/xhtml11/DTD/xhtml11.dtd&quot;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;html5 doctype&lt;/p&gt;
 &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;doctype&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 当浏览器看到这个doctype时，它就认为你在使用标准的HTML，不再考虑版本号，也不考虑标准在什么位置。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;HTML5相比HTML4-01的改进&quot;&gt;&lt;a href=&quot;#HTML5相比HTML4-01的改进&quot; class=&quot;headerlink&quot; title=&quot;HTML5相比HTML4.01的改进&quot;&gt;&lt;/a&gt;HTML5相比HTML4.01的改进&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;HTML5提供了更多的元素和属性&lt;/li&gt;
&lt;li&gt;它有很多新特性，允许Web开发人员用HTML5创建Web应用&lt;/li&gt;
&lt;li&gt;HTML5规范比以前的版本健壮得多&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;其他知识点&quot;&gt;&lt;a href=&quot;#其他知识点&quot; class=&quot;headerlink&quot; title=&quot;其他知识点&quot;&gt;&lt;/a&gt;其他知识点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;html标准将变成一个活的标准，不再有6、7、8等版本，这就意味着它会根据需要继续发展和变化，不再需要固定的版本号。&lt;/li&gt;
&lt;li&gt;html标准具有向后兼容性(backwards compatibility)，意味着我们可以向html增加新的内容，浏览器在支持新的内容的同时，也会支持原来的内容。&lt;/li&gt;
&lt;li&gt;w3c html验证工具：&lt;a href=&quot;http://validator.w3.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://validator.w3.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;html5中通过meta指定字符编码&lt;code&gt;&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;&lt;/code&gt;，相比之前&lt;code&gt;&amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text/html;charset=utf-8&amp;quot;&amp;gt;&lt;/code&gt;方式要简单很多&lt;/li&gt;
&lt;li&gt;html文件编码要和页面指定的编码一致。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;其实回头看前几天的学习内容比较杂乱，导致耗费了一些不必要的精力，其实现在最应该做的是先系统的看点书，但由于我还有点前端基础，而且早上不想看书的特点，估计后面还是会学习网上的课程，下午和晚上的时间用于看书和写博客。&lt;br&gt;下面只有今天学习 《Head First HTML &amp;
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 4 天</title>
    <link href="http://archmee.github.io/201607/2016-07-09.html"/>
    <id>http://archmee.github.io/201607/2016-07-09.html</id>
    <published>2016-07-08T16:00:00.000Z</published>
    <updated>2016-07-09T17:44:06.296Z</updated>
    
    <content type="html">&lt;p&gt;在慕课网上学习&lt;a href=&quot;http://www.imooc.com/learn/9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML+CSS基础课程&lt;/a&gt;时记录了一些关键点。可能学完这个课程会给你已经学会了html和css的错觉，但其实这个课程真正的作用只在于让你初步的认识html和css，更深入的知识需要看书和实践才能获得。&lt;/p&gt;
&lt;h2 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h2&gt;&lt;h3 id=&quot;何为语义化？&quot;&gt;&lt;a href=&quot;#何为语义化？&quot; class=&quot;headerlink&quot; title=&quot;何为语义化？&quot;&gt;&lt;/a&gt;何为语义化？&lt;/h3&gt;&lt;p&gt;语义化。说的通俗点就是：明白每个标签的用途（在什么情况下使用此标签合理）比如，网页上的文章的标题就可以用标题标签，网页上的各个栏目的栏目名称也可以使用标题标签。文章中内容的段落就得放在段落标签中，在文章中有想强调的文本，就可以使用 em 标签表示强调等等。&lt;/p&gt;
&lt;p&gt;但是语义化可以给我们带来什么样的好处呢？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;更容易被搜索引擎收录&lt;/li&gt;
&lt;li&gt;更容易让屏幕阅读器读出网页内容&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;lt-em-gt-、-lt-strong-gt-和-lt-span-gt&quot;&gt;&lt;a href=&quot;#lt-em-gt-、-lt-strong-gt-和-lt-span-gt&quot; class=&quot;headerlink&quot; title=&quot;&amp;lt;em&amp;gt;、&amp;lt;strong&amp;gt;和&amp;lt;span&amp;gt;&quot;&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;标签是为了强调一段话中的关键字时使用，它们的语义是强调。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;标签是没有语义的，它的作用就是为了设置单独的样式用的。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;lt-code-gt-和-lt-pre-gt-的区别&quot;&gt;&lt;a href=&quot;#lt-code-gt-和-lt-pre-gt-的区别&quot; class=&quot;headerlink&quot; title=&quot;&amp;lt;code&amp;gt; 和 &amp;lt;pre&amp;gt;的区别&quot;&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt;的区别&lt;/h3&gt;&lt;p&gt;当代码为一行代码时，你可以使用&lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt;标签，如果是多行代码，可以使用&lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt;标签。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：&lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt;标签不只是为显示计算机的源代码时用的，在你需要在网页中预显示格式时都可以使用它，只是&lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt;标签的一个常见应用就是用来展示计算机的源代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;lt-table-gt-表格&quot;&gt;&lt;a href=&quot;#lt-table-gt-表格&quot; class=&quot;headerlink&quot; title=&quot;&amp;lt;table&amp;gt;表格&quot;&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;表格&lt;/h3&gt;&lt;p&gt;&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;：定义表格&lt;br&gt;&lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt;：定义行&lt;br&gt;&lt;code&gt;&amp;lt;th&amp;gt;&lt;/code&gt;：定义表头&lt;br&gt;&lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt;：定义单元格&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;tbody&amp;gt;&lt;/code&gt;：当表格内容非常多时，表格会下载一点显示一点，但如果加上&lt;code&gt;&amp;lt;tbody&amp;gt;&lt;/code&gt;标签后，这个表格就要等表格内容全部下载完才会显示。如右侧代码编辑器中的代码。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;summary&lt;/code&gt;属性，摘要的内容是不会在浏览器中显示出来的。它的作用是增加表格的可读性(语义化)，使搜索引擎更好的读懂表格内容，还可以使屏幕阅读器更好的帮助特殊用户读取表格内容。&lt;br&gt;语法：&lt;code&gt;&amp;lt;table summary=&amp;quot;表格简介文本&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;caption&amp;gt;&lt;/code&gt;用以描述表格标题，该标签必须紧随 table 标签之后，默认显示位置：表格上方。&lt;/p&gt;
&lt;h3 id=&quot;mailto属性&quot;&gt;&lt;a href=&quot;#mailto属性&quot; class=&quot;headerlink&quot; title=&quot;mailto属性&quot;&gt;&lt;/a&gt;mailto属性&lt;/h3&gt;&lt;p&gt;&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;元素的&lt;code&gt;mailto&lt;/code&gt;属性&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/about-a-mailto.jpg&quot; alt=&quot;mailto,图片来自慕课网&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：如果mailto后面同时有多个参数的话，第一个参数必须以&lt;code&gt;?&lt;/code&gt;号开头，后面的参数每一个都以&lt;code&gt;&amp;amp;&lt;/code&gt;号分隔。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;CSS&quot;&gt;&lt;a href=&quot;#CSS&quot; class=&quot;headerlink&quot; title=&quot;CSS&quot;&gt;&lt;/a&gt;CSS&lt;/h2&gt;&lt;h3 id=&quot;CSS样式分类&quot;&gt;&lt;a href=&quot;#CSS样式分类&quot; class=&quot;headerlink&quot; title=&quot;CSS样式分类&quot;&gt;&lt;/a&gt;CSS样式分类&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;内联式：就是把css代码直接写在现有的HTML标签中&lt;/li&gt;
&lt;li&gt;嵌入式：把css样式代码写在&lt;code&gt;&amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;&amp;lt;/style&amp;gt;&lt;/code&gt;标签之间&lt;/li&gt;
&lt;li&gt;外联式：就是把css代码写在一个单独的外部文件中，这个css样式文件以“.css”为扩展名，在&lt;head&gt;内使用&lt;link&gt;标签将css样式文件链接到HTML文件内&lt;br&gt;三种方式的优先级是：内联式 &amp;gt; 嵌入式 &amp;gt; 外联式（嵌入式&amp;gt;外联式有一个前提：嵌入式css样式的位置一定在外部式的后面）&lt;/head&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;选择器&quot;&gt;&lt;a href=&quot;#选择器&quot; class=&quot;headerlink&quot; title=&quot;选择器&quot;&gt;&lt;/a&gt;选择器&lt;/h3&gt;&lt;h4 id=&quot;分类&quot;&gt;&lt;a href=&quot;#分类&quot; class=&quot;headerlink&quot; title=&quot;分类&quot;&gt;&lt;/a&gt;分类&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;标签选择器其实就是html代码中的标签&lt;/li&gt;
&lt;li&gt;类选器：要先在标签上添加class属性并赋值，然后用&lt;code&gt;.&lt;/code&gt;号+class属性值的方式来使用&lt;/li&gt;
&lt;li&gt;&lt;p&gt;id选择器：要先在标签上定义添加id属性并赋值，然后用&lt;code&gt;#&lt;/code&gt;号+id属性值的方式来使用。&lt;br&gt;类选择器和id选择器的不同点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;id选择器只能在文档中使用一次&lt;/li&gt;
&lt;li&gt;可以使用类选择器词列表方法为一个元素同时设置多个样式。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;子选择器：用&lt;code&gt;&amp;gt;&lt;/code&gt;符号选择指定标签元素的&lt;strong&gt;第一代子元素&lt;/strong&gt;，比如&lt;code&gt;p &amp;gt; span&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;包含（后代）选择器：使用空格选择指定标签元素下的&lt;strong&gt;所有后辈元素&lt;/strong&gt;（注意加粗字体和子选择器的区别）&lt;/li&gt;
&lt;li&gt;通用选择器：是功能最强大的选择器，用&lt;code&gt;*&lt;/code&gt;号指定，它的作用是匹配html中所有标签元素&lt;/li&gt;
&lt;li&gt;伪类选择符：它允许给html不存在的标签（标签的某种状态）设置样式，比如&lt;code&gt;:hover&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;分组选择符：使用&lt;code&gt;,&lt;/code&gt;号来选择多个选择器，它们共享同一种样式&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;选择器权值&quot;&gt;&lt;a href=&quot;#选择器权值&quot; class=&quot;headerlink&quot; title=&quot;选择器权值&quot;&gt;&lt;/a&gt;选择器权值&lt;/h4&gt;&lt;p&gt;标签的权值为1，类选择器的权值为10，ID选择器的权值最高为100。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：还有一个权值比较特殊–继承也有权值但很低，有的文献提出它只有0.1，所以可以理解为继承的权值最低。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;样式重叠&quot;&gt;&lt;a href=&quot;#样式重叠&quot; class=&quot;headerlink&quot; title=&quot;样式重叠&quot;&gt;&lt;/a&gt;样式重叠&lt;/h3&gt;&lt;p&gt;层叠就是在html文件中对于同一个元素可以有多个css样式存在，当有相同权重的样式存在时，会根据这些css样式的前后顺序来决定，处于最后面的css样式会被应用。&lt;/p&gt;
&lt;p&gt;有些特殊的情况需要为某些样式设置具有最高权值，这时候我们可以使用&lt;code&gt;!important&lt;/code&gt;来解决，放在某条需要设定的样式之后，分号之前。&lt;/p&gt;
&lt;p&gt;样式优先级为：浏览器默认的样式 &amp;lt; 网页制作者样式 &amp;lt; 用户自己设置的样式，但记住&lt;code&gt;!important&lt;/code&gt;优先级样式是个例外，权值高于用户自己设置的样式。&lt;/p&gt;
&lt;h3 id=&quot;字体和段落样式&quot;&gt;&lt;a href=&quot;#字体和段落样式&quot; class=&quot;headerlink&quot; title=&quot;字体和段落样式&quot;&gt;&lt;/a&gt;字体和段落样式&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;样式名&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;font-family&lt;/td&gt;
&lt;td&gt;字体&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;font-size&lt;/td&gt;
&lt;td&gt;字体大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;font-weight&lt;/td&gt;
&lt;td&gt;字体粗细(bold…)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;font-style&lt;/td&gt;
&lt;td&gt;字体样式(italic…)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;text-decoration&lt;/td&gt;
&lt;td&gt;文本装饰(line-through…)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;text-indent&lt;/td&gt;
&lt;td&gt;段落缩进&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;line-height&lt;/td&gt;
&lt;td&gt;段落行高&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;letter-spacing&lt;/td&gt;
&lt;td&gt;字符间距&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;word-spacing&lt;/td&gt;
&lt;td&gt;单词间距，对汉字无效&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;text-align&lt;/td&gt;
&lt;td&gt;对块元素设置对齐方式&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;今天学完了慕课网的HTML+CSS基础课程前10章，明天继续。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在慕课网上学习&lt;a href=&quot;http://www.imooc.com/learn/9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML+CSS基础课程&lt;/a&gt;时记录了一些关键点。可能学完这个课程会给你已经学会了html和css的错觉，但其实这个课
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 3 天</title>
    <link href="http://archmee.github.io/201607/2016-07-08.html"/>
    <id>http://archmee.github.io/201607/2016-07-08.html</id>
    <published>2016-07-07T16:00:00.000Z</published>
    <updated>2016-07-10T17:59:37.246Z</updated>
    
    <content type="html">&lt;h2 id=&quot;学习-Sublime-Text&quot;&gt;&lt;a href=&quot;#学习-Sublime-Text&quot; class=&quot;headerlink&quot; title=&quot;学习 Sublime Text&quot;&gt;&lt;/a&gt;学习 Sublime Text&lt;/h2&gt;&lt;p&gt;虽然之前一直在用Sublime Text，但却对它很多功能知之甚少，所以上午全都在 &lt;a href=&quot;www.imooc.com&quot;&gt;慕课网&lt;/a&gt; 学习它的 &lt;a href=&quot;http://www.imooc.com/video/5473&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;视频课程&lt;/a&gt;。这门课主要讲了常用的快捷键和一些插件的安装使用，对开发很有帮助，就算暂时用不到，也可以先作为了解。&lt;/p&gt;
&lt;h3 id=&quot;快捷键&quot;&gt;&lt;a href=&quot;#快捷键&quot; class=&quot;headerlink&quot; title=&quot;快捷键&quot;&gt;&lt;/a&gt;快捷键&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;快捷键&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ctrl+p&lt;/td&gt;
&lt;td&gt;goto anything&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ctrl+shift+p&lt;/td&gt;
&lt;td&gt;命令行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ctrl+d&lt;/td&gt;
&lt;td&gt;多行模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ctrl+k&lt;/td&gt;
&lt;td&gt;多行模式选择时跳过当前项&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;alt+f3&lt;/td&gt;
&lt;td&gt;多行模式全选&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alt+.&lt;/td&gt;
&lt;td&gt;可以自动完成html闭合标记,不过有了Emmet插件几乎没什么用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ctrl+p面板中&lt;/td&gt;
&lt;td&gt;1. 输入@可以匹配css选择器   2. 输入#可以匹配html标签&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ctrl+shift+v&lt;/td&gt;
&lt;td&gt;带格式粘贴代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ctrl+e&lt;/td&gt;
&lt;td&gt;展开emmet语法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;插件&quot;&gt;&lt;a href=&quot;#插件&quot; class=&quot;headerlink&quot; title=&quot;插件&quot;&gt;&lt;/a&gt;插件&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;插件名&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;sublime httpRequest&lt;/td&gt;
&lt;td&gt;用于调试http请求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sublime nettus fetch&lt;/td&gt;
&lt;td&gt;稍作配置就可以从网上下载jQuery等库代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;advancedNewfile&lt;/td&gt;
&lt;td&gt;新建文件的简便方式&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;《Head-First-HTML-amp-CSS》-学习笔记&quot;&gt;&lt;a href=&quot;#《Head-First-HTML-amp-CSS》-学习笔记&quot; class=&quot;headerlink&quot; title=&quot;《Head First HTML &amp;amp; CSS》 学习笔记&quot;&gt;&lt;/a&gt;《Head First HTML &amp;amp; CSS》 学习笔记&lt;/h2&gt;&lt;h3 id=&quot;第4章-连接起来&quot;&gt;&lt;a href=&quot;#第4章-连接起来&quot; class=&quot;headerlink&quot; title=&quot;第4章. 连接起来&quot;&gt;&lt;/a&gt;第4章. 连接起来&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;浏览器中输入的Web地址称为URL，或称统一资源定位符（Uniform Resource Locators）&lt;/li&gt;
&lt;li&gt;单击一个相对链接时，在后台浏览器会根据这个相对路径和所单击页面的路径创建一个绝对路径&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;元素的title属性用来提供链接描述信息，可以为任何元素增加title属性以提供工具提示。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;target属性用来指定打开链接的方法：&lt;br&gt;_blank在新窗口中打开被链接文档&lt;br&gt;_self是默认，在相同的框架中打开被链接文档&lt;br&gt;_parent在父框架集中打开被链接文档&lt;br&gt;_top在整个窗口中打开被链接文档&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;建立锚的方式(用来指定页面中的位置)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;方法1&lt;/em&gt;：在页面中相应位置的元素上加上id属性（id要是唯一的），比如&lt;code&gt;&amp;lt;p id=&amp;quot;bookmark&amp;quot;&amp;gt;&lt;/code&gt;，从其他位置访问此处，只需要在URL最后加上该id即可，本页面跳转时浏览器会把href的值自动加到url链接后面再访问。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;方法2&lt;/em&gt;：在想要定位的位置加上&lt;code&gt;&amp;lt;a name=&amp;quot;bookmark&amp;quot;&amp;gt;...&amp;lt;/a&amp;gt;&lt;/code&gt;, 访问方法相,同，但方法一更常见一点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;学习-Sublime-Text&quot;&gt;&lt;a href=&quot;#学习-Sublime-Text&quot; class=&quot;headerlink&quot; title=&quot;学习 Sublime Text&quot;&gt;&lt;/a&gt;学习 Sublime Text&lt;/h2&gt;&lt;p&gt;虽然之前一直在用Sublime Te
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 2 天</title>
    <link href="http://archmee.github.io/201607/2016-07-07.html"/>
    <id>http://archmee.github.io/201607/2016-07-07.html</id>
    <published>2016-07-06T16:00:00.000Z</published>
    <updated>2016-07-10T17:59:46.379Z</updated>
    
    <content type="html">&lt;h2 id=&quot;MDN-的-Web开发入门教程&quot;&gt;&lt;a href=&quot;#MDN-的-Web开发入门教程&quot; class=&quot;headerlink&quot; title=&quot;MDN 的 Web开发入门教程&quot;&gt;&lt;/a&gt;MDN 的 Web开发入门教程&lt;/h2&gt;&lt;p&gt;由于早上起来比较困，所以看书肯定会打瞌睡，所以我决定找点自己在网上收集的资料看一下，然后看到了MDN的 &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web开发入门&lt;/a&gt;，通过这个教程你将建立一个构建简单的网页和发布自己的简单的代码的工具。教程共如下8篇：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装基本的软件&lt;/li&gt;
&lt;li&gt;你的网页将呈现什么样子？&lt;/li&gt;
&lt;li&gt;文件处理&lt;/li&gt;
&lt;li&gt;HTML基础&lt;/li&gt;
&lt;li&gt;CSS基础&lt;/li&gt;
&lt;li&gt;JavaScript基础&lt;/li&gt;
&lt;li&gt;发布网站&lt;/li&gt;
&lt;li&gt;网络是怎么工作的？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;学完后我个人感觉这个教程更适合放在第一天。&lt;a href=&quot;https://github.com/mdn/beginner-html-site-scripted&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个教程在Github上的Demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在这个过程中，因为偷懒，我的代码都是直接在 &lt;a href=&quot;https://codepen.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CodePen&lt;/a&gt; 在线编辑测试的，还有另外一个同类型比较有名的是 &lt;a href=&quot;https://jsfiddle.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsFiddle&lt;/a&gt;，不过我认为CodePen比较好的地方是首页就有很多别人贡献出来的作品，点击即可查看Demo，可供我们参考学习。&lt;/p&gt;
&lt;p&gt;在这个初级教程中的javascript章节解释了一个很经典的问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：我们将&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;元素放在 HTML 文件底部的原因是，浏览器解析 HTML 似乎按照代码出现的顺序来的。如果 JavaScript被首先读取，它也应该影响下面的 HTML，但有时会出现问题，因为 JavaScript 会在 HTML 之前被加载，如果 JavaScript 代码出现问题则 HTML 不会被加载。所以将 JavaScript 代码放在底部是最好的选择。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;《Head-First-HTML-amp-CSS》-学习笔记&quot;&gt;&lt;a href=&quot;#《Head-First-HTML-amp-CSS》-学习笔记&quot; class=&quot;headerlink&quot; title=&quot;《Head First HTML &amp;amp; CSS》 学习笔记&quot;&gt;&lt;/a&gt;《Head First HTML &amp;amp; CSS》 学习笔记&lt;/h2&gt;&lt;h3 id=&quot;第2章-深入了解超文本&quot;&gt;&lt;a href=&quot;#第2章-深入了解超文本&quot; class=&quot;headerlink&quot; title=&quot;第2章. 深入了解超文本&quot;&gt;&lt;/a&gt;第2章. 深入了解超文本&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;href属性全称hypertext reference&lt;/li&gt;
&lt;li&gt;属性的值应该用双引号括起来&lt;/li&gt;
&lt;li&gt;html5支持定制数据属性，不过现在对我并没什么（luan）用&lt;/li&gt;
&lt;li&gt;指向一个图像的路径不正确时，会在页面看到一个损坏的图像，所以记得用alt属性来添加说明文字，这样同时也为不支持图像的设备提供了备选信息,增加了可访问性&lt;/li&gt;
&lt;li&gt;关于&lt;strong&gt;相对路径&lt;/strong&gt;和&lt;strong&gt;绝对路径&lt;/strong&gt;(URL)的建议：站内用相对路径，站外用绝对路径&lt;/li&gt;
&lt;li&gt;网站的文件或文件夹名不要使用空格&lt;/li&gt;
&lt;li&gt;最好在建站初期就规划好网站文件结构，这样会省去一些升级网站的麻烦&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;第3章-构建模块&quot;&gt;&lt;a href=&quot;#第3章-构建模块&quot; class=&quot;headerlink&quot; title=&quot;第3章. 构建模块&quot;&gt;&lt;/a&gt;第3章. 构建模块&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;q标签用于短引用，它是内联元素；blockquote用于长引用，它是块元素。q可以嵌套在blockquote里面，但是blockquote嵌套在q则没什么意义&lt;/li&gt;
&lt;li&gt;如br这样没有任何内容的叫做void元素， &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;br/&amp;gt;&lt;/code&gt;分别用于HTML和更严格的XHTML，否则两者没什么区别&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt;(ordered list)是&lt;strong&gt;有序列表&lt;/strong&gt;，&lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;(unordered list) 是&lt;strong&gt;无序列表&lt;/strong&gt;，两者可相互嵌套构成多级列表&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;定义列表&lt;/strong&gt;格式为&lt;code&gt;&amp;lt;dl&amp;gt;&amp;lt;dt&amp;gt;定义术语&amp;lt;/dt&amp;gt;&amp;lt;dd&amp;gt;定义描述&amp;lt;/dd&amp;gt;...&amp;lt;/dl&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;字符实体用于在html文件中表示特殊符号，比如用&lt;code&gt;&amp;amp;lt;&lt;/code&gt;来表示&lt;code&gt;&amp;lt;&lt;/code&gt;，&lt;code&gt;&amp;amp;gt&lt;/code&gt;表示&lt;code&gt;&amp;gt;&lt;/code&gt;，&lt;code&gt;&amp;amp;amp&lt;/code&gt;来表示&lt;code&gt;&amp;amp;&lt;/code&gt;。字符实体都有编号，可以使用编号而不是实体名，比如&lt;code&gt;&amp;amp;#100&lt;/code&gt;，更多实体清单在 &lt;a href=&quot;http://www.w3schools.com/tags/ref_entities.asp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;W3School&lt;/a&gt; 或 &lt;a href=&quot;http://www.unicode.org/charts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Unicode&lt;/a&gt; 网站可以找到&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; 元素可以用于结构化显示代码。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MDN-的-Web开发入门教程&quot;&gt;&lt;a href=&quot;#MDN-的-Web开发入门教程&quot; class=&quot;headerlink&quot; title=&quot;MDN 的 Web开发入门教程&quot;&gt;&lt;/a&gt;MDN 的 Web开发入门教程&lt;/h2&gt;&lt;p&gt;由于早上起来比较困，所以看书肯定会打
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅七月起航</title>
    <link href="http://archmee.github.io/201607/2016-07-06.html"/>
    <id>http://archmee.github.io/201607/2016-07-06.html</id>
    <published>2016-07-05T16:00:00.000Z</published>
    <updated>2016-07-10T17:58:50.000Z</updated>
    
    <content type="html">&lt;p&gt;今天是7月6号，前端之旅的第一天。&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;从年前被辞退以来，先是花了四个月学习iOS开发，但是这其中由于个人感情原因一直不能集中精力，所以进度很慢，在6月底做完一个简陋的&lt;a href=&quot;https://github.com/Archmee/Dota2Heropedia&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dota2英雄百科&lt;/a&gt;APP后，决定暂时‘放弃’，并非自己学习能力不足或者没有耐心，只是在学习的过程有了对苹果公司的一些‘偏见’：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;他们打造了闭环的生态和闭源的开发环境，当然这也是他们盈利的模式，但是我不喜欢，这也是iOS开发工资居高不下的主要原因。&lt;/li&gt;
&lt;li&gt;OC语言各种反人类，而且和C语言各种混搭的奇技淫巧，感觉坑略多，没尝试Swift，看了喵神博客据说Swift没看起来那么简单。&lt;/li&gt;
&lt;li&gt;今年的行业危机让我质疑原生App的发展，毕竟用户每天使用的软件就那么几个，而他们打开的网页可以有很多，况且各大行业软件都已经有了领头羊，所以也就意味着不管我以后加入怎样的公司，都只能是维护或优化软件。这几点对以后个人创业十分不利。&lt;/li&gt;
&lt;li&gt;近年越来越流行全栈和全端，javascript和NodeJS大行其道，是未来几年的大方向，而且未来我更看好混合应用的开发模式。所以前面我所谓的‘放弃’是是选择用一种更柔和的方式处理技术冲突。&lt;/li&gt;
&lt;li&gt;更重要的是现在iOS培训批量生产，导致iOS工程师产能过剩，行业已经严重饱和，初级码农太多，中高级仍然一将难求，而我实在没有冒充中高级的能力和信心。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;7月1日，我在微博发了这样一句“不断选择，不断试错，不断纠正，反复迭代”。我想这句话不但适用一个创业公司的发展，对于人生的发展也同样适用。&lt;/p&gt;
&lt;p&gt;这次，我决定尝试一下前端，作为一名几乎工作一年的PHP后端，说完全不懂前端是假的，前端的基础技术html、css和js在平时的开发中也都会用到的，只是没有深入学习过而已，但这次一切都会不一样了。&lt;/p&gt;
&lt;p&gt;我希望我的每一次的放弃都不是真的放弃，那并不具有失败的意义，而是我在有了更好的选择上做了妥协。现在选择走进前端开发并不一定就是说我就给自己的未来固定了方向，我希望趁自己年轻的时候可以多尝试感兴趣的方向，尽量随性一点，而且我觉得未来自己可以尝试的方向还有用户体验交互和界面设计等上，所以现在选的方向也不是盲目选择，而是选择了一种渐进增强的方式。人生且长，随机应变。&lt;/p&gt;
&lt;p&gt;7月7日凌晨，写下此文，加油，未来共勉！&lt;/p&gt;
&lt;h2 id=&quot;《Head-First-HTML-amp-CSS》-学习笔记&quot;&gt;&lt;a href=&quot;#《Head-First-HTML-amp-CSS》-学习笔记&quot; class=&quot;headerlink&quot; title=&quot;《Head First HTML &amp;amp; CSS》 学习笔记&quot;&gt;&lt;/a&gt;《Head First HTML &amp;amp; CSS》 学习笔记&lt;/h2&gt;&lt;p&gt;今天整理了之前收集的前端方面的书签，准备好资源很重要。不过还是先看书要紧。&lt;/p&gt;
&lt;h3 id=&quot;第1章-认识HTML&quot;&gt;&lt;a href=&quot;#第1章-认识HTML&quot; class=&quot;headerlink&quot; title=&quot;第1章. 认识HTML&quot;&gt;&lt;/a&gt;第1章. 认识HTML&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;文件要保存为.html的后缀&lt;/li&gt;
&lt;li&gt;head标签中必须包括title标签&lt;/li&gt;
&lt;li&gt;html所要展现的所有内容必须放在符合相应语义的标签里面&lt;/li&gt;
&lt;li&gt;html是用于&lt;strong&gt;结构&lt;/strong&gt;，CSS(Cascadin Style Sheets)用于&lt;strong&gt;表现&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在html文件中要注意指定编码，并且要和文件的编码一致&lt;/li&gt;
&lt;li&gt;html的注释是&lt;code&gt;&amp;lt;!--注释--&amp;gt;&lt;/code&gt;,css的注释是&lt;code&gt;/*注释*/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;html5是html的最新版本&lt;/li&gt;
&lt;li&gt;编写html时要把head和body分开&lt;/li&gt;
&lt;li&gt;元素 = 开始标签+内容+结束标签&lt;/li&gt;
&lt;li&gt;注意区分&lt;strong&gt;块元素&lt;/strong&gt;和&lt;strong&gt;内联元素&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;大多数的空白符（制表符、回车、空格）都会被浏览器忽略，但是利用空白符可以让你的html更具可读性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;遇到的问题&quot;&gt;&lt;a href=&quot;#遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;遇到的问题&quot;&gt;&lt;/a&gt;遇到的问题&lt;/h3&gt;&lt;p&gt;但是对第一章的一点CSS样式产生了疑问，如下&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;hexcolor&quot;&gt;#d2b48c&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin-left&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;20%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin-right&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;20%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;border&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;10px&lt;/span&gt; solid black&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在没有其他样式的情况下，上面的代码表现在浏览器中的结果就是：body设置了背景，并且左右都设置了外边距，有一个10px的黑色边框，如图：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/00-47-54.jpg&quot; alt=&quot;body background-color&quot;&gt;&lt;/p&gt;
&lt;p&gt;首先我们忽略body默认的外边距问题，看起来一切都很正常是不是，但是我的问题来了，按照我们设置div或其他元素的经验，body很明显就是黑色边框范围内的区域，而且body左右两边都应该有外边距撑开的白色区域，或者说在body区域外的都应该是默认的白色才对，但是这里没有，而且对body设置的背景色覆盖了整个区域，那么问题在哪？&lt;/p&gt;
&lt;p&gt;通过google找到了一篇文章对这问题做了很详细的解释： &lt;a href=&quot;http://www.zhangxinxu.com/wordpress/2009/09/%E5%AF%B9html%E4%B8%8Ebody%E7%9A%84%E4%B8%80%E4%BA%9B%E7%A0%94%E7%A9%B6%E4%B8%8E%E7%90%86%E8%A7%A3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;对html与body的一些研究与理解&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里不是body的background起作用，而是body作为一个根结点起作用了，html标签未被激活，此时body担当了类似于根结点的结点，其background背景色被浏览器俘获，浏览器界面背景色为background的背景色，以上是我的推论，这种推论不是我凭空想象出来的，而是有一定的根据的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作者自己也说了是一种推论而已，更详细的解释请看原文，我不搬运了。&lt;br&gt;作者在文中第一段提到的那篇文章 &lt;a href=&quot;http://www.blueidea.com/tech/site/2006/3130.asp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;正确认识html与body&lt;/a&gt; 中也有一个解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;标准与非标准模式&lt;/strong&gt;&lt;br&gt;standard模式后，定义和解析将更加严格，所有定义必须从顶级标签html开始。&lt;br&gt;可以理解为传统非standard模式定义body的用法，standard模式下都必须在html上定义。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而要解决这个看起来有点诡异的问题是对html设置样式&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/*设置整个文档的背景为白色*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;hexcolor&quot;&gt;#fff&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;效果截图：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/01-32-18.jpg&quot; alt=&quot;html background color&quot;&gt;&lt;br&gt;虽然不知道这样做的好处和弊端是什么，但至少达到了我期望看到的效果。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天是7月6号，前端之旅的第一天。&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;从年前被辞退以来，先是花了四个月学习iOS开发，但是这其中由于个人感情原因一直不能集中精力
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>温故PHP之Cookie和Session</title>
    <link href="http://archmee.github.io/201607/2016-07-05.html"/>
    <id>http://archmee.github.io/201607/2016-07-05.html</id>
    <published>2016-07-05T08:48:00.000Z</published>
    <updated>2016-07-11T20:02:15.702Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;学习iOS以来，已经有一段时间不碰PHP了，这两天翻《Head First PHP &amp;amp; MySQL》温习PHP的时候(第7章)，发现自己之前对Cookie和Session并没有理解透彻，所以看完后决定写点学习笔记。&lt;/p&gt;
&lt;h2 id=&quot;Cookie&quot;&gt;&lt;a href=&quot;#Cookie&quot; class=&quot;headerlink&quot; title=&quot;Cookie&quot;&gt;&lt;/a&gt;Cookie&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;cookie是浏览器存储在用户计算机中的一小段数据。cookie和PHP变量十分相似，只不过关闭浏览器或计算机后cookie还存在，更重要的是cookie可以删除。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可以从PHP或其他语言访问cookie，而且cookie不仅可以跨多个页面(脚本)持久保存，甚至可以跨多个浏览器会话持久存储。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;cookie由键-值对组成，每个键-值可以有一个失效日期，如果没有指定失效日期，则cookie会在浏览器关闭时销毁。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置cookie，获取cookie以及销毁cookie&lt;/p&gt;
  &lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//设置cookie&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setcookie(&lt;span class=&quot;string&quot;&gt;&#39;userid&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2345&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//没有设置失效时间，则会在浏览器关闭后立即销毁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setcookie(&lt;span class=&quot;string&quot;&gt;&#39;userid&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1234&#39;&lt;/span&gt;, time()+&lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//设置当前时间以后60秒失效&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//通过超全局变量获取cookie&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;empty&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$_COOKIE&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&#39;userid&#39;&lt;/span&gt;]))&amp;#123;&amp;#125;&lt;span class=&quot;comment&quot;&gt;//判断是否设置了该cookie&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//销毁cookie只需要设置它的到期日期在过去的任意时间即可&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setcookie(&lt;span class=&quot;string&quot;&gt;&#39;userid&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;, time()-&lt;span class=&quot;number&quot;&gt;3600&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//设置userid这个cookie的到期日期在一个小时以前或其他过去时间，浏览器就会销毁该cookie&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Session&quot;&gt;&lt;a href=&quot;#Session&quot; class=&quot;headerlink&quot; title=&quot;Session&quot;&gt;&lt;/a&gt;Session&lt;/h2&gt;&lt;p&gt;如果用户设置浏览器禁用cookie，这样对cookie的存取操作就会失败，所以我们不能完全依赖cookie，此时可以考虑使用session。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;和cookie不同的是，session存储在服务器端，这样就不会受到浏览器限制。&lt;/li&gt;
&lt;li&gt;由于session数据保存在服务器上，这比存储在cookie中更安全，也更可靠。&lt;/li&gt;
&lt;li&gt;session比cookie能存储更多类型和大小的数据。&lt;/li&gt;
&lt;li&gt;session（会话）的缺点就是，无法对一个session变量在数据存储时间上做太多控制，会话一结束就会自动销毁会话变量，而会话在关闭浏览器时就结束。&lt;/li&gt;
&lt;li&gt;session变量由键-值对组成，但是和cookie不同的时，session变量没有失效日期，以为它随着浏览器关闭就销毁。&lt;/li&gt;
&lt;li&gt;所有要使用session数据的页面都要调用&lt;code&gt;session_start()&lt;/code&gt;开始一个会话，如果会话不存在，就建立一个会话，并分配一个会话ID，如果已经存在一个会话，则使用已有会话。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在会话开始后，可以直接操作$_SESSION全局变量存取会话变量&lt;/p&gt;
  &lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;session_start(); &lt;span class=&quot;comment&quot;&gt;//开始一个会话&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$_SESSION&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&#39;username&#39;&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&#39;haha&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$_SESSION&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&#39;username&#39;&lt;/span&gt;]))&amp;#123;&amp;#125;&lt;span class=&quot;comment&quot;&gt;//判断该会话变量是否存在&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;session_destroy()&lt;/code&gt;结束一个会话，但它不会自动销毁任何会话变量。所以如果希望用户关闭浏览器之前清空会话变量，就必须手动删除。&lt;/p&gt;
  &lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$_SESSION&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;();&lt;span class=&quot;comment&quot;&gt;//快速有效的清空会话变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  但还没有完全结束，因为session在后台实际上会使用cookie，如果浏览器支持cookie，会话可能会设置一个cookie临时存储会话ID，所以要完全关闭一个会话，还必须删除可能在浏览器上自动创建来存储会话ID的cookie&lt;/p&gt;
  &lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//会话ID存储在以会话命名的一个cookie中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$_COOKIE&lt;/span&gt;[session_name()])) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setcookie(session_name, &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;, time()-&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;完整的操作一个会话的过程如下&lt;/p&gt;
  &lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//开始一个会话&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;session_start();&lt;span class=&quot;comment&quot;&gt;//开始会话后，所有脚本共享会话变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//存取会话变量、检查会话变量...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$_SESSION&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&#39;username&#39;&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&#39;haha&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//结束会话的正确姿势&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$_SESSION&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;();&lt;span class=&quot;comment&quot;&gt;//清空会话变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$_COOKIE&lt;/span&gt;[session_name()])) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setcookie(session_name, &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;, time()-&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;session_destroy(); &lt;span class=&quot;comment&quot;&gt;//最后再结束会话&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是问题依然存在的是，如果用户禁用了cookie，那么session会随着浏览器的关闭而结束。而会话如何响应cookie被禁用取决于服务器上php.ini配置文件中的相关配置项。&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;session.use_cookies&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;session.use_only_cookies&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;session.use_trans_sid&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Watch!&lt;/strong&gt;&lt;br&gt;禁用cookie的情况下要让会话正常工作，还需要另外一个机制在不同页面传递会话ID，这个机制需要将会话ID追加到每个页面的URL后面，如果服务器上的php.ini中文件中&lt;code&gt;session.use_trans_id&lt;/code&gt;被设置为1(true)，这就会自动发生。如果你无法直接修改php.ini文件，cookie被禁用时就必须利用类似下面的代码手动地向会话页面的URL追加会话ID。&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;a href=&lt;span class=&quot;string&quot;&gt;&quot;index.php?&amp;lt;?php echo SID; ?&amp;gt;&quot;&lt;/span&gt;&amp;gt;view index&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是现在仍不能扭转关闭浏览器即结束会话的命运，而这对于需要记住用户登陆状态的应用至关重要。&lt;/p&gt;
&lt;h2 id=&quot;Cookie-Session-更持久的方案&quot;&gt;&lt;a href=&quot;#Cookie-Session-更持久的方案&quot; class=&quot;headerlink&quot; title=&quot;Cookie+Session=更持久的方案&quot;&gt;&lt;/a&gt;Cookie+Session=更持久的方案&lt;/h2&gt;&lt;p&gt;我们发现不管是session还是cookie都有各自的优缺点，那么是否可以尝试一下Cookie+Session的方案。&lt;/p&gt;
&lt;p&gt;这种方案在技术上并没有增加多少复杂度，只需要同时设置Cookie和Session并且同时销毁即可。&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;session_start();&lt;span class=&quot;comment&quot;&gt;//开始会话&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$_SESSION&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&#39;userid&#39;&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&#39;12345&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setcookie(&lt;span class=&quot;string&quot;&gt;&#39;userid&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;12345&#39;&lt;/span&gt;, time()+&lt;span class=&quot;number&quot;&gt;3600&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//一个小时候失效&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//然后在其他脚本中共享cookie和session数据了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//手动注销数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$_SESSION&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&#39;userid&#39;&lt;/span&gt;])) &amp;#123;&lt;span class=&quot;comment&quot;&gt;//先销毁session数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;$_SESSION&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$_COOKIE&lt;/span&gt;[session_name()])) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setcookie(&lt;span class=&quot;variable&quot;&gt;$_COOKIE&lt;/span&gt;[session_name],&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;,time()-&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    session_destroy();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setcookie(&lt;span class=&quot;string&quot;&gt;&#39;userid&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;, time()-&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//再销毁cookie&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是cookie+session仍然不能防止用户禁用cookie，所以我们还需要寻求更好的方案。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;学习iOS以来，已经有一段时间不碰PHP了，这两天翻《Head First PHP &amp;amp; MySQL》温习PHP的时候(第7章)，发现
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Back End" scheme="http://archmee.github.io/tags/Back-End/"/>
    
      <category term="PHP" scheme="http://archmee.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发中的一些代码片段</title>
    <link href="http://archmee.github.io/201606/some-ios-code-snippet.html"/>
    <id>http://archmee.github.io/201606/some-ios-code-snippet.html</id>
    <published>2016-06-29T05:02:00.000Z</published>
    <updated>2016-06-29T10:41:58.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;获取保存文档的路径&quot;&gt;&lt;a href=&quot;#获取保存文档的路径&quot; class=&quot;headerlink&quot; title=&quot;获取保存文档的路径&quot;&gt;&lt;/a&gt;获取保存文档的路径&lt;/h2&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSSearchPathForDirectoriesInDomains&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;NSDocumentDirectory&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;NSUserDomainMask&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;简单的音乐播放&quot;&gt;&lt;a href=&quot;#简单的音乐播放&quot; class=&quot;headerlink&quot; title=&quot;简单的音乐播放&quot;&gt;&lt;/a&gt;简单的音乐播放&lt;/h2&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//本地音乐文件test.mp3，如果是URL资源，可以直接用NSURL初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *musicPath = [[&lt;span class=&quot;built_in&quot;&gt;NSBundle&lt;/span&gt; mainBundle] pathForResource:&lt;span class=&quot;string&quot;&gt;@&quot;test&quot;&lt;/span&gt; ofType:&lt;span class=&quot;string&quot;&gt;@&quot;mp3&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSURL&lt;/span&gt; *url = [&lt;span class=&quot;built_in&quot;&gt;NSURL&lt;/span&gt; fileURLWithPath:musicPath];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *error;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;AVAudioPlayer&lt;/span&gt; *audioPlayer = [[&lt;span class=&quot;built_in&quot;&gt;AVAudioPlayer&lt;/span&gt; alloc] initWithContentsOfURL:url error:&amp;amp;error];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;audioPlayer&lt;span class=&quot;variable&quot;&gt;.numberOfLoops&lt;/span&gt; = -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//循化播放&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (audioPlayer == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;) &amp;#123; &lt;span class=&quot;comment&quot;&gt;//播放器加载出错，或者没有找到播放文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;the error is %@&quot;&lt;/span&gt;, [error localizedDescription]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [audioPlayer play]; &lt;span class=&quot;comment&quot;&gt;//播放音乐&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;简单的视频播放&quot;&gt;&lt;a href=&quot;#简单的视频播放&quot; class=&quot;headerlink&quot; title=&quot;简单的视频播放&quot;&gt;&lt;/a&gt;简单的视频播放&lt;/h2&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;AVPlayerItem&lt;/span&gt; *playerItem = [&lt;span class=&quot;built_in&quot;&gt;AVPlayerItem&lt;/span&gt; playerItemWithURL:url]; &lt;span class=&quot;comment&quot;&gt;//指定视频链接&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;AVPlayer&lt;/span&gt; *player = [&lt;span class=&quot;built_in&quot;&gt;AVPlayer&lt;/span&gt; playerWithPlayerItem:playerItem];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;AVPlayerLayer&lt;/span&gt; *layer = [&lt;span class=&quot;built_in&quot;&gt;AVPlayerLayer&lt;/span&gt; playerLayerWithPlayer: player]; &lt;span class=&quot;comment&quot;&gt;//播放视频的画布&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;layer&lt;span class=&quot;variable&quot;&gt;.frame&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.view&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.bounds&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;layer&lt;span class=&quot;variable&quot;&gt;.backgroundColor&lt;/span&gt; = [[&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; blackColor] &lt;span class=&quot;built_in&quot;&gt;CGColor&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.view&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.layer&lt;/span&gt; addSublayer:layer];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[player play];&lt;span class=&quot;comment&quot;&gt;//开始播放，pause结束播放&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;弹出Alert框&quot;&gt;&lt;a href=&quot;#弹出Alert框&quot; class=&quot;headerlink&quot; title=&quot;弹出Alert框&quot;&gt;&lt;/a&gt;弹出Alert框&lt;/h2&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *title = &lt;span class=&quot;string&quot;&gt;@&quot;我是title&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *message = &lt;span class=&quot;string&quot;&gt;@&quot;测试Alert！！！&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIAlertController&lt;/span&gt; *alert = [&lt;span class=&quot;built_in&quot;&gt;UIAlertController&lt;/span&gt; alertControllerWithTitle:title&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                               message:message&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                            preferredStyle:&lt;span class=&quot;built_in&quot;&gt;UIAlertControllerStyleAlert&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//实现点击按钮后的block&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^actionHandler)(&lt;span class=&quot;built_in&quot;&gt;UIAlertAction&lt;/span&gt; *) = ^(&lt;span class=&quot;built_in&quot;&gt;UIAlertAction&lt;/span&gt; * action)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//执行该block需要的操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//声明alert的默认行为&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIAlertAction&lt;/span&gt; *defaultAction = [&lt;span class=&quot;built_in&quot;&gt;UIAlertAction&lt;/span&gt; actionWithTitle:&lt;span class=&quot;string&quot;&gt;@&quot;朕已知晓&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                        style:&lt;span class=&quot;built_in&quot;&gt;UIAlertActionStyleDefault&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                      handler:actionHandler];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//为alert添加事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//[alert addAction:cancelAction];//取消操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[alert addAction:defaultAction];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//此处真正弹出alert框&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; presentViewController:alert animated:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt; completion:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;为点击按钮设置过渡效果&quot;&gt;&lt;a href=&quot;#为点击按钮设置过渡效果&quot; class=&quot;headerlink&quot; title=&quot;为点击按钮设置过渡效果&quot;&gt;&lt;/a&gt;为点击按钮设置过渡效果&lt;/h2&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//设置添加过渡效果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CATransition&lt;/span&gt; *transition = [&lt;span class=&quot;built_in&quot;&gt;CATransition&lt;/span&gt; animation];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;transition&lt;span class=&quot;variable&quot;&gt;.type&lt;/span&gt; = k&lt;span class=&quot;built_in&quot;&gt;CATransitionFade&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;transition&lt;span class=&quot;variable&quot;&gt;.duration&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//时长&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;transition&lt;span class=&quot;variable&quot;&gt;.timingFunction&lt;/span&gt; = [&lt;span class=&quot;built_in&quot;&gt;CAMediaTimingFunction&lt;/span&gt; functionWithName:k&lt;span class=&quot;built_in&quot;&gt;CAMediaTimingFunctionEaseOut&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//展示过渡效果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.view&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.layer&lt;/span&gt; addAnimation:transition forKey:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;用UIWebView展示本地html文件内容&quot;&gt;&lt;a href=&quot;#用UIWebView展示本地html文件内容&quot; class=&quot;headerlink&quot; title=&quot;用UIWebView展示本地html文件内容&quot;&gt;&lt;/a&gt;用UIWebView展示本地html文件内容&lt;/h2&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *htmlfile = [[&lt;span class=&quot;built_in&quot;&gt;NSBundle&lt;/span&gt; mainBundle] pathForResource:&lt;span class=&quot;string&quot;&gt;@&quot;CrazyDrag&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                     ofType:&lt;span class=&quot;string&quot;&gt;@&quot;html&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSData&lt;/span&gt; *htmlData = [&lt;span class=&quot;built_in&quot;&gt;NSData&lt;/span&gt; dataWithContentsOfFile:htmlfile];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSURL&lt;/span&gt; *baseURL = [&lt;span class=&quot;built_in&quot;&gt;NSURL&lt;/span&gt; fileURLWithPath: [[&lt;span class=&quot;built_in&quot;&gt;NSBundle&lt;/span&gt; mainBundle] bundlePath] ];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//UIWebView *aboutWebView    &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.aboutWebView&lt;/span&gt; loadData:htmlData&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   MIMEType:&lt;span class=&quot;string&quot;&gt;@&quot;text/html&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           textEncodingName:&lt;span class=&quot;string&quot;&gt;@&quot;UTF-8&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    baseURL:baseURL];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;使用delegate&quot;&gt;&lt;a href=&quot;#使用delegate&quot; class=&quot;headerlink&quot; title=&quot;使用delegate&quot;&gt;&lt;/a&gt;使用delegate&lt;/h2&gt;&lt;p&gt;delegate一般适用于：A界面是B界面的父界面，而A想和B通信，就可以在B中声明@protocol，然后设置A为B的delegate，A就可以通过接口获取B的情况，而A对B是不可知的。&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//1.在B.h中声明&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@protocol&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BDelegate&lt;/span&gt; &amp;lt;&lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)someActionWillCallByA:(A *)controller;&lt;span class=&quot;comment&quot;&gt;//声明想在A中调用的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//公共接口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;B&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;SomeController&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &amp;lt;BDelegate&amp;gt; delegate; &lt;span class=&quot;comment&quot;&gt;//声明代理指针变量，和代理有关的就向该代理发送消息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//其他外部可用的声明&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//2.在B.m中调用在头文件中声明的代理方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.delegate&lt;/span&gt; someActionWillCallByA]; &lt;span class=&quot;comment&quot;&gt;//其实此处的方法还是空，并未实现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//3.在A.h中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#import &lt;span class=&quot;title&quot;&gt;&quot;B.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//说明在A中要使用的B代理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;A&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;SomeController&lt;/span&gt; &amp;lt;&lt;span class=&quot;title&quot;&gt;BDelegate&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//4.在A.m中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//实现要代理的方法 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)someActionWillCallByA:(A *)controller &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//希望在A中执行的操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用-Local-NSNotification&quot;&gt;&lt;a href=&quot;#使用-Local-NSNotification&quot; class=&quot;headerlink&quot; title=&quot;使用 Local NSNotification&quot;&gt;&lt;/a&gt;使用 Local NSNotification&lt;/h2&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//现在创建通知分为两步：设置notification type 和 调度通知&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//1. notification setting type (ios 8 later)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIUserNotificationType&lt;/span&gt; types = (&lt;span class=&quot;built_in&quot;&gt;UIUserNotificationType&lt;/span&gt;)(&lt;span class=&quot;built_in&quot;&gt;UIUserNotificationTypeAlert&lt;/span&gt; | &lt;span class=&quot;built_in&quot;&gt;UIUserNotificationTypeSound&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIUserNotificationSettings&lt;/span&gt; *mySettings = [&lt;span class=&quot;built_in&quot;&gt;UIUserNotificationSettings&lt;/span&gt; settingsForTypes:types categories:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[&lt;span class=&quot;built_in&quot;&gt;UIApplication&lt;/span&gt; sharedApplication] registerUserNotificationSettings:mySettings]; &lt;span class=&quot;comment&quot;&gt;//注册通知&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//2. creating and schedule local notification&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSDate&lt;/span&gt; *date = [&lt;span class=&quot;built_in&quot;&gt;NSDate&lt;/span&gt; dateWithTimeIntervalSinceNow:&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UILocalNotification&lt;/span&gt; *notification = [[&lt;span class=&quot;built_in&quot;&gt;UILocalNotification&lt;/span&gt; alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;notification&lt;span class=&quot;variable&quot;&gt;.fireDate&lt;/span&gt; = date;&lt;span class=&quot;comment&quot;&gt;//失效日期&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;notification&lt;span class=&quot;variable&quot;&gt;.alertBody&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;@&quot;Whatever&quot;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//通知消息内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;notification&lt;span class=&quot;variable&quot;&gt;.timeZone&lt;/span&gt; = [&lt;span class=&quot;built_in&quot;&gt;NSTimeZone&lt;/span&gt; defaultTimeZone];&lt;span class=&quot;comment&quot;&gt;//设置时区&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;notification&lt;span class=&quot;variable&quot;&gt;.soundName&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;UILocalNotificationDefaultSoundName&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//提醒的声音&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;notification&lt;span class=&quot;variable&quot;&gt;.userInfo&lt;/span&gt; = @&amp;#123;&lt;span class=&quot;string&quot;&gt;@&quot;IDINFO&quot;&lt;/span&gt;: @(notificationID)&amp;#125;; &lt;span class=&quot;comment&quot;&gt;//可以设置该notification的标示符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[&lt;span class=&quot;built_in&quot;&gt;UIApplication&lt;/span&gt; sharedApplication] scheduleLocalNotification:notification];&lt;span class=&quot;comment&quot;&gt;//调度通知&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//其他有用的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//[[UIApplication sharedApplication] scheduledLocalNotifications];//获取已经加入通知列表的所有通知数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//[[UIApplication sharedApplication] cancelLocalNotification:notification]; //取消通知&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;保存数据的几种方法&quot;&gt;&lt;a href=&quot;#保存数据的几种方法&quot; class=&quot;headerlink&quot; title=&quot;保存数据的几种方法&quot;&gt;&lt;/a&gt;保存数据的几种方法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;plist文件&lt;/p&gt;
 &lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[List writeToFile:&lt;span class=&quot;string&quot;&gt;@&quot;file.plist&quot;&lt;/span&gt; atomically:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;];&lt;span class=&quot;comment&quot;&gt;//直接写入到plist文件中即可&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 加载数据一般有类似 initWithContentsOfFile 的方法可用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NSUserDefaults 保存用户设置等数据，key－value的形式&lt;/p&gt;
 &lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//根据不同的参数类型使用对应的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[&lt;span class=&quot;built_in&quot;&gt;NSUserDefaults&lt;/span&gt; standardUserDefaults] setBool:&lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt; forKey:&lt;span class=&quot;string&quot;&gt;@&quot;FirstTime&quot;&lt;/span&gt;];&lt;span class=&quot;comment&quot;&gt;//保存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; firstTime = [[&lt;span class=&quot;built_in&quot;&gt;NSUserDefaults&lt;/span&gt; standardUserDefaults] boolForKey:&lt;span class=&quot;string&quot;&gt;@&quot;FirstTime&quot;&lt;/span&gt;];&lt;span class=&quot;comment&quot;&gt;//加载&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//还可以用字典对象同时保存所有值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *dictionary = @&amp;#123;&lt;span class=&quot;string&quot;&gt;@&quot;ChecklistIndex&quot;&lt;/span&gt;:@-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                             &lt;span class=&quot;string&quot;&gt;@&quot;FirstTime&quot;&lt;/span&gt;:@YES,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                             &lt;span class=&quot;string&quot;&gt;@&quot;ChecklistItemId&quot;&lt;/span&gt;:@&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[&lt;span class=&quot;built_in&quot;&gt;NSUserDefaults&lt;/span&gt; standardUserDefaults] registerDefaults:dictionary];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NSData、NSCoder 配合 NSKeyedUnarchiver 保存数据&lt;/p&gt;
 &lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//在要保存的对象类型的实现文件中，要处理对象进行编码解码的工作，比如下面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//解码，用语初始化对象被自动调用初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)initWithCoder:(&lt;span class=&quot;built_in&quot;&gt;NSCoder&lt;/span&gt; *)coder &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; = [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.name&lt;/span&gt; = [coder decodeObjectForKey:&lt;span class=&quot;string&quot;&gt;@&quot;Name&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.iconName&lt;/span&gt; = [coder decodeObjectForKey:&lt;span class=&quot;string&quot;&gt;@&quot;iconName&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.items&lt;/span&gt; = [coder decodeObjectForKey:&lt;span class=&quot;string&quot;&gt;@&quot;Items&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//编码，用于保存数据时自动被调用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)encodeWithCoder:(&lt;span class=&quot;built_in&quot;&gt;NSCoder&lt;/span&gt; *)coder &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [coder encodeObject:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.name&lt;/span&gt; forKey:&lt;span class=&quot;string&quot;&gt;@&quot;Name&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [coder encodeObject:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.iconName&lt;/span&gt; forKey:&lt;span class=&quot;string&quot;&gt;@&quot;iconName&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [coder encodeObject:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.items&lt;/span&gt; forKey:&lt;span class=&quot;string&quot;&gt;@&quot;Items&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//在其他代码中使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//保存数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSMutableData&lt;/span&gt; *data = [[&lt;span class=&quot;built_in&quot;&gt;NSMutableData&lt;/span&gt; alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSKeyedArchiver&lt;/span&gt; *archiver = [[&lt;span class=&quot;built_in&quot;&gt;NSKeyedArchiver&lt;/span&gt; alloc] initForWritingWithMutableData:data]; &lt;span class=&quot;comment&quot;&gt;//用NSData初始化，表示archiver的数据都保存到NSData中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[archiver encodeObject:objValue forKey:&lt;span class=&quot;string&quot;&gt;@&quot;key&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[archiver finishEncoding]; &lt;span class=&quot;comment&quot;&gt;//NSKeyedArchiver有个编码解码的过程，此处调用完成编码的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[data writeToFile:filePath atomically:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;//将编码后的数据保存到文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//加载数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSData&lt;/span&gt; *data = [[&lt;span class=&quot;built_in&quot;&gt;NSData&lt;/span&gt; alloc] initWithContentsOfFile:filePath]; &lt;span class=&quot;comment&quot;&gt;//将文件读入NSData&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSKeyedUnarchiver&lt;/span&gt; *unarchiver = [[&lt;span class=&quot;built_in&quot;&gt;NSKeyedUnarchiver&lt;/span&gt; alloc] initForReadingWithData:data];&lt;span class=&quot;comment&quot;&gt;//用data来初始化unarchiver&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj = [unarchiver decodeObjectForKey:&lt;span class=&quot;string&quot;&gt;@&quot;key&quot;&lt;/span&gt;];&lt;span class=&quot;comment&quot;&gt;//将解码后的数据保存到对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[unarchiver finishDecoding]; &lt;span class=&quot;comment&quot;&gt;//调用完成解码方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CoreData(暂时没用过)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;数据库比如 SQLite、Realm（暂时没用过）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;局部更新表视图&quot;&gt;&lt;a href=&quot;#局部更新表视图&quot; class=&quot;headerlink&quot; title=&quot;局部更新表视图&quot;&gt;&lt;/a&gt;局部更新表视图&lt;/h2&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.tableView&lt;/span&gt; beginUpdates];    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.tableView&lt;/span&gt; reloadRowsAtIndexPaths:@[[&lt;span class=&quot;built_in&quot;&gt;NSIndexPath&lt;/span&gt; indexPathForRow:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; inSection:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]] withRowAnimation:&lt;span class=&quot;built_in&quot;&gt;UITableViewRowAnimationNone&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.tableView&lt;/span&gt; deleteRowsAtIndexPaths:@[[&lt;span class=&quot;built_in&quot;&gt;NSIndexPath&lt;/span&gt; indexPathForRow:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; inSection:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]] withRowAnimation:&lt;span class=&quot;built_in&quot;&gt;UITableViewRowAnimationFade&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.tableView&lt;/span&gt; endUpdates];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;通知中心的一种用法&quot;&gt;&lt;a href=&quot;#通知中心的一种用法&quot; class=&quot;headerlink&quot; title=&quot;通知中心的一种用法&quot;&gt;&lt;/a&gt;通知中心的一种用法&lt;/h2&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//我使用通知是在在网络上异步加载JSON数据，获取到数据后要通知TableView去reload data的情景&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//发出通知&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[&lt;span class=&quot;built_in&quot;&gt;NSNotificationCenter&lt;/span&gt; defaultCenter] postNotificationName:&lt;span class=&quot;string&quot;&gt;@&quot;reloadTable&quot;&lt;/span&gt; object:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//谁要接收通知&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//给通知中心添加观察者，得到通知后便执行指定的函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[&lt;span class=&quot;built_in&quot;&gt;NSNotificationCenter&lt;/span&gt; defaultCenter] addObserver:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; selector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(notiReloadData) name:&lt;span class=&quot;string&quot;&gt;@&quot;reloadTable&quot;&lt;/span&gt; object: &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//不需要通知后活着对象要dealloc时要移除observer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[&lt;span class=&quot;built_in&quot;&gt;NSNotificationCenter&lt;/span&gt; defaultCenter] removeObserver:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; name:&lt;span class=&quot;string&quot;&gt;@&quot;reloadTable&quot;&lt;/span&gt; object:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;改变导航栏的返回按钮文字&quot;&gt;&lt;a href=&quot;#改变导航栏的返回按钮文字&quot; class=&quot;headerlink&quot; title=&quot;改变导航栏的返回按钮文字&quot;&gt;&lt;/a&gt;改变导航栏的返回按钮文字&lt;/h2&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.navigationItem&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.backBarButtonItem&lt;/span&gt; = [[&lt;span class=&quot;built_in&quot;&gt;UIBarButtonItem&lt;/span&gt; alloc] initWithTitle:&lt;span class=&quot;string&quot;&gt;@&quot;返回&quot;&lt;/span&gt; style:&lt;span class=&quot;built_in&quot;&gt;UIBarButtonItemStyleDone&lt;/span&gt; target:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; action:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;将UIVeiw改变成UIScrollView&quot;&gt;&lt;a href=&quot;#将UIVeiw改变成UIScrollView&quot; class=&quot;headerlink&quot; title=&quot;将UIVeiw改变成UIScrollView&quot;&gt;&lt;/a&gt;将UIVeiw改变成UIScrollView&lt;/h2&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//我使用的方式是在storybard中直接将UIView改变成UIScrollViw，但它仍然不能滚动，后来通过如下代码设置了滚动区的宽度和高度就可以了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[(&lt;span class=&quot;built_in&quot;&gt;UIScrollView&lt;/span&gt; *)&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.view&lt;/span&gt; setContentSize:&lt;span class=&quot;built_in&quot;&gt;CGSizeMake&lt;/span&gt;(width, height);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;NSString的几个有用的方法&quot;&gt;&lt;a href=&quot;#NSString的几个有用的方法&quot; class=&quot;headerlink&quot; title=&quot;NSString的几个有用的方法&quot;&gt;&lt;/a&gt;NSString的几个有用的方法&lt;/h2&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//替换字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[stringTest stringByReplacingOccurrencesOfString:&lt;span class=&quot;string&quot;&gt;@&quot;－&quot;&lt;/span&gt; withString:&lt;span class=&quot;string&quot;&gt;@&quot; &quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//按照指定字符串分割一个字符串，返回数组的形式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[string componentsSeparatedByString:&lt;span class=&quot;string&quot;&gt;@&quot;&amp;lt;br /&amp;gt;&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//使用指定分隔符将数据连接成一个字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[array componentsJoinedByString:&lt;span class=&quot;string&quot;&gt;@&quot;\n&quot;&lt;/span&gt;];&lt;span class=&quot;comment&quot;&gt;//用换行符来连接&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//删除换行符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[string stringByTrimmingCharactersInSet:[&lt;span class=&quot;built_in&quot;&gt;NSCharacterSet&lt;/span&gt; newlineCharacterSet]];&lt;span class=&quot;comment&quot;&gt;//还有其他替换空白的选项&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;使用正则表达式&quot;&gt;&lt;a href=&quot;#使用正则表达式&quot; class=&quot;headerlink&quot; title=&quot;使用正则表达式&quot;&gt;&lt;/a&gt;使用正则表达式&lt;/h2&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//建立正则表达式规则&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSRegularExpression&lt;/span&gt; *regex = [&lt;span class=&quot;built_in&quot;&gt;NSRegularExpression&lt;/span&gt; regularExpressionWithPattern:&lt;span class=&quot;string&quot;&gt;@&quot;(&amp;lt;.+?&amp;gt;)|\r|\n&quot;&lt;/span&gt;                                                                           options:&lt;span class=&quot;built_in&quot;&gt;NSRegularExpressionCaseInsensitive&lt;/span&gt; error:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; ];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//应用正则表达式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *strRes = [regex stringByReplacingMatchesInString:str                                                           options:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;                                                             range:&lt;span class=&quot;built_in&quot;&gt;NSMakeRange&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, [str length])                                                      withTemplate:&lt;span class=&quot;string&quot;&gt;@&quot;&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;UILabel自适应&quot;&gt;&lt;a href=&quot;#UILabel自适应&quot; class=&quot;headerlink&quot; title=&quot;UILabel自适应&quot;&gt;&lt;/a&gt;UILabel自适应&lt;/h2&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//指定换行方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;label&lt;span class=&quot;variable&quot;&gt;.lineBreakMode&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;NSLineBreakByClipping&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//文字对齐方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;label&lt;span class=&quot;variable&quot;&gt;.textAlignment&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;NSTextAlignmentRight&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//指定该项是为了当文字内容超出label宽度时自动换行成多行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;label&lt;span class=&quot;variable&quot;&gt;.numberOfLines&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//设置这个是为了当文字内容超出label高度时可以自动扩展label，显示剩余文字，而不会截断&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[label sizeToFit];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//调整字体大小来适应label的宽度，但是该方法好像和sizeToFit有冲突，同时设置没有效果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[label adjustsFontSizeToFitWidth];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;一个单例&quot;&gt;&lt;a href=&quot;#一个单例&quot; class=&quot;headerlink&quot; title=&quot;一个单例&quot;&gt;&lt;/a&gt;一个单例&lt;/h2&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ (instancetype)shareModel &amp;#123; &lt;span class=&quot;comment&quot;&gt;//单例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 1 声明一个静态变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; DataMode *_shareModel = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 2 声明一个静态这是 dispatch_one_t，确保这些初始化代码只能被执行一次&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;dispatch_once_t&lt;/span&gt; oncePredicate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 3 使用 GCD 执行一个 block 来初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_once&lt;/span&gt;(&amp;amp;oncePredicate, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _shareModel = [[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _shareModel;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;注意⚠&quot;&gt;&lt;a href=&quot;#注意⚠&quot; class=&quot;headerlink&quot; title=&quot;注意⚠&quot;&gt;&lt;/a&gt;注意⚠&lt;/h2&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//当我们创建RGB颜色时，由于OC只支持0-1的数值，所以我们要将原来RGB值/255&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; colorWithRed:&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt; green:&lt;span class=&quot;number&quot;&gt;144&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt; blue:&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt; alpha:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//当json数据有值为null的时候，不能直接保存到文件，必须将其替换或移除&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;value = null;&lt;span class=&quot;comment&quot;&gt;//此处仅仅为伪代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[value isEqual:[&lt;span class=&quot;built_in&quot;&gt;NSNull&lt;/span&gt; null];&lt;span class=&quot;comment&quot;&gt;//活着用[value isKindOfClass:[NSNull class]]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//当json数据有值为false的时候，不能直接进行逻辑判断&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;value = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[value isEqualToNumber:@&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;span class=&quot;comment&quot;&gt;//比如这样判断是否为false，0 = FALSE = NO&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;获取保存文档的路径&quot;&gt;&lt;a href=&quot;#获取保存文档的路径&quot; class=&quot;headerlink&quot; title=&quot;获取保存文档的路径&quot;&gt;&lt;/a&gt;获取保存文档的路径&lt;/h2&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Objective-C" scheme="http://archmee.github.io/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://archmee.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>开始使用 CocoaPods</title>
    <link href="http://archmee.github.io/201605/start-use-cocoapods.html"/>
    <id>http://archmee.github.io/201605/start-use-cocoapods.html</id>
    <published>2016-05-30T07:45:00.000Z</published>
    <updated>2016-06-29T05:08:22.000Z</updated>
    
    <content type="html">&lt;p&gt;简单记录一下最近在项目中使用 CocoaPods 遇到的问题和解决办法&lt;/p&gt;
&lt;h2 id=&quot;What’s-it&quot;&gt;&lt;a href=&quot;#What’s-it&quot; class=&quot;headerlink&quot; title=&quot;What’s it&quot;&gt;&lt;/a&gt;What’s it&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;CocoaPods is a dependency manager for Swift and Objective-C Cocoa projects.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单翻译就是一个用于 Swift 和 OC 的 Cocoa 项目的依赖管理器。&lt;/p&gt;
&lt;h2 id=&quot;下载和安装&quot;&gt;&lt;a href=&quot;#下载和安装&quot; class=&quot;headerlink&quot; title=&quot;下载和安装&quot;&gt;&lt;/a&gt;下载和安装&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://cocoapods.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CocoaPods官网&lt;/a&gt; 指明了此软件是基于 Ruby 开发环境的，但是这里默认你已经安装好了 Ruby 环境（OS X系统已经默认安装了）。接下来用一条指令即可安装CocoaPods&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ gem install cocoapods&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是等你安装报错才发现，我们身处大局域网之内，很难连上 Internet。&lt;br&gt;针对这个问题，国内已经有网站提供了镜像，比如&lt;a href=&quot;https://ruby.taobao.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;淘宝提供RubyGem&lt;/a&gt;，所以我们只需要替换下镜像的地址即可。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ gem sources &lt;span class=&quot;operator&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#列出镜像地址,默认是 https://rubygems.org/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ gem sources --remove https://rubygems.org/ &lt;span class=&quot;comment&quot;&gt;#将其移除&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ gem sources &lt;span class=&quot;operator&quot;&gt;-a&lt;/span&gt; https://ruby.taobao.org/ &lt;span class=&quot;comment&quot;&gt;#添加新的源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ gem sources &lt;span class=&quot;operator&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#可以查看是否已经添加成功了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;再次执行安装命令，通关了～&lt;br&gt;接下来执行&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ pod setup &lt;span class=&quot;comment&quot;&gt;#官方没有这一步，我看的其他博客，不知道缺少这一步会怎样&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在执行这一步时，我等了半个小时都没什么反应，还以为是卡死了，Google下来发现这是安装了一个什么包，大概有700M上下，所以最好耐心一点。&lt;/p&gt;
&lt;p&gt;。。。。。。&lt;/p&gt;
&lt;h2 id=&quot;项目初始化&quot;&gt;&lt;a href=&quot;#项目初始化&quot; class=&quot;headerlink&quot; title=&quot;项目初始化&quot;&gt;&lt;/a&gt;项目初始化&lt;/h2&gt;&lt;p&gt;安装好了之后，进入到想使用Cocoapods的项目根目录，执行&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ pod init &lt;span class=&quot;comment&quot;&gt;#比较标准的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;该命令会创建一个名为 Podfile 的文件，大概长这样：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;platform :ios, &lt;span class=&quot;string&quot;&gt;&#39;8.0&#39;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#指定运行平台&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#use_frameworks! #如果使用swift的话就取消该注释&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target &lt;span class=&quot;string&quot;&gt;&#39;MyApp&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#&#39;MyApp&#39;是你的项目名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pod &lt;span class=&quot;string&quot;&gt;&#39;AFNetworking&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;~&amp;gt; 2.6&#39;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#引入一个库就要新建一个条目，后面指定的版本号不是必须的，默认安装最新版，但是估计有时候会有特殊需求&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当然你也可以手工创建一个Podfile文件，当然如果你不按照以上格式来的话肯定会报错，我最初就根据一个视频的步骤直接写了最核心的那一条&lt;code&gt;pod &amp;#39;AFNetworking&amp;#39;&lt;/code&gt;，然后就跳坑了，保存文件当然不会提示你有什么错误，但是后面就会了。以上，根据自己的需求编辑保存好Podfile，执行：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ pod install &lt;span class=&quot;comment&quot;&gt;#在项目中安装你引入的三方依赖&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;该命令会读取刚才的Podfile文件，然后将你需要的依赖安装好，此时你的项目目录会多出来几个陌生的文件，不用管它，我们只需要记住之前打开工程文件是 xx.xcodeproj，而现在和以后都请打开刚才生成的 xx.xcworkspace工程文件。&lt;/p&gt;
&lt;h2 id=&quot;在项目中引入库文件&quot;&gt;&lt;a href=&quot;#在项目中引入库文件&quot; class=&quot;headerlink&quot; title=&quot;在项目中引入库文件&quot;&gt;&lt;/a&gt;在项目中引入库文件&lt;/h2&gt;&lt;p&gt;这个需要看你使用的第三方库而定，比如我使用了SDWebImage，就用如下代码引入&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#import &lt;span class=&quot;title&quot;&gt;&amp;lt;SDWebImage/UIImageView+WebCache.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当然，不同的库肯定不一样，关于你使用的库，在CocoaPods的官网搜索库名，里面会详细介绍该库用法以及API。&lt;/p&gt;
&lt;h2 id=&quot;移除CocoaPods&quot;&gt;&lt;a href=&quot;#移除CocoaPods&quot; class=&quot;headerlink&quot; title=&quot;移除CocoaPods&quot;&gt;&lt;/a&gt;移除CocoaPods&lt;/h2&gt;&lt;p&gt;如果后来不想在项目中使用 CocoPods 了，怎么办呢?&lt;br&gt;&lt;code&gt;pod --help&lt;/code&gt; 查看帮助发现有个参数&lt;code&gt;deintegrate&lt;/code&gt;，后面介绍说&lt;code&gt;Deintegrate CocoaPods from your project&lt;/code&gt;，大意就是取消项目中集成的CocoaPods，执行&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ pod deintegrate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通过终端打印结果可以看出，它从项目中移除了好些东西，但是还有文件没有删除干净，比如Podfile.lock和Pods文件夹以及工程文件xx.xcworkspace，删除之，个人觉得之前创建的Podfile还是先备份一下，万一后悔了呢！！！&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://cocoapods.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CocoaPods官网&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/wayne23/p/3912882.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/wayne23/p/3912882.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/ea36b56bb17b&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/ea36b56bb17b&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cocoachina.com/bbs/read.php?tid=1682495&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cocoachina.com/bbs/read.php?tid=1682495&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;简单记录一下最近在项目中使用 CocoaPods 遇到的问题和解决办法&lt;/p&gt;
&lt;h2 id=&quot;What’s-it&quot;&gt;&lt;a href=&quot;#What’s-it&quot; class=&quot;headerlink&quot; title=&quot;What’s it&quot;&gt;&lt;/a&gt;What’s it&lt;/h2&gt;&lt;b
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="CocoaPods" scheme="http://archmee.github.io/tags/CocoaPods/"/>
    
      <category term="iOS" scheme="http://archmee.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发之OC高级笔记</title>
    <link href="http://archmee.github.io/201603/start-learn-oc-advanced.html"/>
    <id>http://archmee.github.io/201603/start-learn-oc-advanced.html</id>
    <published>2016-03-24T10:30:00.000Z</published>
    <updated>2016-06-29T06:30:37.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;OC-33章：init&quot;&gt;&lt;a href=&quot;#OC-33章：init&quot; class=&quot;headerlink&quot; title=&quot;OC-33章：init&quot;&gt;&lt;/a&gt;OC-33章：init&lt;/h2&gt;&lt;p&gt;alloc负责分配对象空间，init负责初始化对象。&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; *things = [[&lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; alloc] init]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;init方法可以被重写覆盖，像description方法一样。&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype) init &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; = [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; init]; &lt;span class=&quot;comment&quot;&gt;//初始化父类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//初始化自己的代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;instancetype&lt;/strong&gt; 关键字会告诉编译器返回什么类型的对象。自己编写的或是覆盖的任何初始化方法都应该返回 instancetype 类型的值。如果返回具体的类类型，会在继承的时候导致强制转换，所以使用 instancetype 确保可以安全的继承初始化方法。当然也可以使用 &lt;strong&gt;id&lt;/strong&gt; 类型，但是更推荐 instancetype。&lt;/p&gt;
&lt;p&gt;对于实现自己的初始化方法的注意事项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;出于优化考虑，init 方法会释放已经分配了内存的对象，然后创建另一个对象返回之。苹果要求：将父类的 init 方法所返回的对象赋给 self。&lt;/li&gt;
&lt;li&gt;init 方法在执行过程中发生了错误，所以会释放对象并返回 nil。苹果建议：检查父类的 init 方法的返回值，确定不是 nil 并且有效。否则，就没有必要执行自定义的初始化代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为 init 没有实参，如果希望向 init 方法传入实参，可以定义其他初始化方法，并在 init  方法中调用该方法并传入默认参数。多个初始化方法也可以用这种方法。&lt;/p&gt;
&lt;p&gt;在 init 方法中既可以通过直接赋值来设置实例变量，也可以使用存取方法来完成这项任务。&lt;/p&gt;
&lt;p&gt;编写初始化方法应该遵循以下规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其他的初始化方法都应该（直接地或间接地）调用指定初始化方法。&lt;/li&gt;
&lt;li&gt;指定初始化方法应该先调用父类的指定初始化方法，然后再编写自己的初始化代码。&lt;/li&gt;
&lt;li&gt;如果某个类的指定初始化方法和父类不同，就必须覆盖父类的指定初始化方法，并调用新的指定初始化方法。&lt;/li&gt;
&lt;li&gt;如果某个类有多个初始化方法，就应该在相应头文件中明确地注明哪个方法是指定初始化方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;禁用初始化方法&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)init &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;built_in&quot;&gt;NSException&lt;/span&gt; raise:&lt;span class=&quot;string&quot;&gt;@&quot;BNRWallSafeInitialization&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                format:&lt;span class=&quot;string&quot;&gt;@&quot;Use initWithSecretCode: not init&quot;&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;//抛出异常&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;OC-34章：再谈属性&quot;&gt;&lt;a href=&quot;#OC-34章：再谈属性&quot; class=&quot;headerlink&quot; title=&quot;OC-34章：再谈属性&quot;&gt;&lt;/a&gt;OC-34章：再谈属性&lt;/h2&gt;&lt;p&gt;属性的特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存取类型&lt;ul&gt;
&lt;li&gt;属性声明为 &lt;strong&gt;readwrite&lt;/strong&gt; 代表程序应该自动创建存方法和取方法&lt;/li&gt;
&lt;li&gt;属性声明为 &lt;strong&gt;readonly&lt;/strong&gt; 代表程序无须创建存方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;生命周期类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;assign&lt;/strong&gt;： 是默认也是最简单的，存方法会将传入的值直接赋给实例变量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;strong&lt;/strong&gt;：凡是指向对象的实例变量，通常应该使用 strong 特性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;weak&lt;/strong&gt;：要求不保留传入的对象，如果该对象被释放，相应的实例变量会被自动赋为 nil，这么做可以避免产生&lt;strong&gt;悬空指针&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;unsafe_unretained&lt;/strong&gt;：和weak特性有点类似，要求不保留传入的对象，然而，如果该对象被释放，相应的实例变量不会被自动赋为 nil。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;copy&lt;/strong&gt;：要求拷贝传入的对象，并将新的对象赋给实例变量。大多数类都有两个版本，一个可修改的，另一个不可修改的。copy 方法返回不可修改对象，mutableCopy 返回可修改对象。&lt;/p&gt;
&lt;p&gt;OC 没有为属性提供 mutableCopy 这样的特性，如果某个对象需要复制传入的对象，并且要求新对象是可修改的，就必须自己编写代码实现（向传入的对象发送mutableCopy消息），而不能依赖属性机制。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;atomic 和 nonatomic：默认atomic，但建议使用 nonatomic&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果声明一个属性，手动实现存取方法，编译器就不会合成实例变量。但如果你需要实例变量，就必须自己创建，创建的方法是在类的实现文件中的implementation后添加 &lt;code&gt;@synthesize&lt;/code&gt; 指令。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@synthesize&lt;/span&gt; mushroom = _mushroom; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//然后就可以实现存取方法并使用实例变量了。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;声明一个只读属性时，编译器会自动合成一个取方法和一个实例变量，此时如果手动实现取方法，编译器也不会合成实例变量，而需要手动合成。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;2016-03-28 12:00 更新&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;OC-35章：KVC&quot;&gt;&lt;a href=&quot;#OC-35章：KVC&quot; class=&quot;headerlink&quot; title=&quot;OC-35章：KVC&quot;&gt;&lt;/a&gt;OC-35章：KVC&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;KVC&lt;/strong&gt;（key-value coding）能够让程序通过名称直接存取属性。也可以用KVC读取实例变量。&lt;code&gt;setValue:forKey&lt;/code&gt;方法会查找相应的存方法，如果没有，就会直接为实例变量赋值，&lt;code&gt;valueForKey:&lt;/code&gt;方法会查找相应取方法，如果没有，就会直接返回相应的实例变量。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;KVC的方法在NSObject类中定义。&lt;/li&gt;
&lt;li&gt;KVC是一个违背了对象封装的例外。&lt;/li&gt;
&lt;li&gt;KVC只对对象有效。所以应该尽量用相应对象来声明属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Key Path：大多数程序到最后都有一个相对复杂的对象表。如下图，这种通过层层指针指向的对象虽然可以使用KVC来遍历，但是使用 key path 要方便很多。有点类似与C++的&lt;code&gt;.&lt;/code&gt;号访问对象属性。和KVC的方法名稍有区别，&lt;code&gt;setValue:forKeyPath:&lt;/code&gt;和&lt;code&gt;valueForKeyPath:&lt;/code&gt;。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/12-39-14.jpg&quot; alt=&quot;Complex object&quot;&gt;&lt;/p&gt;
&lt;p&gt;以下是用KVC遍历的方法：&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;BNRDepartment *sales = [[BNRDepartment alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BNREmployee *sickEmployee = [sales valueForKey:&lt;span class=&quot;string&quot;&gt;@&quot;manager&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BNRPerson *personToCall = [sickEmployee valueForKey:&lt;span class=&quot;string&quot;&gt;@&quot;emergencyContact&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *numberToDial = [personToCall valueForKey:&lt;span class=&quot;string&quot;&gt;@&quot;phoneNumber&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以下是用 key path 的方法：&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;BNRDepartment *sales = [[BNRDepartment alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *numberToDial = [sales valueForKeyPath:&lt;span class=&quot;string&quot;&gt;@&quot;manager.emergencyContact.phoneNumber&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通过 key path 设置属性的值：&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;BNRDepartment *sales = [[BNRDepartment alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[sales setValue:&lt;span class=&quot;string&quot;&gt;@&quot;manager.emergencyContact.phoneNumber&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;代码效果同KVC：&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;BNRDepartment *sales = [[BNRDepartment alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BNREmploy *sickEmployee = [sales vlaueForKey:&lt;span class=&quot;string&quot;&gt;@&quot;manager&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BNRPerson *personToCall = [sickEmployee valueForKey:&lt;span class=&quot;string&quot;&gt;@&quot;emergencyContact&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[personToCall setValue:&lt;span class=&quot;string&quot;&gt;@&quot;555-555-5555&quot;&lt;/span&gt; forKey:&lt;span class=&quot;string&quot;&gt;@&quot;phoneNumber&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;OC-36章：KVO&quot;&gt;&lt;a href=&quot;#OC-36章：KVO&quot; class=&quot;headerlink&quot; title=&quot;OC-36章：KVO&quot;&gt;&lt;/a&gt;OC-36章：KVO&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;KVO&lt;/strong&gt;（key-value observing）是指当指定的对象的属性被修改时，允许对象接收通知的机制。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;观察对象的属性时，要指定观察属性的名称。&lt;/li&gt;
&lt;li&gt;在KVO中使用context指针可以确认通知的对象是否是本对象，context会随通知一起发送。&lt;/li&gt;
&lt;li&gt;如果使用存取方法来设置属性，那么系统会自动通知观察者。如果没有使用存取方法，这时可以通过&lt;code&gt;willChangeValueForKey:&lt;/code&gt;和&lt;code&gt;didChangeValueKey:&lt;/code&gt;方法通知系统某个属性的值即将/已经发生变化。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果希望某个变量接收到另一个变量改变时的通知，就需要用 &lt;code&gt;keyPathsForValuesAffecting&lt;/code&gt;+某个变量名 来设置，示例如下：&lt;/p&gt;
  &lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;built_in&quot;&gt;NSSet&lt;/span&gt; *)keyPathsForValuesAffectingLastTimeString &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;NSSet&lt;/span&gt; setWithObject:&lt;span class=&quot;string&quot;&gt;@&quot;lastTime&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;OC-37章：范畴&quot;&gt;&lt;a href=&quot;#OC-37章：范畴&quot; class=&quot;headerlink&quot; title=&quot;OC-37章：范畴&quot;&gt;&lt;/a&gt;OC-37章：范畴&lt;/h2&gt;&lt;p&gt;通过使用范畴（Category），程序员可以为任何已有的类添加方法。&lt;br&gt;应该使用范畴来给已存在类增加新方法，而不要在范畴中替换已存在的方法；这种情况下应该创建该类的子类。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建Category时候要选择类型为 Objective－C Category，选择基于的类（即你想添加方法的系统类）&lt;/li&gt;
&lt;li&gt;&lt;p&gt;系统会自动创建 你选择的基类名+继承的子类类名+后缀的方式创建.h和.m的文件，比如：&lt;code&gt;NSString+YourClass.h&lt;/code&gt;，和普通类文件稍有不同：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//NSString+YourClass.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NSString&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;YourClass&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//NSString+YourClass.m&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NSString&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;YourClass&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//此处实现增加的新方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)test &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;调用自己增加的新方法&lt;/p&gt;
 &lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//首先需要导入头文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@import &lt;span class=&quot;string&quot;&gt;&quot;NSString+YourClass.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//然后在代码中直接基于基类调用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; test]; &lt;span class=&quot;comment&quot;&gt;//注意此处原来NSString是没有test方法的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;–END–&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;OC-33章：init&quot;&gt;&lt;a href=&quot;#OC-33章：init&quot; class=&quot;headerlink&quot; title=&quot;OC-33章：init&quot;&gt;&lt;/a&gt;OC-33章：init&lt;/h2&gt;&lt;p&gt;alloc负责分配对象空间，init负责初始化对象。&lt;br&gt;&lt;fig
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Objective-C" scheme="http://archmee.github.io/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://archmee.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>立场诗</title>
    <link href="http://archmee.github.io/201603/stand-poems.html"/>
    <id>http://archmee.github.io/201603/stand-poems.html</id>
    <published>2016-03-05T16:37:14.000Z</published>
    <updated>2016-05-31T15:31:04.000Z</updated>
    
    <content type="html">&lt;center&gt;—— &lt;em&gt;德兰修女&lt;/em&gt;&lt;/center&gt;


&lt;p&gt;人们不讲道理、没有逻辑、以自我为中心，不管怎样，总是爱他们；&lt;/p&gt;
&lt;p&gt;即使你是友善的，人们还是说你自私和别有用心，不管怎样，总是要友善；&lt;/p&gt;
&lt;p&gt;当你功成名就，身边尽是真的敌人和假的朋友，不管怎样，总是要成功；&lt;/p&gt;
&lt;p&gt;诚实和率直，使你受到欺骗和攻击，不管怎样，总是诚实、率直；&lt;/p&gt;
&lt;p&gt;你多年营造的一切，可能毁于一夜之间，不管怎样，总是要去营造；&lt;/p&gt;
&lt;p&gt;如果你得到平静和喜悦，可能会遭人妒嫉，不管怎样，总是要快乐；&lt;/p&gt;
&lt;p&gt;你今天做的善事，人们往往明天就会忘记，不管怎样，总是要做善事；&lt;/p&gt;
&lt;p&gt;把你所拥有最好的东西献给这个世界，也许微不足道，不管怎样，总是要把最好的东西献给世界。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;偶然读到的一首诗，读完让人觉得很通透。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;center&gt;—— &lt;em&gt;德兰修女&lt;/em&gt;&lt;/center&gt;


&lt;p&gt;人们不讲道理、没有逻辑、以自我为中心，不管怎样，总是爱他们；&lt;/p&gt;
&lt;p&gt;即使你是友善的，人们还是说你自私和别有用心，不管怎样，总是要友善；&lt;/p&gt;
&lt;p&gt;当你功成名就，身边尽是真的敌人和假的朋友，不
    
    </summary>
    
      <category term="life" scheme="http://archmee.github.io/categories/life/"/>
    
    
      <category term="摘抄" scheme="http://archmee.github.io/tags/%E6%91%98%E6%8A%84/"/>
    
  </entry>
  
  <entry>
    <title>iOS学习笔记之OC基础</title>
    <link href="http://archmee.github.io/201603/start-learn-oc-languae.html"/>
    <id>http://archmee.github.io/201603/start-learn-oc-languae.html</id>
    <published>2016-03-03T10:30:00.000Z</published>
    <updated>2016-06-29T06:28:56.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;p&gt;从2.29号开始看 BigNerd 出版的《Objective-C编程》，花了两天时间将 C 语言部分温习了一遍，由于我是计算机专业的毕业生，所以 C 系的语言还算靠谱，但毕竟做了一年 Web 开发，重点都放在  PHP 和其他 Web 开发知识上，所以关于 C 的知识也已忘却不少。无论如何，我还是认真的把 C 的基础过了一遍(PS：有个讨论苹果开发入门的知乎贴有人说这本书只需要一天时间，实在佩服！)，并且跟着作者YY了一下 iOS 的开发工具 Xcode IDE，为什么YY呢，因为书上用的是 Mac 下的 Xcode，而我先前的C语言部分都是用的 Win 下的 Codeblocks，原因且看下面。&lt;/p&gt;
&lt;h2 id=&quot;吐槽&quot;&gt;&lt;a href=&quot;#吐槽&quot; class=&quot;headerlink&quot; title=&quot;吐槽&quot;&gt;&lt;/a&gt;吐槽&lt;/h2&gt;&lt;p&gt;因为我手头并不宽裕，只有一个 iPad mini 2，当时买来是为了看书看视频用的，而 MAC 呢，虽然我没有，但是我姐有，可是她白天上班要带到公司去，所以我们的计划就是我白天在家看书，晚上等电脑回来再敲代码。然而这几天晚上我都在熟悉 MAC 的使用以及……&lt;strong&gt;下载Xcode&lt;/strong&gt;，是的，连我自己也没想到。在鬼畜的 iTunes 上下载4.5G的 Xcode 7.2.1 尝试了2个晚上，就看到菊花一直转啊转啊，也不知道进度多少，？下载无果后，我姐利用上班时间在 Apple 官网下载了最新的 Xcode 7.3 Beta 版，这个版本我之前在官网看到过，因为是 Beta 版，所以才没有下载。那好吧，既然下载了，那就安装吧……,安装完运行才提示 Xcode 7.3 只支持 OS X 10.11 以上，而我的系统还是 OS X 10.10.1，试问隔壁的Windows有按照系统小版本更新来支持工具的吗？那我想估计下载 Xcode 6 就可以了吧，然而翻遍官网也没找到 Xcode 6 或者其他不是最新版的 Xcode 的链接，最后通过Google找到了 &lt;a href=&quot;http://stackoverflow.com/questions/10335747/how-to-download-xcode-4-5-6-7-and-get-the-dmg-file&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;StackOverflow上同样的问题：&lt;code&gt;how-to-download-xcode-4-5-6-7-and-get-the-dmg-file ?&lt;/code&gt;&lt;/a&gt;，才知道要 &lt;a href=&quot;https://developer.apple.com/downloads&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;访问Apple官网的这个页面&lt;/a&gt;，登陆 Apple ID，然后就可以下载Xcode的历史版本了。oh，妈妈咪呀，终于找到了你了，真是“皇天不负有心人”“踏波铁屑无觅处，得来全不费工夫。”“蓦然回首，那人却在灯火阑珊处”啊！好歹看见了一丝曙光，耗费昨晚一晚上，终于下载下来了 2.6 G 的 Xcode 6.4，等今晚上安装吧，这下应该是没问题的。结果晚上我姐回家说已经为此更新了系统。&lt;br&gt;吐槽结束，回到正题吧。&lt;br&gt;前面说过，我们这里省略 C 语言的部分，所以直接从13章开始。&lt;/p&gt;
&lt;h2 id=&quot;OC-13章：对象&quot;&gt;&lt;a href=&quot;#OC-13章：对象&quot; class=&quot;headerlink&quot; title=&quot;OC-13章：对象&quot;&gt;&lt;/a&gt;OC-13章：对象&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;对象和结构体类似，结构体中的&lt;strong&gt;成员&lt;/strong&gt;在对象中称为&lt;strong&gt;实例变量&lt;/strong&gt;（instance variable），对象和结构体的不同点在于：对象还可以包含一组函数。&lt;/li&gt;
&lt;li&gt;类负责描述特定类型的对象，一个类定义了一种对象。&lt;/li&gt;
&lt;li&gt;画对象图时，类一般用&lt;strong&gt;虚线&lt;/strong&gt;，实例（对象）一般用&lt;strong&gt;实线&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;OC 头文件后缀为&lt;code&gt;.h&lt;/code&gt;,其他代码后缀为&lt;code&gt;.m&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;OC 用&lt;code&gt;#import&lt;/code&gt;导入头文件，类似于 C 的&lt;code&gt;#include&lt;/code&gt;，但是&lt;code&gt;#import&lt;/code&gt;导入更有效率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Foundation&lt;/strong&gt;框架是 iOS 项目的一个基础框架，由多种类、函数、常量以及数据类型组成。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NSLog()&lt;/code&gt;函数类似于C语言的&lt;code&gt;printf()&lt;/code&gt;函数，它与&lt;code&gt;printf()&lt;/code&gt;的区别在于会先输出日期、时间、程序名称和进程ID，再输出实际内容。格式打印符&lt;code&gt;%p&lt;/code&gt;会输出指针地址，&lt;code&gt;%@&lt;/code&gt;会输出对象的‘描述信息’。&lt;/li&gt;
&lt;li&gt;在 OC 中，若要执行方法里的代码，&lt;u&gt;首先需要发送一条&lt;strong&gt;消息&lt;/strong&gt;给包含这个方法的对象或类&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;消息发送：必须写在一对方括号中，并且必须包含接收方（receiver）和选择器（selector）。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/22-56-05.jpg&quot; alt=&quot;Message&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;类方法&lt;/strong&gt;（class method）会创建类的实例，并初始化实例变量，如date。&lt;br&gt;&lt;strong&gt;实例方法&lt;/strong&gt;（instance method）会提供实例中实例变量的信息，或是对实例的实例变量进行操作，如timeIntervalSince1970。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;OC 区分大小写，以下为 OC 的语言命名习惯：&lt;ul&gt;
&lt;li&gt;指向实例的变量使用&lt;strong&gt;驼峰命名法&lt;/strong&gt;（camel case），以小写字母开头，接下来每个单词首字母大写。&lt;/li&gt;
&lt;li&gt;方法的命名也使用驼峰命名法。&lt;/li&gt;
&lt;li&gt;类的名称以大写字母开头，接下来的单词继续使用驼峰命名法。&lt;/li&gt;
&lt;li&gt;很多苹果创建的类型和常量的命名也是前缀大写的驼峰命名法，如NSInteger，他并不是类，只是一种整型类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt; 2016.3.5 12:46 更新&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;OC-14章：消息&quot;&gt;&lt;a href=&quot;#OC-14章：消息&quot; class=&quot;headerlink&quot; title=&quot;OC-14章：消息&quot;&gt;&lt;/a&gt;OC-14章：消息&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;传递实参的消息，方法名后带有冒号&lt;code&gt;:&lt;/code&gt;意味需要发送带有实参的消息，而且每个冒号后面都要传递参数。在写代码时，多个实参应该对齐冒号。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NSDate&lt;/code&gt;是时间类，&lt;code&gt;NSCalendar&lt;/code&gt;是日历类。&lt;/li&gt;
&lt;li&gt;消息可以&lt;strong&gt;嵌套&lt;/strong&gt;发送，系统会最先从最里面的消息由内之外依次执行。&lt;/li&gt;
&lt;li&gt;唯一必须以嵌套的形式连续发送的消息是alloc和init。&lt;br&gt;每个类都有一个 alloc 方法，它能创建一个对象，并返回指向该对象的指针，通过 alloc 出来的对象，必须要经过初始化才能使用，它存放在内存里，但是无法接收消息，每个类也都有一个 init 方法，它用来初始化实例。eg.&lt;code&gt;[[Class alloc] init]&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;nil&lt;/strong&gt; 是不指向任何对象的指针，nil 值为0。在OC中向 nil 发送消息，没有任何影响。&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;重点1：&lt;/strong&gt;如果程序向某个对象发送了消息，但却没得到预期的结果，应先检查消息接收方是否为 nil。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重点2：&lt;/strong&gt;向 nil 发送消息，得到的返回值没有任何意义。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;声明指针时如不知道指针所指对象的准确类型，可以使用&lt;code&gt;id&lt;/code&gt;类型。id 类型的含义是：可以指向任意类型的OC对象的指针，并且已经隐含了&lt;code&gt;*&lt;/code&gt;的作用。eg.&lt;code&gt;id example&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;OC-15章：对象与内存&quot;&gt;&lt;a href=&quot;#OC-15章：对象与内存&quot; class=&quot;headerlink&quot; title=&quot;OC-15章：对象与内存&quot;&gt;&lt;/a&gt;OC-15章：对象与内存&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;函数的帧在函数结束后会自动释放，堆里的对象不会自动释放。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ARC：&lt;/strong&gt;自动销毁不被引用的对象的机制，自动引用计数（automatic reference counting）的简称。当对象对指向自己的指针计数为0时，程序便自动销毁该对象。&lt;br&gt;如果不再需要某个对象，则可以将&lt;u&gt;指向它&lt;/u&gt;的指针设置为 nil。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;OC-16章：NSString&quot;&gt;&lt;a href=&quot;#OC-16章：NSString&quot; class=&quot;headerlink&quot; title=&quot;OC-16章：NSString&quot;&gt;&lt;/a&gt;OC-16章：NSString&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@&amp;quot;...&amp;quot;&lt;/code&gt;是OC中的一个缩写，代表根据给定的字符串创建一个 NSString 对象。这种缩写称为&lt;strong&gt;字面量语法&lt;/strong&gt;（literal syntax）。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NSString 实例可以保存任意 Unicode 字符，如需插入非 ASCII 字符，则可以使用&lt;code&gt;\u&lt;/code&gt;，后面加上该字符的 Unicode 编码。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *str = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;I \u2661 You&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt; 2016.3.5 23:46 更新&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;OC-17章：NSArray&quot;&gt;&lt;a href=&quot;#OC-17章：NSArray&quot; class=&quot;headerlink&quot; title=&quot;OC-17章：NSArray&quot;&gt;&lt;/a&gt;OC-17章：NSArray&lt;/h2&gt;&lt;h3 id=&quot;NSArray&quot;&gt;&lt;a href=&quot;#NSArray&quot; class=&quot;headerlink&quot; title=&quot;NSArray&quot;&gt;&lt;/a&gt;NSArray&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;NSArray 也可以用&lt;strong&gt;字面量语法&lt;/strong&gt;来创建实例，数组的内容写在方括号，使用逗号分隔。eg:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *list = @[eleOne, eleTwo, eleTree];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;NSArray 创建的是&lt;strong&gt;静态数组&lt;/strong&gt;（static array），一旦 NSArray 实例被创建，就无法添加或删除数组里的指针，也无法改变数组的指针顺序。&lt;/li&gt;
&lt;li&gt;NSArray 中的指针是有序的，并可以通过相应索引来存取，索引从0开始。这一点和C语言类似。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;count&lt;/code&gt;方法会返回 NSArray 对象中所含指针的个数。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;遍历数组：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;标准方式&lt;/p&gt;
  &lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(init; condtion; step)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//操作数组元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OC的快速枚举&lt;/p&gt;
  &lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(variable &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; array) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//操作数组元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;旧式数组方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;还没有字面量语法的时候（用&lt;code&gt;@&lt;/code&gt;创建数组），只能用 &lt;code&gt;arrayWithObjects:&lt;/code&gt; 类方法来创建 NSArray 实例。eg:&lt;/p&gt;
  &lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *list = [&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; arrayWithObjects:eleOne, eleTwo, eleThree, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后的&lt;code&gt;nil&lt;/code&gt;告诉方法停止运行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;还没有下标语法的时候，一般使用&lt;code&gt;ObjectAtIndex&lt;/code&gt;来访问数组中的指针。eg:&lt;/p&gt;
  &lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;,[list objectAtIndex:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;NSMutableArray&quot;&gt;&lt;a href=&quot;#NSMutableArray&quot; class=&quot;headerlink&quot; title=&quot;NSMutableArray&quot;&gt;&lt;/a&gt;NSMutableArray&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;NSMutableArray 是 NSArray 的子类。&lt;/li&gt;
&lt;li&gt;NSMutableArray 创建的是&lt;strong&gt;动态数组&lt;/strong&gt;（dynamic array），和 NSArray 实例不同的是，它可以添加、删除或对指针重新进行排序。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;addObject:&lt;/code&gt;方法给 NSMutableArray 在尾部添加对象。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insertObject:atIndex:&lt;/code&gt;在指定位置添加对象。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;removeObjectAtIndex:&lt;/code&gt;删除数组中指定位置的对象，数组中的对象个数会随之减少。&lt;/li&gt;
&lt;li&gt;如果遍历数组时需要添加或删除指针，则需要使用标准的 for 循环。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt; 2016.3.6 23:10 更新&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;OC-18章：自定义类&quot;&gt;&lt;a href=&quot;#OC-18章：自定义类&quot; class=&quot;headerlink&quot; title=&quot;OC-18章：自定义类&quot;&gt;&lt;/a&gt;OC-18章：自定义类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;OC的头文件.h又称&lt;strong&gt;接口文件&lt;/strong&gt;（interface file），包含实例变量和方法的声明。OC的.m文件称为&lt;strong&gt;实现文件&lt;/strong&gt;（implementation file），包含所有方法的代码实现。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OC &lt;strong&gt;头文件&lt;/strong&gt; 以&lt;code&gt;@interface&lt;/code&gt;开始，以&lt;code&gt;@end&lt;/code&gt;结束。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在花括号&lt;code&gt;{}&lt;/code&gt;里声明实例变量，实例变量以下划线&lt;code&gt;_&lt;/code&gt;开始，后跟实例变量的名字。书上说明&lt;code&gt;_&lt;/code&gt;没有特别语法含义，仅仅是易于区分实例变量和局部变量。&lt;/li&gt;
&lt;li&gt;声明实例方法以减号&lt;code&gt;-&lt;/code&gt;开始（类方法以加号&lt;code&gt;+&lt;/code&gt;开始？），后面跟方法声明。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#import &lt;span class=&quot;title&quot;&gt;&amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ClassName&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;ExtendsClassName&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//声明实例变量 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; _stockNumber;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//声明方法，或者属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// - (返回类型)函数名:参数;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;)valueStock:(&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;)rate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;OC &lt;strong&gt;实现文件&lt;/strong&gt; 以&lt;code&gt;@implementation&lt;/code&gt;开始，以&lt;code&gt;@end&lt;/code&gt;结束。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#import &lt;span class=&quot;title&quot;&gt;&quot;ClassName.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ClassName&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//实现方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;)valueStock:(&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;)rate &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//code  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;存取方法（accessor method）：&lt;strong&gt;取方法&lt;/strong&gt;（getter method）用去掉下划线前缀的实例变量命名。&lt;strong&gt;存方法&lt;/strong&gt;（setter method）用set后跟去掉下划线前缀的实例变量命名，并且要遵循驼峰命名。eg：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;) setHeightInMeters:(&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;)h;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;包含头文件的区别：&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;包含系统头文件，&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;包含当前项目头文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;self&lt;/code&gt;是一个指针，指向当前对象。可以作为实参传递给其他方法。&lt;/li&gt;
&lt;li&gt;OC没有命名空间（namespace），所以为了避免同一个项目中名字冲突，推荐使用三个或者三个以上的字母最为类前缀。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;OC-19章：属性&quot;&gt;&lt;a href=&quot;#OC-19章：属性&quot; class=&quot;headerlink&quot; title=&quot;OC-19章：属性&quot;&gt;&lt;/a&gt;OC-19章：属性&lt;/h2&gt;&lt;p&gt;OC有一条便捷途径，可以简化存取方法的过程，该途径称为&lt;strong&gt;属性&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;声明属性：可以取而代之18章在花括号中声明实例变量，且声明属性不用写在花括号里，而是和声明方法在同一个级别。&lt;br&gt;声明属性以&lt;code&gt;@property&lt;/code&gt;开始，后跟属性的特性、类型和名称。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; heightInMeters;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;声明属性的优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;让头文件更简洁。&lt;/li&gt;
&lt;li&gt;减少代码输入。&lt;/li&gt;
&lt;li&gt;最重要的是，编译器会帮你声明和实现存取方法。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;属性的特性：属性的声明可以有一个或多个属性特性（property attributes），属性特性告诉编译器关于属性行为的更多信息，多个属性特性用逗号&lt;code&gt;,&lt;/code&gt;分隔。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;属性的特性分为&lt;strong&gt;原子性&lt;/strong&gt;（atomic）和&lt;strong&gt;非原子性&lt;/strong&gt;（nonatomic），默认为原子性。&lt;/li&gt;
&lt;li&gt;属性的另一种特性：&lt;ul&gt;
&lt;li&gt;readonly（只读）：只有取方法，没有存方法。&lt;/li&gt;
&lt;li&gt;readwrite（读写）：默认值，既有存方法，也有取方法。&lt;/li&gt;
&lt;li&gt;copy（可拷贝）：每当声明一个指向NSString或NSArray的对象的属性时，都需要设置copy属性。&lt;/li&gt;
&lt;li&gt;还有更多……&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;点号调用存取方法：dot notation 是苹果公司提供的一种快捷调用存取方法的语法。它和获取结构体成员方法一样，但是不同之处在于，使用 dot notation 实际是在发送消息。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//下面的代码对于属性的存取是等价的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;object&lt;span class=&quot;variable&quot;&gt;.var&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[object setVar:&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;//setVar是编译生成的存方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;测试发现，也可以用点号调用其他非存取方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;OC-20章：继承&quot;&gt;&lt;a href=&quot;#OC-20章：继承&quot; class=&quot;headerlink&quot; title=&quot;OC-20章：继承&quot;&gt;&lt;/a&gt;OC-20章：继承&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;本书所有对象（无论间接的还是直接的）都继承自NSObject。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ClassName&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当有属性指向某个对象的时候，需要对内存进行管理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;子类的实例可以毫无疑问的代替父类的实例，因为它继承了父类的所有东西。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;覆盖方法&lt;/strong&gt;：覆盖方法只能改变方法的实现，而无法改变它的声明方式，方法名称、返回类型以及实参类型都必须保持相同。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;子类可以利用父类的实现，而不是完全替换，不过需要用到 &lt;strong&gt;super&lt;/strong&gt; 指令。super 的含义是：运行指定的方法，但是从对象的父类开始查找与之匹配的实现。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//在实现方法代码中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; parentClassMethod]; &lt;span class=&quot;comment&quot;&gt;//运行父类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;NSObject 虽然拥有很多方法，但是只有一个实例变量： &lt;strong&gt;isa&lt;/strong&gt; 指针。任何一个对象的 isa 指针都指向创建该对象的类.&lt;/li&gt;
&lt;li&gt;给对象发送消息的时候，对象就会查询是否有该消息名的方法。搜索会通过 isa 指针找到该对象的类并查询，如果没有匹配该消息名的方法，如果没有，就会继续查询它的父类。依次类推，对象会沿着继承链向上查询，直到找到匹配消息名的方法，或者到达继承链的顶端（NSObject）为止，如果还是没找到，就报错。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;%@&lt;/code&gt; 和 &lt;strong&gt;description&lt;/strong&gt; 方法的转换：处理&lt;code&gt;%@&lt;/code&gt;时，程序会先向相应的指针变量所指的对象发送 description 消息，description 方法会返回一个描述类实例的字符串。description 是一个NSObject方法，所以所有对象都有这个方法，类可以覆盖 description 方法来定义类实例的描述。eg:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)description &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;...&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt; 2016.3.9 22:50 更新&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;OC-21章：对象实例变量及属性&quot;&gt;&lt;a href=&quot;#OC-21章：对象实例变量及属性&quot; class=&quot;headerlink&quot; title=&quot;OC-21章：对象实例变量及属性&quot;&gt;&lt;/a&gt;OC-21章：对象实例变量及属性&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;对象实例变量的三种常见用途：&lt;ul&gt;
&lt;li&gt;对象属性：指向某个单一的、代表某个值的对象，如NSString对象。&lt;/li&gt;
&lt;li&gt;一对一关系：指向单个复杂对象的指针。&lt;/li&gt;
&lt;li&gt;一对多关系：指向某个collection类的实例的指针。如NSMutableArray实例。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;任何一个对象不会在其内部保存其他对象，而只会在内部保存相应对象的地址。与“包含其他对象”相比，这样会产生两大副作用。&lt;ul&gt;
&lt;li&gt;单个对象可能会扮演多个角色。&lt;/li&gt;
&lt;li&gt;导致产生大量独立的对象，耗尽程序的可用内存。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;为了解决上个问题的副作用，OC提出了&lt;strong&gt;对象所有权&lt;/strong&gt;（object owership）概念，当A对象拥有某个对象实例变量B时，称A拥有了B指向的对象。当某个对象的拥有方个数为0时，可以判定程序不再需要该对象，从而释放该对象。&lt;/li&gt;
&lt;li&gt;有一个NSObject方法：&lt;strong&gt;dealloc&lt;/strong&gt;，如果类覆盖了该方法，那么当类的实例被释放时，就会执行dealloc方法。&lt;/li&gt;
&lt;li&gt;一对多关系是由collection对象（如数组）和其包含的对象组成的。&lt;ul&gt;
&lt;li&gt;当在collection对象中加入某个对象的时，会在collection对象中保存指向该对象的指针，并成为该对象的拥有方。&lt;/li&gt;
&lt;li&gt;当从collection中移除某个对象时，会删除指向该对象的指针，并不再是该对象的拥有方。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;@class ClassName&lt;/code&gt;引用某个头文件时，和&lt;code&gt;#import&lt;/code&gt;不同的是，编译器不会查看文件的全部内容，因此处理速度更快，这样是因为编译器不需要知道实现细节就能处理文件中的所有声明了。&lt;/li&gt;
&lt;li&gt;创建collection对象的时机有两个：&lt;ul&gt;
&lt;li&gt;创建本地对象时。&lt;/li&gt;
&lt;li&gt;需要使用相应collection对象时（延迟创建机制）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果程序有用不到的但有没有释放的对象，就称程序有内存泄露（memory leak）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;OC-22章：类扩展&quot;&gt;&lt;a href=&quot;#OC-22章：类扩展&quot; class=&quot;headerlink&quot; title=&quot;OC-22章：类扩展&quot;&gt;&lt;/a&gt;OC-22章：类扩展&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;涉及实现细节的属性或方法最好在&lt;strong&gt;类扩展&lt;/strong&gt;（class extension）中声明，类扩展是一组私有的声明，只有类和该类的实例才能使用在类扩展中声明的属性、实例变量或方法。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通常，类扩展是添加在类实现文件中的，并且是位于&lt;code&gt;@implementation&lt;/code&gt;之上的，并且和头文件中一样要用&lt;code&gt;@interface ... @end&lt;/code&gt;包起来，但是类名字后面是跟一对括号&lt;code&gt;()&lt;/code&gt;，声明方法都一样。eg：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ClassName&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//...类扩展声明内容放在这里...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ClassName&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//...原来实现方法的代码...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可用类扩展&lt;strong&gt;隐藏可变属性&lt;/strong&gt;。比如 NSMutableArray。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;子类无法获取父类的类扩展。&lt;/li&gt;
&lt;li&gt;&lt;u&gt;在类的头文件中声明属性的时候，其他对象只能看到属性的存取方法，对象（包括子类）无法直接获取属性声明生成的实例变量。&lt;/u&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt; 2016.3.10 22:05 更新&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;OC-23章：避免内存泄露&quot;&gt;&lt;a href=&quot;#OC-23章：避免内存泄露&quot; class=&quot;headerlink&quot; title=&quot;OC-23章：避免内存泄露&quot;&gt;&lt;/a&gt;OC-23章：避免内存泄露&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;“互相拥有”的所有权关系导致相关的对象都无法被释放。这种情况称为&lt;strong&gt;强引用循环&lt;/strong&gt;（strong reference cycle），强引用循环是导致内存泄露的常见原因。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过 &lt;strong&gt;弱引用&lt;/strong&gt; （weak reference）可以解决强引用循环问题。在声明属性的时候在特性中采用&lt;strong&gt;weak&lt;/strong&gt;关键字，eg：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt;) Object *pointer;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果需要明确的将指针变量声明为弱引用，则可以标注&lt;strong&gt;__weak&lt;/strong&gt;，eg：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;__&lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt; Object *pointer;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;为了避免强引用循环，通常需要遵守此规则：父对象拥有子对象，但是子对象不拥有父对象。&lt;/li&gt;
&lt;li&gt;弱引用有自动置0特性，当某个由弱引用指向的对象被释放时，相应的指针变量会被&lt;strong&gt;归零&lt;/strong&gt;（zeroed），即赋为nil。&lt;/li&gt;
&lt;li&gt;总结：强引用会保留对象的拥有方，使其不被释放。而弱引用则不会保留，因此标为弱引用的实例变量与属性指向的对象可能会消失。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在没有ARC之前，都是采用手动引用计数：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Code block&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[anObject retain]; &lt;span class=&quot;comment&quot;&gt;//获取anObject的拥有权&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[anObject release]; &lt;span class=&quot;comment&quot;&gt;//释放anObject的拥有权&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[anObject autorelease]; &lt;span class=&quot;comment&quot;&gt;//自动释放anObject的拥有权，自动一般在autorelease池（对象）被排干（drain）的时候；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Another code block  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//手动创建autorelease池&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSAutoreleasePool&lt;/span&gt; *arp = [[&lt;span class=&quot;built_in&quot;&gt;NSAutoreleasePool&lt;/span&gt; alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//coding here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[arp drain] &lt;span class=&quot;comment&quot;&gt;//排干autorelease池&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//--------------&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Objective-c加入ARC，也加入了用于创建autorelease池的新语法。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@autoreleasepool&lt;/span&gt; &amp;#123; &lt;span class=&quot;comment&quot;&gt;//创建autorelease池（对象）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// coding here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;comment&quot;&gt;//autorelease池已经被排空&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;理解内存管理的技巧“从局部的角度，以分类为分界”。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;OC-24章：Collection-类&quot;&gt;&lt;a href=&quot;#OC-24章：Collection-类&quot; class=&quot;headerlink&quot; title=&quot;OC-24章：Collection 类&quot;&gt;&lt;/a&gt;OC-24章：Collection 类&lt;/h2&gt;&lt;h3 id=&quot;NSSet-NSMutable（集合）&quot;&gt;&lt;a href=&quot;#NSSet-NSMutable（集合）&quot; class=&quot;headerlink&quot; title=&quot;NSSet/NSMutable（集合）&quot;&gt;&lt;/a&gt;NSSet/NSMutable（集合）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;NSSet对象所包含的内容是无序的，而且在NSset对象那个中，某个对象只能出现一次。&lt;/li&gt;
&lt;li&gt;NSset对象的最大用处就是检查某个对象是否存在。&lt;/li&gt;
&lt;li&gt;NSset对象也分为可对指针进行修改和不可对指针进行修改两类：NSSet对象是不能对指针进行修改的，对象创建好后就不能对其中的指针进行添加或删除等操作，而NSMutableSet是它的子类，它是动态可变的。&lt;/li&gt;
&lt;li&gt;NSset对象中的对象是无序的，所以不能通过索引来访问。&lt;/li&gt;
&lt;li&gt;如果程序要检查某两个对象是否相等，可以用NSObject类中的&lt;strong&gt;isEqual:&lt;/strong&gt;方法。&lt;/li&gt;
&lt;li&gt;相同的变量一定是相等的，而相等的变量不一定相同。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;NSDictionary-NSMutableDictionary-字典&quot;&gt;&lt;a href=&quot;#NSDictionary-NSMutableDictionary-字典&quot; class=&quot;headerlink&quot; title=&quot;NSDictionary/NSMutableDictionary(字典)&quot;&gt;&lt;/a&gt;NSDictionary/NSMutableDictionary(字典)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;NSDictionary是一组&lt;strong&gt;键-值对&lt;/strong&gt;（key-value pair）集合，键通常是字符串，值可以是任意类型的对象。字典对象中的键都是独一无二的，字典对象所保存的键-值对是无序的。字典的字面量语法由&lt;code&gt;@&lt;/code&gt;和&lt;code&gt;{}&lt;/code&gt;组成，键值对之间用逗号&lt;code&gt;,&lt;/code&gt;分割。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//创建字典&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *dic = @&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;string&quot;&gt;@&quot;key-1&quot;&lt;/span&gt; : @&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//值是数字对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;string&quot;&gt;@&quot;key-2&quot;&lt;/span&gt; : @[&lt;span class=&quot;string&quot;&gt;@&quot;Lua&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;xiba&quot;&lt;/span&gt;], &lt;span class=&quot;comment&quot;&gt;//值是数组对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;string&quot;&gt;@&quot;key-3&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;@&quot;abc&quot;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//值是字符串对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//从字典取值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dic[&lt;span class=&quot;string&quot;&gt;@&quot;key-2&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//还没引入下标的用法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[dic setObject:&lt;span class=&quot;string&quot;&gt;&quot;key-x&quot;&lt;/span&gt; fouKey:&lt;span class=&quot;string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;//添加字典对象那个&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[dic objectForKey:&lt;span class=&quot;string&quot;&gt;@&quot;key-x&quot;&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;//从字典取值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;不可修改对象&quot;&gt;&lt;a href=&quot;#不可修改对象&quot; class=&quot;headerlink&quot; title=&quot;不可修改对象&quot;&gt;&lt;/a&gt;不可修改对象&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;问：前面讲的 collection 都有不可更改和可更改的，那么为什么要提供不能修改的 collection 呢？&lt;br&gt;答：使用不能修改的 collection 可以节约内存提高性能，因为它永远无法拷贝。而对于可修改对象，则可能发生这样一种情况：程序中的其它代码可能在你使用这个对象时修改这个对象的内容。为了避免这种情况，就需要复制一份私有拷贝。而每个程序的代码都有可能做一份私有拷贝，这样就有可能会有多份一样的对象拷贝。&lt;/p&gt;
&lt;p&gt;比如 NSArray 的 copy 方法实际上不会做任何额外的操作，仅仅返回指向自身的指针而已。而 NSMutableArray 的 copy 方法则会制作一份自己的拷贝，并返回指向新数组的对象的指针。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;很多类都有不可修改对象，这些类都有可修改的子类（一般在中间加入Mutable），&lt;u&gt;但是 &lt;strong&gt;NSDate&lt;/strong&gt; 和 &lt;strong&gt;NSDate&lt;/strong&gt; 只有不可修改的版本&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;数组排序&quot;&gt;&lt;a href=&quot;#数组排序&quot; class=&quot;headerlink&quot; title=&quot;数组排序&quot;&gt;&lt;/a&gt;数组排序&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;不可修改的数组不能排序。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;排序描述对象&lt;/strong&gt;（sort descriptor）包含两个信息：一个是数组中的对象的属性名，而是根据该属性是要升序（ascending）还是降序（descending）。eg:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSSortDescriptor&lt;/span&gt; *desc = [&lt;span class=&quot;built_in&quot;&gt;NSSortDescriptor&lt;/span&gt; sordDescriptorWithKey: &lt;span class=&quot;string&quot;&gt;@&quot;key&quot;&lt;/span&gt; ascending:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;//key可以是方法名，也可以是实例变量或属性的名字。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[mutableList sortUsingDescriptors: @[desc]];&lt;span class=&quot;comment&quot;&gt;//将mutableList数组按照descriptor排序后，结果依然放在mutableList中。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;过滤&quot;&gt;&lt;a href=&quot;#过滤&quot; class=&quot;headerlink&quot; title=&quot;过滤&quot;&gt;&lt;/a&gt;过滤&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对collection进行过滤的时候，程序将对collection对象和一条逻辑语句进行比较，得到一个合成的collection，这个collection包含满足这条语句的对象：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSPredicate&lt;/span&gt; *predicate = [&lt;span class=&quot;built_in&quot;&gt;NSPredicate&lt;/span&gt; predicateWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;value &amp;gt; 70&quot;&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;//设置过滤条件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *result = [list filteredArrayUsingPredicate:predicate]; &lt;span class=&quot;comment&quot;&gt;//过滤&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Predicate对象的条件语句可以支持非常复杂的格式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;collection-注意事项&quot;&gt;&lt;a href=&quot;#collection-注意事项&quot; class=&quot;headerlink&quot; title=&quot;collection 注意事项&quot;&gt;&lt;/a&gt;collection 注意事项&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;向collection对象加入某个对象时，collection对象会成为该对象的拥有方，如果从collection对象中移除该对象，collection对象就不再是该对象的拥有方了。&lt;/li&gt;
&lt;li&gt;本章节提到的collection只能保存对象，如果要保存C语言的基本类型，可以创建相应的对象进行封装。NSValue 实例可以用来保存任意的数量值。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;本章节提到的collection对象都不能保存 nil ，如果要将“空”加入collection对象，则可以使用NSNull类，它只有一个实例，代表“空”。eg:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[collection addObject:[&lt;span class=&quot;built_in&quot;&gt;NSNull&lt;/span&gt; null]];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;OC-25章：常量&quot;&gt;&lt;a href=&quot;#OC-25章：常量&quot; class=&quot;headerlink&quot; title=&quot;OC-25章：常量&quot;&gt;&lt;/a&gt;OC-25章：常量&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;将代码中不变的值称为&lt;strong&gt;常量&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;OC中可以通过 &lt;strong&gt;#define&lt;/strong&gt; 和 &lt;strong&gt;全局变量&lt;/strong&gt; 来定义常量。&lt;/li&gt;
&lt;li&gt;在OC中π的常量是&lt;code&gt;M_PI&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;通过 #define，不仅可以替换代码中某个特定值，还可以构建类似函数的代码段，称为&lt;strong&gt;宏&lt;/strong&gt;（macro）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NSLocale&lt;/strong&gt; 实例可以保存针对不同地理位置的相关信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;extern&lt;/strong&gt; 关键字导入其他文件中的定义。&lt;/li&gt;
&lt;li&gt;苹果引入了一种新的enum声明语法：&lt;strong&gt;NS_ENUM()&lt;/strong&gt;，它有两个参数，分别是数据类型和名字。&lt;/li&gt;
&lt;li&gt;在 #define 和 全局变量 中&lt;u&gt;更倾向于&lt;/u&gt;使用全局变量来定义常量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;OC-26章：NSString和NSData写入文件&quot;&gt;&lt;a href=&quot;#OC-26章：NSString和NSData写入文件&quot; class=&quot;headerlink&quot; title=&quot;OC-26章：NSString和NSData写入文件&quot;&gt;&lt;/a&gt;OC-26章：NSString和NSData写入文件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;将NSString对象写入文件&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSMutableString&lt;/span&gt; *str = &lt;span class=&quot;string&quot;&gt;@&quot;Hello world!\n&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *error=&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//用于处理错误的参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; success = [str writeToFile:&lt;span class=&quot;string&quot;&gt;@&quot;/tmp/test.txt atomiclly:YES encoding:NSUTF8StringEncoding error:&amp;amp;error&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!success) &amp;#123;&lt;span class=&quot;comment&quot;&gt;//写入文件失败&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;, [error localizedDescription]); &lt;span class=&quot;comment&quot;&gt;//输出时要格式化错误信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//否则写入成功&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;Success!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;将文件读入NSString对象&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *error=&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *str = [[&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; alloc] initWithContentsOfFile:&lt;span class=&quot;string&quot;&gt;@&quot;/tmp/test.txt&quot;&lt;/span&gt; encoding:&lt;span class=&quot;built_in&quot;&gt;NSASCIIStringEncoding&lt;/span&gt; error:&amp;amp;error];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!str) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;//读取失败&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;//读取成功 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;将NSData对象写入文件&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *error=&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSURL&lt;/span&gt; *url = [&lt;span class=&quot;built_in&quot;&gt;NSURL&lt;/span&gt; URLWithString:&lt;span class=&quot;string&quot;&gt;@&quot;http://google.com/images/logo/ps_logo.png&quot;&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;//给一个有效图片地址就行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSURLRequest&lt;/span&gt; *request = [&lt;span class=&quot;built_in&quot;&gt;NSURLRequest&lt;/span&gt; requestWithURL:url];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSData&lt;/span&gt; *data = [&lt;span class=&quot;built_in&quot;&gt;NSURLCollection&lt;/span&gt; sentSynchronousRequest:request returningResponse:&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; error:&amp;amp;error];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!data) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//读取失败&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//读取成功&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;读取文件存入NSData对象&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSData&lt;/span&gt; *readData = [&lt;span class=&quot;built_in&quot;&gt;NSData&lt;/span&gt; dataWithContentOffile:&lt;span class=&quot;string&quot;&gt;@&quot;/tmp/test.txt&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;寻找特别目录：苹果公司创建了一个函数告诉你正确的目录&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *deskTop = &lt;span class=&quot;built_in&quot;&gt;NSSearchPathForDirectoriesInDomains&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;NSDesktopDirectory&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;NSUserDomainMask&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//NSDesktopDirectory是桌面目录，还有其他目录常量可以查看文档&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt; 2016.3.17 16:15 更新&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;OC-27章：回调&quot;&gt;&lt;a href=&quot;#OC-27章：回调&quot; class=&quot;headerlink&quot; title=&quot;OC-27章：回调&quot;&gt;&lt;/a&gt;OC-27章：回调&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;回调&lt;/strong&gt; （callback）就是将一段可执行的代码和一个特定的事件绑定起来，当特定的事件发生时，就会执行这段代码。在OC中，有四种可实现回调的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目标-动作对&lt;/strong&gt;：在程序开始等待前，要求“当事件发生时，向指定的对象发送某个特定的消息”。这里接收消息的对象是目标（target），消息的选择器（selector）是动作（action）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;辅助对象&lt;/strong&gt;：在程序开始等待前，要求“当事件发生时，向遵守相应协议的辅助对象发送消息”，&lt;strong&gt;委托对象&lt;/strong&gt;（delegate）和&lt;strong&gt;数据源&lt;/strong&gt;（data source）是常见的辅助对象。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通知&lt;/strong&gt;（notification）：苹果提供了一种称为通知中心的对象。在程序开始等待前，告知通知中心“某个对象正在等待某些特定的通知，当其中某个通知出现时，向指定的对象发送特定的消息”。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Block对象&lt;/strong&gt;：Block 是一段可执行的代码。当程序开始等待前，声明一个Block对象，当事件发生时，执行这段Block对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;事件驱动的程序需要有一个对象，专门等待事件的发生。NSRunLoop实例会在特定的事件发生时触发回调。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@selector&lt;/code&gt;语句用来传递动作消息的名称给相应方法。&lt;/li&gt;
&lt;li&gt;可以在声明一个变量前使用&lt;code&gt;__unused&lt;/code&gt;修饰符标记，消除编译器“变量未使用”警告。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NSURLConnection&lt;/code&gt;在异步模式时，不会一次性发送全部数据，他会发送块状的数据，并多次发送。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协议&lt;/strong&gt;（protocol）是一系列方法声明，辅助对象可以根据协议实现相应方法&lt;/li&gt;
&lt;li&gt;如何选择除了 Block 外的三种回调方法：&lt;ul&gt;
&lt;li&gt;对于只做一件事情的对象，使用目标-动作对。&lt;/li&gt;
&lt;li&gt;对于功能更复杂的对象，使用辅助对象。&lt;/li&gt;
&lt;li&gt;对于要触发多个回调的对象，使用通知。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建的对象拥有一个指向回调对象的指针，而这个回调对象的指针指向你创建的对象。就陷入了一个强引用循环，这两个对象都无法释放。所以编写回调代码时，应该遵循以下规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;通知中心不拥有观察者&lt;/strong&gt;。如果将某个对象注册为观察者，那么通常应该在释放该对象将其移出通知中心。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对象不拥有委托对象或数据源对象&lt;/strong&gt;。如果某个新创建的对象是另一个对象的委托对象或数据源对象，那么该对象应该在其&lt;code&gt;dealloc&lt;/code&gt;方法中取消相应的关联。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对象不拥有目标&lt;/strong&gt;。如果新创建的对象是另一个对象的目标，那么该对象应该在其&lt;code&gt;dealloc&lt;/code&gt;方法中取消相应的关联。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果使用方法的实际名称进行查询，那么查询速度会很慢，为了提速，编译器会为了每个其解除过的方法附上一个唯一的数字。这个数字称为选择器，通过编译指令&lt;code&gt;@selector&lt;/code&gt;可以得到与方法名相对应的选择器。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;OC-28章：Block对象&quot;&gt;&lt;a href=&quot;#OC-28章：Block对象&quot; class=&quot;headerlink&quot; title=&quot;OC-28章：Block对象&quot;&gt;&lt;/a&gt;OC-28章：Block对象&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;^&lt;/code&gt;开始表示这段代码是一个 Block 对象。Block 对象也可以有实参和返回值。&lt;/li&gt;
&lt;li&gt;Block 对象可以被当成一个实参来传递给可以接收 block 的方法。&lt;/li&gt;
&lt;li&gt;声明一个 Block 时，要参考要使用该 Block 对象的方法期望的 Block 类型。&lt;/li&gt;
&lt;li&gt;对于有返回值的 Block 对象，可以像调用函数那样调用 Block 对象，然后使用其返回值。&lt;/li&gt;
&lt;li&gt;匿名 Block 对象是可以传递给方法的 Block 对象的，而不需要先赋值给变量。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当在 Block 中使用在 Block 对象外声明的变量（外部变量）时，相应的 Block 对象会捕获这些变量。&lt;/p&gt;
&lt;p&gt;对基本类型的变量，捕获意味着程序会拷贝变量的值，并用 Block 对象中的局部变量保存。对指针类型的变量， Block 对象会使用强引用，这意味着凡是 Block 对象使用到的对象，都会被保留，所以在相应的 Block 对象被释放前，这些对象一定不会被释放（这也是block对象和函数的区别，函数无法做到）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在 Block 对象中捕获的外部变量是常数，程序无法修改变量所保存的值。如果需要在 Block 对象中修改某个外部变量，则可以在声明外部变量前，加上&lt;code&gt;__block&lt;/code&gt;关键字。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;__block &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; count=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;^&amp;#123; count++; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在 Block 对象中使用&lt;code&gt;self&lt;/code&gt;时，又会陷入强引用循环，为了打破它，可以在 Block 对象外声明一个&lt;code&gt;__weak&lt;/code&gt;指针，然后指向 Block 对象中要使用的 &lt;code&gt;self&lt;/code&gt;，然后在 Block对象中使用新的指针。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;__&lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt; Object *weakself = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//弱引用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myBlock = ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;Object: %@&quot;&lt;/span&gt;, weakself);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然而是由于是弱引用，&lt;code&gt;self&lt;/code&gt;指向的对象有可能在运行时被释放。可以在 Block 对象中创建一个对&lt;code&gt;self&lt;/code&gt;的局部强引用。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;__&lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt; Object *weakself = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//弱引用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myBlock = ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Object *innerSelf = weakself; &lt;span class=&quot;comment&quot;&gt;//局部强引用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;Object: %@&quot;&lt;/span&gt;, innerSelf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果直接在 Block 对象中使用实例变量，那么 Block 对象会捕获 &lt;code&gt;self&lt;/code&gt;，而不会捕获实例变量。这样又会陷入强引用循环，所以不要直接存取实例变量，尽量使用存取方法。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;__&lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt; Object *weakself = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//弱引用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myBlock = ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Object *innerSelf = weakself; &lt;span class=&quot;comment&quot;&gt;//局部强引用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;Object: %@&quot;&lt;/span&gt;, innerSelf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;value is %@&quot;&lt;/span&gt;, _value); &lt;span class=&quot;comment&quot;&gt;//不推荐：Block 对象会捕获self&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;value is %@&quot;&lt;/span&gt;, innerSelf&lt;span class=&quot;variable&quot;&gt;.value&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;// 推荐使用存取方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;OC-29章：协议&quot;&gt;&lt;a href=&quot;#OC-29章：协议&quot; class=&quot;headerlink&quot; title=&quot;OC-29章：协议&quot;&gt;&lt;/a&gt;OC-29章：协议&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;协议可以为一个对象指定角色。&lt;/li&gt;
&lt;li&gt;协议是一组方法声明，一些是必须的，一些是可选的。如果要某个对象扮演特定的角色，就一定要实现必须的方法，选择实现可选方法。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在创建要遵守某个协议的新类时，要在头文件中进行说明，eg：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TerrificView&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;UIViewController&lt;/span&gt; &amp;lt;&lt;span class=&quot;title&quot;&gt;ProtocolName&lt;/span&gt;，&lt;span class=&quot;title&quot;&gt;ProtocolName&lt;/span&gt;&amp;gt; //该类继承自&lt;span class=&quot;title&quot;&gt;UIViewController&lt;/span&gt;类，并且遵守尖括号中列举的协议，多个协议用逗号隔开&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果给一个对象发送消息，而这个对象没有相应的方法，程序会崩溃。如果在遵守某协议的类中没有实现某个可选方法，也是如此。为了避免这种情况，可以使用&lt;code&gt;respondsToSelector:&lt;/code&gt;询问对象是否实现了某个方法，该方法在&lt;code&gt;NSObject&lt;/code&gt;中实现了，返回值是&lt;code&gt;BOOL&lt;/code&gt;型。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([_data respondsToSelector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(totalValue)]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [_data totalValue];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;OC-30章：Proper-List-格式&quot;&gt;&lt;a href=&quot;#OC-30章：Proper-List-格式&quot; class=&quot;headerlink&quot; title=&quot;OC-30章：Proper List 格式&quot;&gt;&lt;/a&gt;OC-30章：Proper List 格式&lt;/h2&gt;&lt;p&gt;一个NSArray里面放上N个NSDictionary就组成了P-List格式，再输出到后缀&lt;code&gt;.plist&lt;/code&gt;的文件中即可，好像没什么重点……&lt;/p&gt;
&lt;p&gt;——— 结束de分割线 ———&lt;/p&gt;
&lt;p&gt;到今天为止，Objective-C基础部分就学习结束了，这篇笔记也更新结束了，因为中途情绪比较低落，看书容易走神，所以速度还是有点慢。希望后面能好起来。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;p&gt;从2.29号开始看 BigNerd 出版的《Objective-C编程》，花了两天时间将 C 语言部分温习了一遍，由于我是计算机专业的毕业生，所以 
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Objective-C" scheme="http://archmee.github.io/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://archmee.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>故乡</title>
    <link href="http://archmee.github.io/201602/a-lais-home.html"/>
    <id>http://archmee.github.io/201602/a-lais-home.html</id>
    <published>2016-02-27T17:00:38.000Z</published>
    <updated>2016-06-29T06:42:37.000Z</updated>
    
    <content type="html">&lt;center&gt;&lt;br&gt;—— &lt;em&gt;阿来&lt;/em&gt;&lt;br&gt;&lt;br&gt;我现在坐在群山之巅&lt;br&gt;我把头埋在双膝之间&lt;br&gt;感到风，像时光的水流&lt;br&gt;漫过我的脊梁&lt;br&gt;河流轰鸣，道路回转&lt;br&gt;现在我要独自一人&lt;br&gt;任群山的波涛把我充满&lt;br&gt;任大地重新向我涌来&lt;br&gt;&lt;br&gt;今天我又穿过了十二个村庄&lt;br&gt;接下来我还要穿过一百多个村庄&lt;br&gt;而所有这些栽培着这些&lt;br&gt;玉米  小麦  苹果  梨的村庄&lt;br&gt;放牧着牛羊的村庄——&lt;br&gt;都跟我出生的村子一模一样&lt;br&gt;&lt;br&gt;有一座水磨坊，有一所小学堂&lt;br&gt;晴天的早上&lt;br&gt;小学堂的钟声叮当作响&lt;br&gt;所有这一切&lt;br&gt;都跟我出生的那个村子一模一样&lt;br&gt;所以你们这些所有的村子&lt;br&gt;你们都是我的故乡&lt;br&gt;&lt;br&gt;&lt;/center&gt;


&lt;blockquote&gt;
&lt;p&gt;2016.2.24 摘自 &lt;a href=&quot;http://tv.cntv.cn/video/VSET100173543987/d250c6328bdd4cab9feeed410382c2aa&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《开讲啦》第20160205期&lt;/a&gt; 14分20秒处，作者阿来写于香烟盒子上的一首诗，无名，我暂取名为故乡。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;br&gt;—— &lt;em&gt;阿来&lt;/em&gt;&lt;br&gt;&lt;br&gt;我现在坐在群山之巅&lt;br&gt;我把头埋在双膝之间&lt;br&gt;感到风，像时光的水流&lt;br&gt;漫过我的脊梁&lt;br&gt;河流轰鸣，道路回转&lt;br&gt;现在我要独自一人&lt;br&gt;任群山的波涛把我充满&lt;br&gt;任大地重新向我涌来&lt;br&gt;&lt;br&gt;
    
    </summary>
    
      <category term="life" scheme="http://archmee.github.io/categories/life/"/>
    
    
      <category term="摘抄" scheme="http://archmee.github.io/tags/%E6%91%98%E6%8A%84/"/>
    
      <category term="诗" scheme="http://archmee.github.io/tags/%E8%AF%97/"/>
    
  </entry>
  
  <entry>
    <title>Github + Hexo 三步曲</title>
    <link href="http://archmee.github.io/201602/github-and-hexo-three-steps.html"/>
    <id>http://archmee.github.io/201602/github-and-hexo-three-steps.html</id>
    <published>2016-02-26T21:24:25.000Z</published>
    <updated>2016-05-31T15:31:04.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;序曲&quot;&gt;&lt;a href=&quot;#序曲&quot; class=&quot;headerlink&quot; title=&quot;序曲&quot;&gt;&lt;/a&gt;序曲&lt;/h3&gt;&lt;p&gt;之前有过一次搭建博客的经历，当时购买了自己的第一个 .COM 域名，并用 Wordpress 挂在了同学的服务器上，一年下来只写了有寥寥几篇博客，虽然都还算认真写的，但写作动力不足，最后域名过期便无疾而终了，想来还因为 Wordpress 太慢，且臃肿难用，二来每次在网页上写文章很不方便，一旦网页挂掉就 Game Over 了，Evernote 和有道笔记用过之后也不是很满意，一个太慢，一个除了慢而且长得丑（每次都要登陆登陆，登陆你个大头鬼啊，你知不知道我每次都是写的本地笔记本啊，而且最近每用一次必崩溃一次），两者功能都太多，我现在只偶尔用 Evernote 的剪藏功能来收藏网页。&lt;/p&gt;
&lt;p&gt;其余，我想有一个能记录想法或笔记的工具，随时能用，并且有一个展示的地方，仅此而已。本来也可以写在Lofter、新浪博客、点点等博客平台上，但是总感觉不够『独立』，尤其在用了 Markdown 之后，更被 Markdown 的简洁优雅所吸引。最最重要的是我最近要开始学习 iOS 开发，到时会记录一些学习笔记和总结在这里，因为我发现很多大牛都有在博客上记录总结的习惯。与此同时还可以好好用下 Git 和 Github，综上，才有了我的新博客。&lt;/p&gt;
&lt;p&gt;So，Let’s start！&lt;/p&gt;
&lt;h3 id=&quot;第一步：准备工作&quot;&gt;&lt;a href=&quot;#第一步：准备工作&quot; class=&quot;headerlink&quot; title=&quot;第一步：准备工作&quot;&gt;&lt;/a&gt;第一步：准备工作&lt;/h3&gt;&lt;p&gt;首先，你要：&lt;/p&gt;
&lt;h4 id=&quot;1-注册-GitHub&quot;&gt;&lt;a href=&quot;#1-注册-GitHub&quot; class=&quot;headerlink&quot; title=&quot;1. 注册 GitHub&quot;&gt;&lt;/a&gt;1. 注册 GitHub&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://www.github.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;GitHub&lt;/strong&gt;&lt;/a&gt; 是我们放博客的地方，它是开源世界的一个代码仓库，甚至可以毫不夸张地说是它推动了开源运动的发展，同时它也是世界上最大的同性交友社区，咳咳——严肃点！&lt;/p&gt;
&lt;h4 id=&quot;2-学习Markdown&quot;&gt;&lt;a href=&quot;#2-学习Markdown&quot; class=&quot;headerlink&quot; title=&quot;2. 学习Markdown&quot;&gt;&lt;/a&gt;2. 学习Markdown&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://wowubuntu.com/markdown/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;Markdown&lt;/strong&gt;&lt;/a&gt; 简洁优雅的语法让人可以专注于写作，越来越多的网站和作者都在使用和支持 Markdown，当然你最好找一个支持         Markdown 的编辑器。我在用的是 Evernote 的『&lt;a href=&quot;http://maxiang.info&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;马克飞象&lt;/a&gt;』，有网页版和 Chrome 插件，可以绑定Evernote账号同步，支持离线写作。因为我只需要一个编辑器，而且写完后会发布到博客，所以并没有绑定账号。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;如果使用马克飞象没有绑定账号的话，不管是网页版还是插件版估计都会有缓存容量限制，而且文章多了会影响打开时的加载速度，所以记得写完后即使清理以前的文章。&lt;/li&gt;
&lt;li&gt;其实绑定账号后，文章都被同步到 Evernote，这样就不用考虑博客的备份问题了，是吧？&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;第二步：安装软件&quot;&gt;&lt;a href=&quot;#第二步：安装软件&quot; class=&quot;headerlink&quot; title=&quot;第二步：安装软件&quot;&gt;&lt;/a&gt;第二步：安装软件&lt;/h3&gt;&lt;h4 id=&quot;1-安装Git&quot;&gt;&lt;a href=&quot;#1-安装Git&quot; class=&quot;headerlink&quot; title=&quot;1. 安装Git&quot;&gt;&lt;/a&gt;1. 安装Git&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://git-scm.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;Git&lt;/strong&gt;&lt;/a&gt; 是一个非常流行的分布式版本控制工具，全世界的搬砖工人、射击师都在用它，据不完全统计，这些人手拉手可以绕地球……多少圈来着，还没人统计过，估计因为人太多了！！！关于 Git 到底是什么以及可以用来干什么，请自行搜索。关于 Git 的使用，甚至可以用一整本书来讲解，因为它太复杂了，但是不用担心，我们只需要学会它简单的几条命令的就可以了，这里有份 &lt;a href=&quot;http://www.bootcss.com/p/git-guide/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git 简易指南&lt;/a&gt;，它对于我们的使用已经足够，甚至你连这份这份简易指南也可以不用看，后面我们会提到。但是如果你想深入学习 Git 的话，这里有官方的 &lt;a href=&quot;http://git-scm.com/book/en/v2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pro Git 英文版&lt;/a&gt; 和 &lt;a href=&quot;http://git-scm.com/book/zh/v2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pro Git 中文版&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;关于 Git 客户端的选择，我只讨论 Windows，我之前用过一段时间使用过 &lt;a href=&quot;https://desktop.github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub Desktop For Windows&lt;/a&gt;，但是感觉有点重，不管是 GUI 还是 Git Bash 启动都很慢，所以我现在只想找个轻量一点的类似 Linux 下的命令行工具，几经搜寻后，决定使用 &lt;a href=&quot;http://git-scm.com/download/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git 官网提供的客户端&lt;/a&gt; ，同时它还有 Linux 和 Mac 的版本。&lt;/p&gt;
&lt;p&gt;客户端安装好后，发现它也提供了Git GUI，但是从安装到现在我一次都没开过，打开 Git Bash，默认样式不是很好看，自己在右键 &lt;code&gt;Options&lt;/code&gt; 里面进行调整。然后输入如下命令对 Git 进行基本配置：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.name &lt;span class=&quot;string&quot;&gt;&quot;你的github用户名&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.email &lt;span class=&quot;string&quot;&gt;&quot;你的github注册邮箱&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global core.autocrlf &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#注释：为了避免稍后通过Hexo发布博客时出现LF would be replaced by CRLF in xxx.html 错误，我们先配置这条，Stackoverflow上有关于这个问题的讨论：http://stackoverflow.com/questions/1967370/git-replacing-lf-with-crlf.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后因为你以后大多时候可能会使用 SSH 方式和 GitHub 建立连接，你可能需要 &lt;a href=&quot;https://help.github.com/articles/generating-an-ssh-key/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;配置 ssh-key&lt;/a&gt;，大致原理是在本地产生一个加密串，然后将这个加密串保存到 GitHub 里面，链接里面是 GitHub 提供的详细教程。&lt;/p&gt;
&lt;p&gt;这一步最后你可以尝试 &lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;利用 GitHub Pages 发布第一篇博客&lt;/a&gt;，GitHub Pages 是 GitHub 提供的一个托管个人主页的服务。这个链接里面会一步步教你建立一个repo，存放你的二级域名指向的站点，成功后 &lt;code&gt;username.github.io&lt;/code&gt; 可能不能立即访问，等十几分钟就行了。这一步算是看看你的阶段性成果。哦，差点忘了提，掌握这里面使用的 Git 命令就差不多了，前面提到的那个简易指南相对来说都有点多了。&lt;/p&gt;
&lt;h4 id=&quot;2-安装-Nodejs&quot;&gt;&lt;a href=&quot;#2-安装-Nodejs&quot; class=&quot;headerlink&quot; title=&quot;2. 安装 Nodejs&quot;&gt;&lt;/a&gt;2. 安装 Nodejs&lt;/h4&gt;&lt;p&gt;由于 Hexo 是用 Nodejs 写的，所以不解释。&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;NodeJs&lt;/strong&gt;&lt;/a&gt; 官网首页提供了 Windows 版的下载，下载完成后直接运行安装即可，最近的版本已经不需要配置环境变量什么鬼了。当然使用其它系统的请参考 Hexo &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;英文文档&lt;/a&gt; 或 &lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;中文文档&lt;/a&gt;，首页介绍了 Nodejs 在各个系统的安装方法。&lt;/p&gt;
&lt;h4 id=&quot;3-安装-Hexo&quot;&gt;&lt;a href=&quot;#3-安装-Hexo&quot; class=&quot;headerlink&quot; title=&quot;3. 安装 Hexo&quot;&gt;&lt;/a&gt;3. 安装 Hexo&lt;/h4&gt;&lt;p&gt;安装完 Git 和 Nodejs 后，就可以安装 &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;Hexo&lt;/strong&gt;&lt;/a&gt; 了，其实这一步以后的过程， &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo 官方文档&lt;/a&gt; 里都包括了，但我还是想捋一下。关于为什么是 Hexo，其实我也是在 Hexo、jekyll、FarBox 等等工具上调查纠结了几天，这是 Hexo 官网的slogan：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Hexo&lt;/strong&gt; —— &lt;em&gt;A fast, simple &amp;amp; powerful blog framework&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我觉得光是 Hexo 这个名字就很简洁犀利、够Geek，所以就它了，嗯~&lt;br&gt;由于安装了 Nodejs，改变了系统环境变量，所以需要 &lt;strong&gt;重启Git Bash&lt;/strong&gt;，再执行如下命令：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install -g hexo-cli &lt;span class=&quot;comment&quot;&gt;#安装Hexo，下面的是初始化过程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo init &amp;lt;folder&amp;gt; &lt;span class=&quot;comment&quot;&gt;#初始化博客文件夹，folder是你想写博客的文件夹&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; &amp;lt;folder&amp;gt; &lt;span class=&quot;comment&quot;&gt;#进入该文件夹&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install &lt;span class=&quot;comment&quot;&gt;#安装依赖&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后你应该把 &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo 官方文档&lt;/a&gt; 的Getting Started 和 Basic Usage 这两部分浏览一遍，了解 Hexo 的配置以及博客从写作到发布的流程，当然如果你有时间的话，可以浏览一下整个文档，这对于你以后想 Hack 别人的 Hexo 主题或者写自己的 Hexo 主题会有用。&lt;/p&gt;
&lt;h3 id=&quot;第三步：发布博客&quot;&gt;&lt;a href=&quot;#第三步：发布博客&quot; class=&quot;headerlink&quot; title=&quot;第三步：发布博客&quot;&gt;&lt;/a&gt;第三步：发布博客&lt;/h3&gt;&lt;p&gt;到了这里，我们的节目基本就接近尾声了，“啪~，套话又来了……”&lt;/p&gt;
&lt;h4 id=&quot;1-安装必要插件&quot;&gt;&lt;a href=&quot;#1-安装必要插件&quot; class=&quot;headerlink&quot; title=&quot;1. 安装必要插件&quot;&gt;&lt;/a&gt;1. 安装必要插件&lt;/h4&gt;&lt;p&gt;其实到这里，我们的安装软件的任务已经结束了，但为了稍后少走弯路，我直接按照解决问题后的思路来写了。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-deployer-git --save &lt;span class=&quot;comment&quot;&gt;#安装Hexo的git插件，因为我们会在Hexo里面用git发布文章&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-generator-feed --save &lt;span class=&quot;comment&quot;&gt;#安装生成RSS的插件，方便用户订阅&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-generator-sitemap --save &lt;span class=&quot;comment&quot;&gt;#安装生成sitemap插件，提供给蜘蛛&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;2-更改-Hexo-配置&quot;&gt;&lt;a href=&quot;#2-更改-Hexo-配置&quot; class=&quot;headerlink&quot; title=&quot;2. 更改 Hexo 配置&quot;&gt;&lt;/a&gt;2. 更改 Hexo 配置&lt;/h4&gt;&lt;p&gt;Hexo 配置文件 _config.yml 位于 Hexo 根目录，可用 Vim 或其他编辑工具打开修改。&lt;br&gt;&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;header&quot;&gt;## Docs: https://hexo.io/docs/configuration.html&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;title: 网站标题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subtitle: 网站的子标题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;description: 网站描述&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;author: 作者，即博客拥有者名字&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;language: en #关于language的使用各个主题都稍有不同，看主题文档配置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...中间省略若干...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;theme: again #主题名字,每次更换主题都要一定改这里&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;deploy: #发布博客平台的配置，还可以增加诸如国内的gitcafe&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  type: git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  repo: git@github.com:username/username.github.io.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  branch: master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt; 配置文件里面我只列出了主要需要修改的地方，剩余其他选项可以看看 &lt;a href=&quot;https://hexo.io/docs/configuration.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档的Configuration部分&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：每个配置名称和配置内容之间要至少一个空格！！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;3-更换主题&quot;&gt;&lt;a href=&quot;#3-更换主题&quot; class=&quot;headerlink&quot; title=&quot;3. 更换主题&quot;&gt;&lt;/a&gt;3. 更换主题&lt;/h4&gt;&lt;p&gt;Hexo 默认的主题有点丑，但功能还算完善，&lt;a href=&quot;https://hexo.io/themes/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo官网展示了部分主题&lt;/a&gt;以及&lt;a href=&quot;https://github.com/hexojs/hexo/wiki/themes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub wiki上列出了比较全的主题&lt;/a&gt;，选定喜欢的主题后，可以到主题的项目主页看看README，有没有需要安装的包依赖，那么如何更换主题呢？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;将主题克隆到本地，在 Hexo 根目录执行如下命令：&lt;/p&gt;
 &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://github.com/username/theme-name.git themes/theme-name&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改配置文件，打开 Hexo 根目录的 _config.yml：&lt;/p&gt;
 &lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;theme: theme-name #在这里填写你更换的主题名称&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;4-写博客&quot;&gt;&lt;a href=&quot;#4-写博客&quot; class=&quot;headerlink&quot; title=&quot;4. 写博客&quot;&gt;&lt;/a&gt;4. 写博客&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;按照Scaffolds目录下提供的layout之一新建一个文件，当然你也可以写一个属于自己的layout放到此目录下，而写文章要用 post 类型的 layout，而 post 在 Hexo 的配置文件里被配置成了默认的 layout，所以如下命令的 loyout 可省略。&lt;/p&gt;
 &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo new layout &lt;span class=&quot;string&quot;&gt;&quot;postName&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#postName是博客名字，博客文件名称也是根据该名字来生成的，博客文件默认在source/_post目录下，当然这些也都是可配置的。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;然后用你喜欢的Markdown编辑器打开刚刚生成的博客文件，写下你想写的文字。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;生成博客：&lt;/p&gt;
 &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo generate &lt;span class=&quot;comment&quot;&gt;#生成网页静态文件，Hexo会在根目录新建public文件夹来存放&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo server &lt;span class=&quot;comment&quot;&gt;#启动本地服务器，成功后可通过浏览器输入localhost:4000来测试博客效果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo deploy &lt;span class=&quot;comment&quot;&gt;#发布，如果前面的git插件安装后正确配置，就不会有太大问题&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：hexo deploy 时每次都会覆盖原来的内容，所以记得备份。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;发布成功后，就可通过 &lt;code&gt;username.github.io&lt;/code&gt;来访问你的博客。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;关于我正在使用的主题，我用的是 Hexo 官网展示的第一款主题 Again，不是因为我懒，而是我调查了几十个主题纠结之后的果断选择，这款主题不是很令人满意，也不是很完善，甚至没有提供分类和标签功能，但是这样反而让它看起来简单简洁，我想有时间我会将它改的更让人满意。&lt;br&gt; &lt;strong&gt;Ps&lt;/strong&gt;：关于如何创建分类和标签页面在我参考的文章里面估计可以找到&lt;/p&gt;
&lt;p&gt;关于404页面，在没有购买顶级域名的情况下，配置404页面并没什么用。&lt;/p&gt;
&lt;h3 id=&quot;曲终&quot;&gt;&lt;a href=&quot;#曲终&quot; class=&quot;headerlink&quot; title=&quot;曲终&quot;&gt;&lt;/a&gt;曲终&lt;/h3&gt;&lt;p&gt;感谢 Git、GitHub、Hexo、Markdown、Nodejs 的技术支持以及开源世界的贡献者！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub Pages 主页&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ibruce.info/2013/11/22/hexo-your-blog/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ibruce 的 hexo-your-blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zipperary.com/categories/hexo/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;zipperary的Hexo系列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.v2ex.com/t/175940&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;V2关于hexo deploy报错的讨论&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;u&gt;还包括文中其他链接&lt;/u&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;序曲&quot;&gt;&lt;a href=&quot;#序曲&quot; class=&quot;headerlink&quot; title=&quot;序曲&quot;&gt;&lt;/a&gt;序曲&lt;/h3&gt;&lt;p&gt;之前有过一次搭建博客的经历，当时购买了自己的第一个 .COM 域名，并用 Wordpress 挂在了同学的服务器上，一年下来只写了有寥寥几篇
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="git" scheme="http://archmee.github.io/tags/git/"/>
    
      <category term="github" scheme="http://archmee.github.io/tags/github/"/>
    
      <category term="hexo" scheme="http://archmee.github.io/tags/hexo/"/>
    
      <category term="markdown" scheme="http://archmee.github.io/tags/markdown/"/>
    
  </entry>
  
</feed>
