<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Archmee</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://archmee.github.io/"/>
  <updated>2017-04-07T22:32:49.488Z</updated>
  <id>http://archmee.github.io/</id>
  
  <author>
    <name>archmee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端之旅第 234~273 天</title>
    <link href="http://archmee.github.io/201704/2017-04-08.html"/>
    <id>http://archmee.github.io/201704/2017-04-08.html</id>
    <published>2017-04-07T16:00:00.000Z</published>
    <updated>2017-04-07T22:32:49.488Z</updated>
    
    <content type="html">&lt;p&gt;这可能是一篇流水账，但是用来梳理这40天都干了什么事情是一件很有意义的事情，尤其是对我自己而言。&lt;br&gt;首先，上一篇博客最后留下的计划都没有实现，因为我似乎忘了一件很重要的事情，那就是 &lt;a href=&quot;https://github.com/baidu-ife/ife/tree/master/2015_spring/task/task0004&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IFE2015 task4&lt;/a&gt; 还没有完成，我决定尝试一下。当然，计划往往就不是用来实现的。&lt;/p&gt;
&lt;h2 id=&quot;事件大纲&quot;&gt;&lt;a href=&quot;#事件大纲&quot; class=&quot;headerlink&quot; title=&quot;事件大纲&quot;&gt;&lt;/a&gt;事件大纲&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;3月初 开始学习IFE2015 task4提供的移动端开发入门资料&lt;/li&gt;
&lt;li&gt;3.13 完成了第一条，并准备开始实践——重构任务3之适配移动端&lt;/li&gt;
&lt;li&gt;3.21 看了一本叫《SPA设计与架构》的书，在上一条开始后我并没有马上动手，而是买了这本书，书是好书，并且对比了几种框架来学习，并且围绕前端工程化讲解了SPA路由、模块化（requirejs）、自动构建（gulp）、单元测试（Qunit）、服务端通信和Promise的用法。但是目前对我的移动端适配一点用处都没有，而且还不打算对任务3进行完全重构，采用工具是后面的事情，但是这本书从思想上算是帮我拨开了重重迷雾。（有空上学习笔记）&lt;/li&gt;
&lt;li&gt;3.31 完成移动端布局适配并在模拟器上成功测试，但是在真机测试时发现了诸多问题，并开始改进，有些什么样的问题以及如何解决的方案都在后面&lt;/li&gt;
&lt;li&gt;4.5 已经解决了移动端真机上大部分问题，并且对界面做了很多美化调整和css的合并工作，&lt;/li&gt;
&lt;li&gt;4.6至7 重构分类模块，改写了用户提示部分的功能，重构带到的目的写在后面。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;适配移动端遇到的问题&quot;&gt;&lt;a href=&quot;#适配移动端遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;适配移动端遇到的问题&quot;&gt;&lt;/a&gt;适配移动端遇到的问题&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在没有处理手势的情况下，几个定宽100%的页面之间可以直接通过手指滚动，而且从页面底部的横向导航条可以看出宽度不是不是100%而是200%或者更多&lt;br&gt; 原因: 几个内部page虽然都是100%，但同时也是absolute定位，所以影响了外层main&lt;br&gt; 解决：对外层main绝对定位并定宽100%以及指定overflow为hidden&lt;/li&gt;
&lt;li&gt;打开app隐藏工具栏&lt;br&gt; 解决：好吧，这条我用别人推荐的setTimeout+scrollTop方法没实现，只能手动上滑隐藏&lt;/li&gt;
&lt;li&gt;添加编辑任务的页面有几个问题&lt;ul&gt;
&lt;li&gt;input text内的文字位置不对&lt;br&gt;  解决：input text继承了父元素的line-height高度导致的，重新指定为text框一样的高度即可&lt;/li&gt;
&lt;li&gt;input date不能弹出日期选择器&lt;br&gt;  解决，因为之前在js中处理了指定的事件后就阻止了其他地方单击事件的行为，结果误杀了&lt;/li&gt;
&lt;li&gt;字体太小需要调整&lt;br&gt;  解决：使用rem&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;页面的滚动动画在qq浏览器中可以，但是在默认的红米2自带浏览器中却直接跳转，省略了中间的过渡动画，搜索得知该浏览器是opera的。&lt;br&gt; 原因：手机浏览器内核比较旧，不支持CSS3标准&lt;br&gt; 解决：在page类的规则中transition要写成带浏览器前缀的兼容方式，后面不指定对哪种行为的过渡，如果要指定transform，那就要写成带浏览器前缀的transform，比如-webkit-transition: -webkit-transform;）&lt;/li&gt;
&lt;li&gt;页内区域滚动不方便甚至滚不动&lt;br&gt; 解决，要在加了overflow=auto希望滚动的绝对定位元素的外层绝对定位元素加上overflow=hidden，其他条件我没试过，只是我的情况刚好是这样&lt;/li&gt;
&lt;li&gt;-webkit-内核的浏览器点击元素闪烁问题&lt;br&gt; 解决：-webkit-tap-highlight-color: transparent;&lt;/li&gt;
&lt;li&gt;ipad上对transform实现的翻页效果不感冒，中间会白屏闪烁，而且对hover类不起作用，长按也不行&lt;br&gt; 解决：绑定ontuchend事件，事件处理函数为空即可，同时解决了这两个问题。&lt;/li&gt;
&lt;li&gt;如何让一组按钮在容器中水平垂直居中 &lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;btns&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; table&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.btns&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;.btns-inner&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; table-cell&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;text-align&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; center&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;vertical-align&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; middle&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;重构带来的变化&quot;&gt;&lt;a href=&quot;#重构带来的变化&quot; class=&quot;headerlink&quot; title=&quot;重构带来的变化&quot;&gt;&lt;/a&gt;重构带来的变化&lt;/h2&gt;&lt;p&gt;我不是全部重构，只是单单对分类模块的数据存储的方式一直耿耿于怀。虽然还做了其他代码清理工作，但都不是重点。&lt;br&gt;之前有一篇博客我记录了实现task3的思路，以及数据存储方式。所有分类用key值存储在一个对象中，然后将这个汇总的对象用了一个名为category_list的key存进了localStorage，每次打开app都要加载分类数据，而且仅仅只有这一次读取，这个分类被读出后就一直保存在内存中使用直到关闭app或网页，每次分类数据发生变更则直接更改内存中的对象，然后再次更新到localStorage。&lt;br&gt;app当然还是可以运行，但是这种实现有什么问题？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：这个方法的优点就是一次读取，终身使用（app打开期间），由于分类保存在内存中，所以每当分类有新的更新或读取操作都会很快，但是我的理解是，分类这个东西一般只在某一段时间高频率的添加删除更新数据，一般分类创建后后期更新非常少，更多的时候大家都是对任务操作频率更高一点。&lt;br&gt;还有一个优点是由于我的分类设计为多级的（不限），所以整个category不管数据还是DOM都是以树状结构呈现的，所以要遍历category树是肯定的，所以直接从内存读取速度也会很快，但是仅限于app打开时的首次加载。&lt;/li&gt;
&lt;li&gt;缺点：一次读取所有分类数据在app运行期间一直滞留在内存中很少使用，严重浪费内存，这一条已经足够了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我用表格来模拟一下在重构前后localStorage的变化&lt;br&gt;重构前：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;key&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;category_list&lt;/td&gt;
&lt;td&gt;[分类对象1, 分类对象2, 分类对象3]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;todoid1&lt;/td&gt;
&lt;td&gt;todo对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;重构后：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;key&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;topCatId&lt;/td&gt;
&lt;td&gt;catid1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;catid1&lt;/td&gt;
&lt;td&gt;分类对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;todoid1&lt;/td&gt;
&lt;td&gt;todo对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;可能有人发现多出了一个topCatId，好吧，其实前面忘了交代，考虑到让整个category更像只有一个根节点的树状，所以我要维护一个“顶级分类”，顶级分类下的子分类就是一级分类，下面的依次类推，而顶级分类仍然是一个分类对象，所以他要和其他分类放在一起组成一张“表”，所以我要拿到它的id确保它就是根节点。&lt;/p&gt;
&lt;p&gt;重构之前也是有这个topCatId存在的，只是他没有被放置在localStorage中，而是写死在了程序中，那也就意味着不够灵活，如果发生变更，尤其是在程序员在更新程序时将其改变，那么也就意味着老用户在打开同一个网站或app时看不到原来的数据或者发生错误，因为程序在localStorage中得不到正确的数据，虽然用户原来的数据都还在。&lt;/p&gt;
&lt;p&gt;而重构之后的方法则更为灵活，在程序初始化时，会读取topCatId，如果有，则开始遍历分类树了，如果没有，则新建一个“顶级分类”，将顶级分类的id存储为topCatId即可。perfect！&lt;/p&gt;
&lt;h2 id=&quot;PC和客户端展示&quot;&gt;&lt;a href=&quot;#PC和客户端展示&quot; class=&quot;headerlink&quot; title=&quot;PC和客户端展示&quot;&gt;&lt;/a&gt;PC和客户端展示&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/201704080055.png&quot; alt=&quot;GTD tool pc端&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/201704080055.gif&quot; alt=&quot;GTD tool 移动端&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;The-Next&quot;&gt;&lt;a href=&quot;#The-Next&quot; class=&quot;headerlink&quot; title=&quot;The Next&quot;&gt;&lt;/a&gt;The Next&lt;/h2&gt;&lt;p&gt;下一步就是学习nodejs、es6、vue2、less、sass、gulp、webpack、requirejs、seajs&lt;br&gt;等balabalabalabala，计划总是会变的，who knows！&lt;br&gt;&lt;img src=&quot;http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/09/pcmoren_tanshou_org.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://junmer.github.io/mobile-dev-get-started/#/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://junmer.github.io/mobile-dev-get-started/#/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/jtyjty99999/mobileTech&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/jtyjty99999/mobileTech&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/maxzhang/maxzhang.github.com/issues/21&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/maxzhang/maxzhang.github.com/issues/21&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/maxzhang/maxzhang.github.com/issues/22&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/maxzhang/maxzhang.github.com/issues/22&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/maxzhang/maxzhang.github.com/issues/23&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/maxzhang/maxzhang.github.com/issues/23&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/maxzhang/maxzhang.github.com/issues/32&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/maxzhang/maxzhang.github.com/issues/32&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.css88.com/archives/6410&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.css88.com/archives/6410&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.meow.re/original/2015/04/27/screen-adaptation-in-mobileweb/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.meow.re/original/2015/04/27/screen-adaptation-in-mobileweb/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://isux.tencent.com/web-app-rem.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://isux.tencent.com/web-app-rem.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/yexiaochai/p/4219523.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/yexiaochai/p/4219523.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/rubyisaPM/p/4380056.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/rubyisaPM/p/4380056.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.codingserf.com/index.php/2014/07/responsive-and-mobile-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.codingserf.com/index.php/2014/07/responsive-and-mobile-1/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.codingserf.com/index.php/2014/08/responsive-and-mobile-2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.codingserf.com/index.php/2014/08/responsive-and-mobile-2/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.html-js.com/article/2402&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.html-js.com/article/2402&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.html-js.com/article/2400&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.html-js.com/article/2400&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.w3cplus.com/css3/css3-3d-transform.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.w3cplus.com/css3/css3-3d-transform.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.w3cplus.com/mobile/mobile-terminal-refactoring-slider.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.w3cplus.com/mobile/mobile-terminal-refactoring-slider.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.w3cplus.com/blog/tags/429.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.w3cplus.com/blog/tags/429.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.codingserf.com/index.php/2014/02/css3-transitions-animations/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.codingserf.com/index.php/2014/02/css3-transitions-animations/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://gaohaoyang.github.io/2015/06/17/web-app/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://gaohaoyang.github.io/2015/06/17/web-app/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这可能是一篇流水账，但是用来梳理这40天都干了什么事情是一件很有意义的事情，尤其是对我自己而言。&lt;br&gt;首先，上一篇博客最后留下的计划都没有实现，因为我似乎忘了一件很重要的事情，那就是 &lt;a href=&quot;https://github.com/baidu-ife/ife/tr
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
      <category term="web app" scheme="http://archmee.github.io/tags/web-app/"/>
    
  </entry>
  
  <entry>
    <title>移动WEB开发入门学习笔记</title>
    <link href="http://archmee.github.io/201703/2017-03-13.html"/>
    <id>http://archmee.github.io/201703/2017-03-13.html</id>
    <published>2017-03-12T16:00:00.000Z</published>
    <updated>2017-04-07T22:02:48.290Z</updated>
    
    <content type="html">&lt;h2 id=&quot;移动WEB开发入门&quot;&gt;&lt;a href=&quot;#移动WEB开发入门&quot; class=&quot;headerlink&quot; title=&quot;移动WEB开发入门&quot;&gt;&lt;/a&gt;移动WEB开发入门&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://junmer.github.io/mobile-dev-get-started/#/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;移动WEB开发入门&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;单位&quot;&gt;&lt;a href=&quot;#单位&quot; class=&quot;headerlink&quot; title=&quot;单位&quot;&gt;&lt;/a&gt;单位&lt;/h3&gt;&lt;p&gt;px - 固定大小&lt;br&gt;em: 是相对父元素的字体大小单位&lt;br&gt;rem: 是相对根元素的字体大小单位，可用于多屏适配，统一修改&lt;/p&gt;
&lt;h3 id=&quot;横竖屏&quot;&gt;&lt;a href=&quot;#横竖屏&quot; class=&quot;headerlink&quot; title=&quot;横竖屏&quot;&gt;&lt;/a&gt;横竖屏&lt;/h3&gt;&lt;p&gt;监听横竖屏切换&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;orientationchange&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// rerender something&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;针对横竖屏的样式&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;media&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;all and (orientation:portrait)&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;css&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 竖屏 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;media&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;all and (orientation:landscape)&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;css&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 横屏 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;兼容Flex：&quot;&gt;&lt;a href=&quot;#兼容Flex：&quot; class=&quot;headerlink&quot; title=&quot;兼容Flex：&quot;&gt;&lt;/a&gt;兼容Flex：&lt;/h3&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.page-wrap&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; -webkit-box&lt;/span&gt;&lt;/span&gt;;      &lt;span class=&quot;comment&quot;&gt;/* OLD - iOS 6-, Safari 3.1-6 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; -moz-box&lt;/span&gt;&lt;/span&gt;;         &lt;span class=&quot;comment&quot;&gt;/* OLD - Firefox 19- (buggy but mostly works) */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; -ms-flexbox&lt;/span&gt;&lt;/span&gt;;      &lt;span class=&quot;comment&quot;&gt;/* TWEENER - IE 10 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; -webkit-flex&lt;/span&gt;&lt;/span&gt;;     &lt;span class=&quot;comment&quot;&gt;/* NEW - Chrome */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; flex&lt;/span&gt;&lt;/span&gt;;             &lt;span class=&quot;comment&quot;&gt;/* NEW, Spec - Opera 12.1, Firefox 20+ */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;打开数字键盘：&quot;&gt;&lt;a href=&quot;#打开数字键盘：&quot; class=&quot;headerlink&quot; title=&quot;打开数字键盘：&quot;&gt;&lt;/a&gt;打开数字键盘：&lt;/h3&gt;&lt;p&gt; &lt;code&gt;&amp;lt;input type=&amp;quot;tel&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;隐藏地址栏：-setTimeout-function-window-scrollTo-0-1-0&quot;&gt;&lt;a href=&quot;#隐藏地址栏：-setTimeout-function-window-scrollTo-0-1-0&quot; class=&quot;headerlink&quot; title=&quot;隐藏地址栏： setTimeout(function(){ window.scrollTo(0, 1); }, 0);&quot;&gt;&lt;/a&gt;隐藏地址栏： &lt;code&gt;setTimeout(function(){ window.scrollTo(0, 1); }, 0);&lt;/code&gt;&lt;/h3&gt;&lt;h3 id=&quot;添加到主屏幕&quot;&gt;&lt;a href=&quot;#添加到主屏幕&quot; class=&quot;headerlink&quot; title=&quot;添加到主屏幕&quot;&gt;&lt;/a&gt;添加到主屏幕&lt;/h3&gt;&lt;p&gt;在iPhone,iPad,iTouch的safari上可以使用添加到主屏按钮将网站添加到主屏幕上：&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;apple-touch-icon&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;apple-touch-icon-iphone.png&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;apple-touch-icon&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;sizes&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;72x72&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;apple-touch-icon-ipad.png&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;apple-touch-icon&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;sizes&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;114x114&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;apple-touch-icon-iphone4.png&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;工具或库：&quot;&gt;&lt;a href=&quot;#工具或库：&quot; class=&quot;headerlink&quot; title=&quot;工具或库：&quot;&gt;&lt;/a&gt;工具或库：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;click 有 300± ms 延迟 服用 &lt;a href=&quot;https://github.com/ftlabs/fastclick&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fastclick&lt;/a&gt; 后, 可以解决 click 的延迟, 还可以防止 穿透(跨页面穿透除外), 嘿嘿嘿&lt;/li&gt;
&lt;li&gt;区域滚动 overflow:auto 不靠谱&lt;ul&gt;
&lt;li&gt;iscroll&lt;/li&gt;
&lt;li&gt;saber-scroll&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;hammerjs. 一个触摸手势库&lt;/li&gt;
&lt;li&gt;食指点击目标尺寸是44 x 44像素，拇指是72 x72像素 finger friendly design&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-WEBKIT-TAP-HIGHLIGHT-COLOR: RGBA(255,255,255,0)&lt;/code&gt;，可以屏蔽点击元素时出现的阴影, 常用于有事件代理的父元素&lt;/li&gt;
&lt;li&gt;font icon：矢量图标, 自由变化大小, 颜色; 妈妈再也不用担心我的切图&lt;/li&gt;
&lt;li&gt;base64：减少一个请求, 首屏图片无延迟; 图片没法gzip，而css可以&lt;/li&gt;
&lt;li&gt;lazyload：有流量就会放肆，没流量就会克制&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;CSS3&quot;&gt;&lt;a href=&quot;#CSS3&quot; class=&quot;headerlink&quot; title=&quot;CSS3&quot;&gt;&lt;/a&gt;CSS3&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;合理使用渐变/圆角/阴影&lt;/li&gt;
&lt;li&gt;别太多, 低端机 hold 不住&lt;/li&gt;
&lt;li&gt;代替js动画&lt;/li&gt;
&lt;li&gt;&lt;p&gt;性能好, 兼容好, why not?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;translate3d：开启GPU硬件加速, 提升动画渲染性能&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;避免事项&quot;&gt;&lt;a href=&quot;#避免事项&quot; class=&quot;headerlink&quot; title=&quot;避免事项&quot;&gt;&lt;/a&gt;避免事项&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;localStorage：每个域的最大长度为5MB&lt;/li&gt;
&lt;li&gt;&lt;p&gt;iframe：卡 cry, viewport 失效, iOS 宽高失效, fixed定位错误&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;fixed + input什么仇什么怨&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;移动商桥 ios/android 分版本 hack&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;调试&quot;&gt;&lt;a href=&quot;#调试&quot; class=&quot;headerlink&quot; title=&quot;调试&quot;&gt;&lt;/a&gt;调试&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安卓chrome远程调试&lt;br&gt;chrome://inspect/#devices&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;weinre&lt;br&gt;npm安装：npm install -g weinre&lt;br&gt;启动weinre：weinre –boundHost -all- –httpPort 8081&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;browserSync 神器推荐&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;移动前端不得不了解的HTML5-head-头标签&quot;&gt;&lt;a href=&quot;#移动前端不得不了解的HTML5-head-头标签&quot; class=&quot;headerlink&quot; title=&quot;移动前端不得不了解的HTML5 head 头标签&quot;&gt;&lt;/a&gt;移动前端不得不了解的HTML5 head 头标签&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.css88.com/archives/6410&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;移动前端不得不了解的HTML5 head 头标签（2016最新版）&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;基本标签&quot;&gt;&lt;a href=&quot;#基本标签&quot; class=&quot;headerlink&quot; title=&quot;基本标签&quot;&gt;&lt;/a&gt;基本标签&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;x-ua-compatible&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;ie=edge&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--移动端的页面这个可以忽略，具体可以查看本文Internet Explorer浏览器部分--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;width=device-width, initial-scale=1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--具体可以查看本文 为移动设备添加 viewport 部分--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 以上 3 个 meta 标签 *必须* 放在 head 的最前面；其他任何的 head 内容必须在这些标签的 *后面* --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;DOCTYPE&quot;&gt;&lt;a href=&quot;#DOCTYPE&quot; class=&quot;headerlink&quot; title=&quot;DOCTYPE&quot;&gt;&lt;/a&gt;DOCTYPE&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;doctype&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 使用 HTML5 doctype，不区分大小写 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Charset&quot;&gt;&lt;a href=&quot;#Charset&quot; class=&quot;headerlink&quot; title=&quot;Charset&quot;&gt;&lt;/a&gt;Charset&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;html5 之前网页中会这样写：&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/html; charset=utf-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;lang属性：&quot;&gt;&lt;a href=&quot;#lang属性：&quot; class=&quot;headerlink&quot; title=&quot;lang属性：&quot;&gt;&lt;/a&gt;lang属性：&lt;/h3&gt;&lt;p&gt;简体中文：&lt;code&gt;&amp;lt;html lang=&amp;quot;zh-cmn-Hans&amp;quot;&amp;gt;&lt;/code&gt;&lt;br&gt;繁体中文：&lt;code&gt;&amp;lt;html lang=&amp;quot;zh-cmn-Hant&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;meta标签分类：&quot;&gt;&lt;a href=&quot;#meta标签分类：&quot; class=&quot;headerlink&quot; title=&quot;meta标签分类：&quot;&gt;&lt;/a&gt;meta标签分类：&lt;/h3&gt;&lt;p&gt;meta标签根据属性的不同，可分为两大部分：http-equiv 和 name 属性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;http-equiv：相当于http的文件头作用，它可以向浏览器传回一些有用的信息，以帮助浏览器正确地显示网页内容。&lt;/li&gt;
&lt;li&gt;name属性：主要用于描述网页，与之对应的属性值为content，content中的内容主要是便于浏览器，搜索引擎等机器人识别，等等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;推荐使用的meta标签&quot;&gt;&lt;a href=&quot;#推荐使用的meta标签&quot; class=&quot;headerlink&quot; title=&quot;推荐使用的meta标签:&quot;&gt;&lt;/a&gt;推荐使用的meta标签:&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 设置文档的字符编码 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;x-ua-compatible&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;ie=edge&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 以上 3 个 meta 标签 *必须* 放在 head 的最前面；其他任何的 head 内容必须在这些标签的 *后面* --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 允许控制资源的过度加载 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;Content-Security-Policy&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;default-src &#39;self&#39;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 尽早地放置在文档中 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 仅应用于该标签下的内容 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- Web 应用的名称（仅当网站被用作为一个应用时才使用）--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;application-name&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;应用名称&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 针对页面的简短描述（限制 150 字符）--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 在*某些*情况下，该描述是被用作搜索结果展示片段的一部分 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;description&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;一个页面描述&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 控制搜索引擎的抓取和索引行为 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;robots&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;index,follow,noodp&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 所有的搜索引擎 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;googlebot&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;index,follow&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 仅对 Google 有效 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 告诉 Google 不显示网站链接的搜索框 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;google&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;nositelinkssearchbox&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 告诉 Google 不提供此页面的翻译 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;google&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;notranslate&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 验证 Google 搜索控制台的所有权 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;google-site-verification&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;verification_token&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 用来命名软件或用于构建网页（如 - WordPress、Dreamweaver）--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;generator&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;program&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 关于你的网站主题的简短描述 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;subject&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;你的网站主题&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 非常简短（少于 10 个字）的描述。主要用于学术论文。--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;abstract&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 完整的域名或网址 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;url&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;https://example.com/&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;directory&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;submission&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 基于网站内容给出一般的年龄分级 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;rating&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;General&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 允许控制 referrer 信息如何传递 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;referrer&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;never&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 禁用自动检测和格式化可能的电话号码 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;format-detection&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;telephone=no&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 通过设置为 “off” 完全退出 DNS 预取 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;x-dns-prefetch-control&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;off&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 在客户端存储 cookie，web 浏览器的客户端识别 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;set-cookie&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;name=value; expires=date; path=url&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 指定要显示在一个特定框架中的页面 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;Window-Target&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;_value&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 地理标签 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;ICBM&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;latitude, longitude&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;geo.position&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;latitude;longitude&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 国家代码 (ISO 3166-1): 强制性, 州代码 (ISO 3166-2): 可选; 如 content=&quot;US&quot; / content=&quot;US-NY&quot; --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;geo.region&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;country[-state]&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 如 content=&quot;New York City&quot; --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;geo.placename&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;city/town&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;SEO-优化部分：&quot;&gt;&lt;a href=&quot;#SEO-优化部分：&quot; class=&quot;headerlink&quot; title=&quot;SEO 优化部分：&quot;&gt;&lt;/a&gt;SEO 优化部分：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;页面标题标签(head 头部必须)：&lt;br&gt;&lt;code&gt;&amp;lt;title&amp;gt;your title&amp;lt;/title&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;页面关键词 keywords：&lt;br&gt;&lt;code&gt;&amp;lt;meta name=&amp;quot;keywords&amp;quot; content=&amp;quot;your keywords&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;页面描述内容 description：&lt;br&gt;&lt;code&gt;&amp;lt;meta name=&amp;quot;description&amp;quot; content=&amp;quot;your description&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;定义网页作者 author：&lt;br&gt;&lt;code&gt;&amp;lt;meta name=&amp;quot;author&amp;quot; content=&amp;quot;author,email address&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;定义网页搜索引擎索引方式，robotterms 是一组使用英文逗号「,」分割的值，通常有如下几种取值：none，noindex，nofollow，all，index和follow。&lt;br&gt;&lt;code&gt;&amp;lt;meta name=&amp;quot;robots&amp;quot; content=&amp;quot;index,follow&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;favicon-图标&quot;&gt;&lt;a href=&quot;#favicon-图标&quot; class=&quot;headerlink&quot; title=&quot;favicon 图标&quot;&gt;&lt;/a&gt;favicon 图标&lt;/h3&gt;&lt;p&gt;IE 11, Chrome, Firefox, Safari, Opera支持设置：&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;icon&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;path/to/favicon-16.png&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;sizes&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;16x16&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;image/png&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;icon&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;path/to/favicon-32.png&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;sizes&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;32x32&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;image/png&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;icon&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;path/to/favicon-48.png&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;sizes&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;48x48&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;image/png&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;icon&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;path/to/favicon-62.png&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;sizes&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;62x62&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;image/png&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;icon&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;path/to/favicon-192.png&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;sizes&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;192x192&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;image/png&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;viewport&quot;&gt;&lt;a href=&quot;#viewport&quot; class=&quot;headerlink&quot; title=&quot;viewport&quot;&gt;&lt;/a&gt;viewport&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;viewport 可以让布局在移动浏览器上显示的更好。 通常会写：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;width=device-width 会导致 iPhone 5 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边(&lt;a href=&quot;http://bigc.at/ios-webapp-viewport-meta.orz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://bigc.at/ios-webapp-viewport-meta.orz&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;content 参数：&lt;br&gt;  width viewport 宽度(数值/device-width)&lt;br&gt;  height viewport 高度(数值/device-height)&lt;br&gt;  initial-scale 初始缩放比例&lt;br&gt;  maximum-scale 最大缩放比例&lt;br&gt;  minimum-scale 最小缩放比例&lt;br&gt;  user-scalable 是否允许用户缩放(yes/no)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;viewport&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;width=device-width,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           height=device-height,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           inital-scale=1.0,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           maximum-scale=1.0,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           user-scalable=no;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;MobileWeb-适配总结&quot;&gt;&lt;a href=&quot;#MobileWeb-适配总结&quot; class=&quot;headerlink&quot; title=&quot;MobileWeb 适配总结&quot;&gt;&lt;/a&gt;MobileWeb 适配总结&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;www.meow.re/original/2015/04/27/screen-adaptation-in-mobileweb/&quot;&gt;MobileWeb 适配总结&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;固定高度，宽度自适应&lt;/li&gt;
&lt;li&gt;flex&lt;/li&gt;
&lt;li&gt;使用rem来&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;浅谈移动前端的最佳实践&quot;&gt;&lt;a href=&quot;#浅谈移动前端的最佳实践&quot; class=&quot;headerlink&quot; title=&quot;浅谈移动前端的最佳实践&quot;&gt;&lt;/a&gt;浅谈移动前端的最佳实践&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/yexiaochai/p/4219523.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;浅谈移动前端的最佳实践&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;单页or多页：&quot;&gt;&lt;a href=&quot;#单页or多页：&quot; class=&quot;headerlink&quot; title=&quot;单页or多页：&quot;&gt;&lt;/a&gt;单页or多页：&lt;/h3&gt;&lt;p&gt;spa也就是我们常常说的web应用程序webapp，被认为是业内的发展趋势，主要有两个优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户体验好&lt;/li&gt;
&lt;li&gt;可以更好的降低服务器压力&lt;br&gt;但是单页有几个致命的缺点：&lt;/li&gt;
&lt;li&gt;SEO支持不好，往往需要单独写程序处理SEO问题&lt;/li&gt;
&lt;li&gt;webapp本身的内存管理难，Javascript、Css非常容易互相影响&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Jquery-VS-Zepto&quot;&gt;&lt;a href=&quot;#Jquery-VS-Zepto&quot; class=&quot;headerlink&quot; title=&quot;Jquery VS Zepto&quot;&gt;&lt;/a&gt;Jquery VS Zepto&lt;/h3&gt;&lt;p&gt;主要对比在使用场景：jQuery体积大，兼容性好，Zepto体积小，兼容性不够，适用于移动端&lt;/p&gt;
&lt;h3 id=&quot;MVC框架选择&quot;&gt;&lt;a href=&quot;#MVC框架选择&quot; class=&quot;headerlink&quot; title=&quot;MVC框架选择&quot;&gt;&lt;/a&gt;MVC框架选择&lt;/h3&gt;&lt;p&gt;总结一句：不建议直接将业务库框架直接取来使用，更不建议使用过重的业务框架，最好是能明白框架想要解决的问题，与自己项目的实际需求，自己造轮子知根知底。&lt;/p&gt;
&lt;h3 id=&quot;框架建议&quot;&gt;&lt;a href=&quot;#框架建议&quot; class=&quot;headerlink&quot; title=&quot;框架建议&quot;&gt;&lt;/a&gt;框架建议&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;第三方库（基础库）：&lt;br&gt;requireJS+Zepto+阉割版underscore（将其中不太用到的方法去掉，主要使用模板引擎一块）+ Fastclick&lt;/li&gt;
&lt;li&gt;MVC库/UI库：&lt;br&gt;建议自己写，不要太臃肿，可以抄袭，可以借鉴，不要完全拿来就用&lt;br&gt;这样出来的一套框架比较轻量级，知根知底，不会出现改不动的情况，最后提一句：不经过调研，没有实际场景在框架中玩模式，玩高级理念死得快，不要为技术而技术。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;性能，网站是如何变慢的？&quot;&gt;&lt;a href=&quot;#性能，网站是如何变慢的？&quot; class=&quot;headerlink&quot; title=&quot;性能，网站是如何变慢的？&quot;&gt;&lt;/a&gt;性能，网站是如何变慢的？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;尺寸——慢的根源&lt;br&gt;  所以，尺寸变大的主要原因是因为冗余代码的产生，如何消除冗余代码是一个重点，也是一个难点。&lt;/li&gt;
&lt;li&gt;版本轮替——哪些能删的痛点&lt;br&gt;  业务团队不要依赖于框架的任何dom结构与css样式，特别不要将UI组件中的dom结构与样式单独抠出来使用，否则就准备肥皂吧&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;网络请求，请求是前端优化的生命，优化到最后，优化到极致，都会在请求数、请求量上做文章，常用并且实用的手段有：&lt;/p&gt;
&lt;h4 id=&quot;CSS冗余的解决方案&quot;&gt;&lt;a href=&quot;#CSS冗余的解决方案&quot; class=&quot;headerlink&quot; title=&quot;CSS冗余的解决方案&quot;&gt;&lt;/a&gt;CSS冗余的解决方案&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;CSS Sprites：CSS Sprites可以有效的减低请求数，偶尔还可以降低请求量，但是随着发展，可能会有以下问题：&lt;ul&gt;
&lt;li&gt;新增难&lt;/li&gt;
&lt;li&gt;删除难&lt;/li&gt;
&lt;li&gt;调整难&lt;/li&gt;
&lt;li&gt;响应式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;快的假象&quot;&gt;&lt;a href=&quot;#快的假象&quot; class=&quot;headerlink&quot; title=&quot;快的假象&quot;&gt;&lt;/a&gt;快的假象&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;lazyload：&lt;br&gt; 我们常说的延迟加载是图片延迟加载，其实非图片也可延迟加载，看实际需求即可。&lt;ul&gt;
&lt;li&gt;为img标签src设置统一的图片链接，而将真实链接地址装在自定义属性中。&lt;/li&gt;
&lt;li&gt;所以开始时候图片是不会加载的，我们将满足条件的图片的src重置为自定义属性便可实现延迟加载功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;fake页面：&lt;br&gt; 一个静态HTML页面，装载首屏的基本内容，让首页快速显示，然后js加载结束后会马上重新渲染整个页面，这个样子，用户就可以很快的看到页面响应，给用户一个快的错觉&lt;/li&gt;
&lt;li&gt;预加载：&lt;br&gt; 这里的预加载是在浏览器空闲的时候加载后续页面所需资源，是一种浪费用户流量的行为，属于以空间换时间的做法，实施难度也比较高。预加载的前提是不影响主程序的情况下偷偷的加载，也就是在浏览器空闲的时候加载，但是浏览器空闲似乎变得不可控制&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;合并脚本js文件&quot;&gt;&lt;a href=&quot;#合并脚本js文件&quot; class=&quot;headerlink&quot; title=&quot;合并脚本js文件&quot;&gt;&lt;/a&gt;合并脚本js文件&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;为什么要降低请求数？&lt;br&gt; 每次http请求都会带上一些额外信息，会导致其它开销，比如域名解析、开启连接、发送请求等操作，上述spirit也因此产生。&lt;/li&gt;
&lt;li&gt;浏览器并发数&lt;br&gt; chrome在请求资源下会有所限制，移动端的限制普遍在6个左右，这个时候在并发数被占满时，你的ajax便会被搁置，这在webapp中情况更加常见，所以网络限制的情况下请求数控制是必要的，而且可以降低服务器端的压力。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;离线存储&quot;&gt;&lt;a href=&quot;#离线存储&quot; class=&quot;headerlink&quot; title=&quot;离线存储&quot;&gt;&lt;/a&gt;离线存储&lt;/h4&gt;&lt;p&gt;工作中实际使用的离线缓存有localstorage与Application cache，这两个皆是好东西，一个常用于ajax请求缓存，一个常用于静态资源缓存。&lt;/p&gt;
&lt;h3 id=&quot;移动革命——Hybrid&quot;&gt;&lt;a href=&quot;#移动革命——Hybrid&quot; class=&quot;headerlink&quot; title=&quot;移动革命——Hybrid&quot;&gt;&lt;/a&gt;移动革命——Hybrid&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;拒绝native UI&lt;/li&gt;
&lt;li&gt;交互模型 &lt;a href=&quot;http://images.cnitblog.com/blog/294743/201501/201903092504221.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://images.cnitblog.com/blog/294743/201501/201903092504221.png&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hybrid的调试&lt;/li&gt;
&lt;li&gt;多webview&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;不恰当的需求&quot;&gt;&lt;a href=&quot;#不恰当的需求&quot; class=&quot;headerlink&quot; title=&quot;不恰当的需求&quot;&gt;&lt;/a&gt;不恰当的需求&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;唤醒app&lt;/li&gt;
&lt;li&gt;回退关闭弹出层&lt;/li&gt;
&lt;li&gt;全站IScroll化&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;移动WEB开发入门&quot;&gt;&lt;a href=&quot;#移动WEB开发入门&quot; class=&quot;headerlink&quot; title=&quot;移动WEB开发入门&quot;&gt;&lt;/a&gt;移动WEB开发入门&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://junmer.github.io/mobile-d
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
      <category term="web app" scheme="http://archmee.github.io/tags/web-app/"/>
    
  </entry>
  
  <entry>
    <title>IFE 2015 task3资料学习总结</title>
    <link href="http://archmee.github.io/201703/2017-02-06-2.html"/>
    <id>http://archmee.github.io/201703/2017-02-06-2.html</id>
    <published>2017-03-02T16:00:00.000Z</published>
    <updated>2017-03-12T18:47:04.703Z</updated>
    
    <content type="html">&lt;p&gt;其实这篇总结问应该是在任务三的开始部分就完成的，但我一开始就投入了代码的怀抱，迟迟不肯动手，直到在任务三完成之后，并且在摸索任务四的时候才每天留了点时间将其完成。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;这几个js中的难点几乎每天都会准时出现在各大技术网站上，这让人不得不冲动自己也来总结一番，趁还没忘记最近看的一堆参考资料。&lt;br&gt;我试图用最简洁的方式交一份满意的答卷。&lt;/p&gt;
&lt;h2 id=&quot;this&quot;&gt;&lt;a href=&quot;#this&quot; class=&quot;headerlink&quot; title=&quot;this&quot;&gt;&lt;/a&gt;this&lt;/h2&gt;&lt;p&gt;this在大多数OO语言中都是指当前对象引用，而在js中，却有几种不同的表现：&lt;br&gt;《js语言精粹》中明确指出this的值取决于调用的模式，js中一共有4中调用模式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;方法调用模式&lt;/strong&gt;，一个函数作为对象的方法被调用时，this被绑定到该对象&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;函数调用模式&lt;/strong&gt;，一个普通函数(非方法)被调用时，this绑定到全局对象，浏览器中即window&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;构造器调用模式&lt;/strong&gt;，在一个函数前带上new关键字来调用，内部会创建一个连接到该函数原型的新对象，同时this被绑定到那个新对象上&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;apply调用模式&lt;/strong&gt;，js提供了apply和call两个方法来更改this的绑定对象&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最常见的困惑是一个对象方法返回一个函数，其实这个时候的函数已经属于全局对象了，所以执行返回的函数中的this指向全局对象。&lt;br&gt;在给DOM绑定事件时候的this时也容易让人困惑，可以从鸟哥的 &lt;a href=&quot;www.laruence.com/2009/09/08/1076.html&quot;&gt;深入理解Javascript之this关键字&lt;/a&gt; 文中寻找答案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意事项：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;this始终指向此时&lt;strong&gt;函数/方法调用者&lt;/strong&gt;，而不是在定义函数/方法时指向的对象。&lt;/li&gt;
&lt;li&gt;this是&lt;strong&gt;执行上下文环境&lt;/strong&gt;的一个属性，而不是某个变量对象/活动对象的属性。&lt;br&gt;这个特点很重要，因为和变量不同，this是没有一个类似搜寻变量的过程。当你在代码中使用了this，这个 this的值就直接从执行的上下文中获取了，而不会从作用域链中搜寻。this的值只取决于进入上下文时的情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;闭包&quot;&gt;&lt;a href=&quot;#闭包&quot; class=&quot;headerlink&quot; title=&quot;闭包&quot;&gt;&lt;/a&gt;闭包&lt;/h2&gt;&lt;p&gt;闭包是什么呢？见名知意，即一个封闭的环境，即使用专业术语描述也相差无几。&lt;br&gt;闭包的作用是用来保存函数的执行上下文方便以后使用。&lt;br&gt;常见的闭包使用如 IIFE（立即执行表达式）、函数的柯里化，模块模式。&lt;br&gt;那么闭包在哪呢，通常闭包的形成都是在一个函数中返回一个函数的时候，由于返回的函数往往引用了父函数的上下文环境，导致父函数执行完成后内存没有得到回收/释放（引用计数机制），所以在返回的函数中可以访问父函数的上下文环境。这就形成了闭包。&lt;br&gt;上一个简单的示例：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sum = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; count = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        count += n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; count;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sum(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sum(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;示例中在父函数初始化了count变量，返回的函数中引用了count，sum保存了返回函数，在以后调用sum的过程中，count会始终存在并保存上次调用后的值，那么count存放在哪里的呢，它就是被存放在了返回的函数形成的闭包中（上下文环境）。关于是如何在返回的函数中执行的时候找到count变量的过程，那么就涉及到接下来要讲的作用域和作用域链了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意事项：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于每个标准函数在创建时候保存了[[Scope]]，所以理论上来讲，ECMAScript中的_所有函数都是闭包。&lt;br&gt;闭包是一个代码块（在ECMAScript中是一个函数）和以静态方式/词法方式进行存储的所有父作用域的一个集合体。所以，通过这些存储的作用域，函数可以很容易的找到自由变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;作用域作用域链&quot;&gt;&lt;a href=&quot;#作用域作用域链&quot; class=&quot;headerlink&quot; title=&quot;作用域作用域链&quot;&gt;&lt;/a&gt;作用域作用域链&lt;/h2&gt;&lt;p&gt;作用域是？&lt;br&gt;简单的说，作用域就是变量与函数的可访问范围，即作用域控制着标识符(变量/函数/形参等等)的可见性和生命周期。在JavaScript中，标识符的作用域只有全局作用域和函数作用域两种。没有用var声明的都属于全局作用域，if/for/while等语句块没有内部作用域，在其中声明的变量将属于当前函数的作用域。&lt;/p&gt;
&lt;p&gt;那么作用域链是什么呢？&lt;br&gt;在定义函数的时候该函数内部会有一个[[scope]]属性，它指向定义该函数的函数的作用域链，这个链的底端是全局对象，顶端是当前活动对象。&lt;br&gt;作用域链的形成是从函数调用开始的，首先在全局环境中，当前活动对象就是GO，当执行一个函数的时候，会为该函数创建一个执行上下文(excution context)，在执行上下文中有初始化后的this，活动对象AO、变量对象VO等属性，然后将活动对象加入到作用域链顶端，加入的过程可能是在[[scope chain]]中加入，也可能是直接链接到&lt;code&gt;__parent__&lt;/code&gt;。因为我看过的资料关于这个链的实现的描述大概分两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;js高程是一种类似数组的方式并且按函数调用栈的顺序保存其“作用域”的引用，&lt;a href=&quot;http://www.cnblogs.com/lhb25/archive/2011/09/06/javascript-scope-chain.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如图&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/2011090414454524_scope_chain.jpg&quot; alt=&quot;scope_chain实现&quot;&gt;&lt;/li&gt;
&lt;li&gt;其他资料也有描述的是一个&lt;code&gt;__parent__&lt;/code&gt;的内部属性来维护“父作用域”的引用，&lt;a href=&quot;http://www.nowamagic.net/librarys/veda/detail/1645&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;比如下图&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/2012_03_21_09_parent_scope.png&quot; alt=&quot;parent实现&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然两种方式都可行，但是参照js原型链的实现方式，可能第二种方法更靠谱，复杂度为O(n)。因为如果按照第一种方式，每次都要拷贝父作用域的作用域链很麻烦，而且耗费内存，复杂度估计O(2n)。&lt;/p&gt;
&lt;p&gt;作用域链的用途是什么呢，用来遍历查找标识符，闭包就是利用这点实现的。&lt;br&gt;查找一个标识符的顺序是：从作用域链的顶端，也就是自身的活动对象开始，如果存在则返回，如果不存在将继续搜索父函数的活动对象，依次查找，直到找到为止。如果整个作用域链上都无法找到（到全局对象结束），则返回undefined。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意事项：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从作用域链的结构可以看出，在执行上下文的作用域链中，标识符所在的位置越深，读写速度就会越慢。因为全局变量总是存在于执行上下文作用域链的最末端，因此在标识符解析的时候，查找全局变量是最慢的。所以，在编写代码的时候应尽量少使用全局变量，尽可能使用局部变量。&lt;/li&gt;
&lt;li&gt;在代码执行过程中，作用域链可以通过使用with语句和catch从句对象来扩充（它们的对象参数将会被作为活动对象加入到作用域链顶端）。并且由于这些对象是简单的对象，它们可以拥有原型（和原型链）。这个事实导致作用域链查找变为&lt;em&gt;两个维度&lt;/em&gt;：&lt;ol&gt;
&lt;li&gt;先查找作用域链上的当前节点对象（活动）&lt;/li&gt;
&lt;li&gt;然后查找该对象的原型链（如果有），一直查找到原型链顶端，遍历作用域链，重复1,2步&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;原型和原型链&quot;&gt;&lt;a href=&quot;#原型和原型链&quot; class=&quot;headerlink&quot; title=&quot;原型和原型链&quot;&gt;&lt;/a&gt;原型和原型链&lt;/h2&gt;&lt;p&gt;首先需要搞清楚的问题是：当我们谈论原型时，我们到底在谈什么？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个函数都有一个&lt;code&gt;prototype&lt;/code&gt;属性，它指向一个对象，该对象就是在当该函数用作构造函数创建对象实例时，作为其对象实例的原型。通过该函数构造的所有对象共享该原型中的方法和属性。函数是一个对象，它有自己的原型但不是&lt;code&gt;prototype&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;每个对象都有一个原型，根据浏览器不同一般表示为&lt;code&gt;[[Prototype]]&lt;/code&gt;或者&lt;code&gt;__proto__&lt;/code&gt;(好像已被最新标准实现)，这才是我们真正谈论的原型，它从哪里来呢，就是我们在第一点提到的构造函数的那个&lt;code&gt;prototype&lt;/code&gt;属性。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那么原型链是什么，用来干什么？&lt;br&gt;所有对象都有一个原型，而每个原型又有自己的一个原型，就样形成了原型链，原型链的顶端是[[object prototype]]，该原型对象的的原型为null，就是原型链的终点。&lt;br&gt;当查找一个对象的属性时，js会从对象自己开始，然后从对象原型开始向上遍历原型链，直到找到指定属性为止，但如果直到原型链终点都仍然没有找到指定的属性，就会返回undefined。&lt;br&gt;下面看一张图总结原型原型链，是鸟哥&lt;a href=&quot;http://www.laruence.com/2010/05/13/1462.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章中提到的一张图&lt;/a&gt;，被我改进了一下，不过相交的地方不太好，有空重构一下。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/20170310_prototype.jpg&quot; alt=&quot;prototype&quot;&gt;&lt;/p&gt;
&lt;p&gt;最后，我总结了一条关于原型原型链和作用域作用域链的明显区别：&lt;br&gt;原型原型链是用于在对象中查找属性和方法等标识符，作用域作用域链是用于查找变量和函数等标识符。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;若有错误，望不吝指正。&lt;br&gt;参考资料请见上一篇学习摘录。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;其实这篇总结问应该是在任务三的开始部分就完成的，但我一开始就投入了代码的怀抱，迟迟不肯动手，直到在任务三完成之后，并且在摸索任务四的时候才每天留了点时间将其完成。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;这几个js中的难点几乎每天都会准时出现在各大技术网站上，这让人不得不冲动自己也来总结一
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 186~233 天</title>
    <link href="http://archmee.github.io/201702/2017-02-27.html"/>
    <id>http://archmee.github.io/201702/2017-02-27.html</id>
    <published>2017-02-24T16:00:00.000Z</published>
    <updated>2017-03-12T18:28:11.097Z</updated>
    
    <content type="html">&lt;p&gt;从时间跨度上来说，几乎是两个月的时间，因为是在过年期间，所以会精力比较分散。&lt;br&gt;在1月下旬就完成了界面布局的工作，但是一直在思考尝试如何组织代码结构和数据结构。虽然说说网上有这方面的文章和书籍，但是我认为最开始还是要脱离别人的思维限制，先自己尝试更好，锻炼了自己的架构和思考能力，也会更清楚在无从下手到从0开发一个完整的项目的流程和遇到的问题，等完成后再对比成熟的方案也不失为一个好方案。在多次思考分析利弊之后，整个todo应用数据存储有了一个比较理想的方案，当然，数据都是存储在localStorage中，而整个软件采用模块模式来开发，但是被我分成了几个小模块。&lt;/p&gt;
&lt;h2 id=&quot;模块&quot;&gt;&lt;a href=&quot;#模块&quot; class=&quot;headerlink&quot; title=&quot;模块&quot;&gt;&lt;/a&gt;模块&lt;/h2&gt;&lt;p&gt;模块模式可以避免全局变量污染，并且可以很好的解耦。可能是我对模式的理解有偏差，我理想中应该是这样的架构，如下图，要涉及到发布/订阅模式以及MVC，但是不知道是否合适，因为js事件从本质来说就是发布/订阅模式（也可以说观察者）模式。毕竟是第一次实践设计模式的知识，只有慢慢试探了。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/20170310_jiagou1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;但是我最终完成的架构却是这样的，整个app分为4个模块，分类列表主要负责分类的列表数据和模板，todo列表负责分类的数据和模板，todo详情部分负责单条todo的详情和展示模板等，一个app部分负责协调上述几个部分的工作。这并不是很好的设计，最主要的问题是其中的模板对数据的依赖导致耦合严重，在后面的重构过程中将改变整个软件架构。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/20170310_jiagou2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;该应用的代码架构：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//分类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;categoryModule =  (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//操作 model &amp;amp; template&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//返回接口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//todo列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;todoModule =  (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//操作 model &amp;amp; template&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//返回接口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//todo详情&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;todoDetail = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//操作 model &amp;amp; template&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//返回接口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//app controller&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;appModule = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//code&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//初始化分类列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//初始化todo列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//初始化todo详情界面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//初始化事件绑定&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//等待用户交互触发事件并分发事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;数据存储&quot;&gt;&lt;a href=&quot;#数据存储&quot; class=&quot;headerlink&quot; title=&quot;数据存储&quot;&gt;&lt;/a&gt;数据存储&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;所有分类数据汇总存储到一个对象，每个分类就是该对象中一个用id作为键值的对象，这样做是为了方便按id索引单条分类数据，每条分类数据都是独立的，没有嵌套关系。&lt;/li&gt;
&lt;li&gt;整个对象中有一个在程序初始化时创建的分类对象作为顶级分类用于保存一级二级以及更多子分类，类似于DOM中的根节点。&lt;/li&gt;
&lt;li&gt;每个分类对象保存了父分类id和子分类id映射表和，熟悉DOM的同学一下就能get到这是借鉴了DOM的思想，不同的是这里不是保存引用。&lt;/li&gt;
&lt;li&gt;每个分类也保存了该分类下的todo列表映射，添加删除todo时要维护此表。&lt;/li&gt;
&lt;li&gt;todo数据是按照id单独存放的，也就是说，要获取todo，知道它的id后直接从localStorage中取出来，这样做也是因为方便对单条todo进行操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下是具体数据结构：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//分类列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;cid_1&quot;&lt;/span&gt;: &amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;cid_2&quot;&lt;/span&gt;: &amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//单条分类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;addTime&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1487710962417&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//添加时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;cid&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;cid_1487710962417&quot;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//分类id&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;pid&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;cid_0000000000001&quot;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//父分类id&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;title&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;未命名分类1&quot;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//分类名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;childCatList&quot;&lt;/span&gt;:[ &lt;span class=&quot;comment&quot;&gt;//保存直接子分类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;cid_1487883840564&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;cid_1487980933649&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;childTodoList&quot;&lt;/span&gt;:[ &lt;span class=&quot;comment&quot;&gt;//保存直接子todo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;tid_1487776376694&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;tid_1487776391312&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//单条todo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;addTime&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1487776376694&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//添加时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;tid&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;tid_1487776376694&quot;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//todo id&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;cid&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;cid_1487710962417&quot;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//分类id&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;emergency&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//紧急程度，暂时没用上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;title&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;未命名任务&quot;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//todo标题&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;content&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;出门交电费&quot;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//todo内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;status&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//状态1和-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;expireTime&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1487721600000&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//失效时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;完成&quot;&gt;&lt;a href=&quot;#完成&quot; class=&quot;headerlink&quot; title=&quot;完成&quot;&gt;&lt;/a&gt;完成&lt;/h2&gt;&lt;p&gt;在2月25号完成了该任务，翻看了一下IFE2015 task3的初级班和中级班的提交列表，发现自己实现得算是非常好的了，不过也花了好长时间。下面上图：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/2017-02-25_090953.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;遇到的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高度自适应布局，最开始我使用了float来布局，但是高度不能自适应&lt;br&gt;解决：最后在网上找到了高度自适应布局方案，使用了绝对定位技术，设置top和bottom为0或者你需要撑开的上下间隔即可。&lt;/li&gt;
&lt;li&gt;分类列表和todo列表设置了overflow:scroll，但是不管内容有没有超出滚动条都始终显示在那里很碍眼。&lt;br&gt;  解决：设置overflow为auto而不是scroll&lt;/li&gt;
&lt;li&gt;待解决：如何架构这个程序？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来的计划就是看完《设计模式》剩下的几章，以及刷一遍CSS3，ES6，然后开始学习React或者Vue就找工作了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这篇文章不是一笔写成，而是在完成任务三的过程中多次更新，所以不以发布时间为准。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;从时间跨度上来说，几乎是两个月的时间，因为是在过年期间，所以会精力比较分散。&lt;br&gt;在1月下旬就完成了界面布局的工作，但是一直在思考尝试如何组织代码结构和数据结构。虽然说说网上有这方面的文章和书籍，但是我认为最开始还是要脱离别人的思维限制，先自己尝试更好，锻炼了自己的架构和
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>IFE 2015 task3资料学习摘录</title>
    <link href="http://archmee.github.io/201702/2017-02-06-1.html"/>
    <id>http://archmee.github.io/201702/2017-02-06-1.html</id>
    <published>2017-01-31T16:00:00.000Z</published>
    <updated>2017-03-08T21:06:05.184Z</updated>
    
    <content type="html">&lt;h2 id=&quot;原型&quot;&gt;&lt;a href=&quot;#原型&quot; class=&quot;headerlink&quot; title=&quot;原型&quot;&gt;&lt;/a&gt;原型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;理解一个函数的原型属性(function’s prototype property )其实和实际的原型(prototype)没有关系对我们来说至关重要。&lt;/li&gt;
&lt;li&gt;A prototype chain is a finite chain of objects which is used to implemented inheritance and shared properties.（原型链是一个用于实现继承和共享属性的有限对象链）&lt;/li&gt;
&lt;li&gt;还有一点我们需要注意的是，我们可以赋值任何类型的对象到原型上，但是不能赋值原子类型的值，比如如下代码是无效的：&lt;code&gt;Cat.Prototype = 5;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;原型原型链是用于对象标识符查找（属性和方法），而作用域作用域链是用于普通标识符的查找（变量和函数）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;作用域、作用域链、闭包&quot;&gt;&lt;a href=&quot;#作用域、作用域链、闭包&quot; class=&quot;headerlink&quot; title=&quot;作用域、作用域链、闭包&quot;&gt;&lt;/a&gt;作用域、作用域链、闭包&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;当在函数中访问一个变量的时候，搜索顺序是先搜索自身的活动对象，如果存在则返回，如果不存在将继续搜索父函数的活动对象，依次查找，直到找到为止。如果整个作用域链上都无法找到，则返回undefined。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果函数存在Prototype原型对象，则在查找完自身的活动对象后再查找自身的原型对象，这就是Javascript中的变量查找机制。（&lt;strong&gt;经如下代码证明这一点是错误的&lt;/strong&gt;）&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;b&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        alert(i); &lt;span class=&quot;comment&quot;&gt;//0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        alert(y); &lt;span class=&quot;comment&quot;&gt;//error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        alert(x); &lt;span class=&quot;comment&quot;&gt;//error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    b.prototype.y=&lt;span class=&quot;string&quot;&gt;&#39;y=5&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.prototype.x=&lt;span class=&quot;string&quot;&gt;&#39;x=10&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; c=a();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在代码执行过程中，作用域链可以通过使用with语句和catch从句对象来增强（将它们的对象参数作为活动对象加入到作用域链顶端）。并且由于这些对象是简单的对象，它们可以拥有原型（和原型链）。这个事实导致作用域链查找变为&lt;em&gt;两个维度&lt;/em&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先是查找作用域链上的活动对象&lt;/li&gt;
&lt;li&gt;然后在每个作用域链上的活动对象上查找该对象的原型链（如果有原型）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注意，由于&lt;em&gt;每个&lt;/em&gt;（标准的）函数都在创建的时候保存了[[Scope]]，所以理论上来讲，ECMAScript中的&lt;em&gt;所有函数&lt;/em&gt;都是&lt;em&gt;闭包&lt;/em&gt;。&lt;br&gt;闭包是一个代码块（在ECMAScript是一个函数）和以静态方式/词法方式进行存储的所有父作用域的一个集合体。所以，通过这些存储的作用域，函数可以很容易的找到自由变量。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;this&quot;&gt;&lt;a href=&quot;#this&quot; class=&quot;headerlink&quot; title=&quot;this&quot;&gt;&lt;/a&gt;this&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;this始终指向此时函数/方法调用者，而不是在定义函数/方法时指向的对象。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;任何对象都可以作为上下文的this值。我想再次澄清对与ECMAScript中，与执行上下文相关的一些描述——特别是this的误解。通常，this 被错误地描述为变量对象（活动对象）的属性。 请牢记：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;this是执行上下文环境的一个属性，而不是某个变量对象/活动对象的属性&lt;br&gt;  这个特点很重要，因为和变量不同，this是没有一个类似搜寻变量的过程。当你在代码中使用了this，这个 this的值就直接从执行的上下文中获取了，而不会从作用域链中搜寻。this的值只取决于进入上下文时的情况。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注意this这个值在一个继承机制中，是指向它的当前对象，而不是从原型链上找到它时所属于的对象。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;有一种叫作冒充继承的方式代码如：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Cat.prototype = Animal.prototype;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样做的优点是效率比较高（不用执行和建立Animal的实例了），比较省内存。缺点是 Cat.prototype和Animal.prototype现在指向了同一个对象，那么任何对Cat.prototype的修改，都会反映到Animal.prototype。&lt;br&gt;为了解决这个问题，后来增加了一个在中间桥接的空白对象。&lt;br&gt;比如下面这个extend函数，就是YUI库如何实现继承的方法。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;extend&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;Child, Parent&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; F = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　F.prototype = Parent.prototype;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　Child.prototype = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; F();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　Child.prototype.constructor = Child;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　Child.uber = Parent.prototype;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;其他&quot;&gt;&lt;a href=&quot;#其他&quot; class=&quot;headerlink&quot; title=&quot;其他&quot;&gt;&lt;/a&gt;其他&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;JavaScript 不会保护 hasOwnProperty 被非法占用，因此如果一个对象碰巧存在这个属性，就需要使用外部的 hasOwnProperty 函数来获取正确的结果&lt;br&gt;// 使用{}对象的 hasOwnProperty&lt;br&gt;&lt;code&gt;{}.hasOwnProperty.call()&lt;/code&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在使用第三方JS类库的时候，往往有时候他们定义的原型方法是不能满足我们的需要，但是又离不开这个类库，所以这时候我们就需要重写他们的原型中的一个或者多个属性或function，我们可以通过声明的同样的名称（标识符）的形式来达到覆盖重写的功能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在浏览器中setTimeout、setInterval和匿名函数执行时的this是全局对象window&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;apply用于改变函数执行时的当前对象，当无参数时，当前对象为window，有参数时当前对象为该参数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;激活其它上下文的某个上下文被称为 调用者(caller) 。被激活的上下文被称为被调用者(callee) 。被调用者同时也可能是调用者(比如一个在全局上下文中被调用的函数调用某些自身的内部方法)。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;深入理解作用域&quot;&gt;&lt;a href=&quot;#深入理解作用域&quot; class=&quot;headerlink&quot; title=&quot;深入理解作用域&quot;&gt;&lt;/a&gt;深入理解作用域&lt;/h2&gt;&lt;p&gt;来自 &lt;a href=&quot;http://www.laruence.com/2009/05/28/863.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Javascript作用域原理：&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在JS中“一切皆是对象, 函数也是”&lt;/li&gt;
&lt;li&gt;在对应作用域内，函数定义会提升，但函数表达式没有提升&lt;/li&gt;
&lt;li&gt;JS权威指南中有一句很精辟的描述：“JavaScript中的函数运行在它们被定义的作用域里，而不是它们被执行的作用域里”&lt;/li&gt;
&lt;li&gt;ECMA262中所述作用域的实现：&lt;ol&gt;
&lt;li&gt;任何执行上下文时刻的作用域, 都是由作用域链(scope chain)来实现&lt;/li&gt;
&lt;li&gt;在一个函数被定义的时候, 会将该函数的&lt;code&gt;[[scope]]&lt;/code&gt;属性指向它此时的作用域链(scope chain)&lt;/li&gt;
&lt;li&gt;在一个函数被调用的时候，会创建一个活动对象，然后在活动对象中加入&lt;code&gt;this&lt;/code&gt;和&lt;code&gt;arguments&lt;/code&gt;属性，对于每一个函数的形参和变量，都命名为该活动对象的命名属性, 然后将这个活动对象加入到此时的作用域链的最前端&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;在调用函数执行之前, 会首先创建一个活动对象, 然后搜寻这个函数中的形参、局部变量定义和函数定义, 将它们作为这个活动对象的同名属性, 对于形参则直接赋值，对于局部变量定义，变量的值会在真正执行的时候才计算，此时只是简单的赋为&lt;code&gt;undefined&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;JS作为一门解释执行的语言其实是有预编译的过程的, JS在执行每一段代码之前, 都会首先处理&lt;code&gt;var&lt;/code&gt;关键字和&lt;code&gt;function&lt;/code&gt;定义式(函数定义式和函数表达式)。&lt;/li&gt;
&lt;li&gt;JS的预编译是以段为处理单元的… 而段是按&lt;code&gt;script&lt;/code&gt;标记来分的，所以一个script就是一个处理单元。　&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;来自 &lt;a href=&quot;http://www.cnblogs.com/lhb25/archive/2011/09/06/javascript-scope-chain.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;理解 JavaScript 作用域和作用域链&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数对象和其它对象一样，拥有可以通过代码访问的属性和一系列仅供JS引擎访问的内部属性。其中一个内部属性是&lt;code&gt;[[Scope]]&lt;/code&gt;，由ECMA-262标准第三版定义，该内部属性包含了函数被创建的作用域中对象的集合，这个集合被称为函数的作用域链，它决定了哪些数据能被函数访问。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在定义函数时，它的作用域链中会填入一个全局对象，该全局对象包含了所有全局变量，如下图所示（注意：图片只例举了全部变量中的一部分）：&lt;br&gt;&lt;img src=&quot;http://pic002.cnblogs.com/images/2011/36987/2011090414435366.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;执行此函数时会创建一个称为“运行时上下文(execution context)”的内部对象，运行时上下文定义了函数执行时的环境。每个运行时上下文都有自己的作用域链，用于标识符解析，当运行时上下文被创建时，它的作用域链初始化为当前运行函数的[[Scope]]所包含的对象。&lt;br&gt;而形参和变量按照它们出现在函数中的顺序被复制到运行时上下文的作用域链中。它们共同组成了一个新的对象，叫“活动对象(activation object)”，该对象包含了函数的所有局部变量、命名参数、&lt;code&gt;arguments&lt;/code&gt;以及&lt;code&gt;this&lt;/code&gt;，然后此对象会被加入到作用域链的前端，当运行期上下文被销毁，活动对象也随之销毁。新的作用域链如下图所示：&lt;br&gt;&lt;img src=&quot;http://pic002.cnblogs.com/images/2011/36987/2011090414444843.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从作用域链的结构可以看出，在运行期上下文的作用域链中，标识符所在的位置越深，读写速度就会越慢。如上图所示，因为全局变量总是存在于运行期上下文作用域链的最末端，因此在标识符解析的时候，查找全局变量是最慢的。所以，在编写代码的时候应尽量少使用全局变量，尽可能使用局部变量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;函数每次执行时对应的运行期上下文都是独一无二的，所以多次调用同一个函数就会导致创建多个运行期上下文，当函数执行完毕，执行上下文会被销毁。每一个运行期上下文都和一个作用域链关联。一般情况下，在运行期上下文运行的过程中，其作用域链只会被&lt;code&gt;with&lt;/code&gt;语句和&lt;code&gt;catch&lt;/code&gt;语句影响。&lt;br&gt;当代码运行到with语句时，运行期上下文的作用域链临时被改变了。一个新的可变对象被创建，它包含了参数指定的对象的所有属性。这个对象将被推入作用域链的头部，这意味着该函数的所有局部变量现在处于第二个作用域链对象中，因此访问代价更高了。如下图所示：&lt;br&gt;&lt;img src=&quot;http://pic002.cnblogs.com/images/2011/36987/2011090414454524.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;当try代码块中发生错误时，执行过程会跳转到catch语句，然后把异常对象推入一个可变对象并置于作用域链的头部。在catch代码块内部，函数的所有局部变量将会被放在第二个作用域链对象中，此时的作用域链图和上图类似。&lt;br&gt;因此在程序中应避免使用with语句，由于try-catch语句在代码调试和异常处理中非常有用，因此不建议完全避免，可通过优化代码来减少catch语句对性能的影响。一个很好的模式是将错误委托给一个函数处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;学习时，发现部分链接已经无效，并且自己补充了一些。&lt;/p&gt;
&lt;p&gt;js基础：&lt;br&gt;&lt;a href=&quot;http://weizhifeng.net/javascript-the-core.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://weizhifeng.net/javascript-the-core.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://dmitrysoshnikov.com/ecmascript/javascript-the-core/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://dmitrysoshnikov.com/ecmascript/javascript-the-core/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.nowamagic.net/librarys/veda/detail/1643&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.nowamagic.net/librarys/veda/detail/1643&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.nowamagic.net/librarys/veda/detail/1644&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.nowamagic.net/librarys/veda/detail/1644&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.nowamagic.net/librarys/veda/detail/1645&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.nowamagic.net/librarys/veda/detail/1645&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;面向对象：&lt;br&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2010/05/object-ooriented_javascript_encapsulation.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.ruanyifeng.com/blog/2010/05/object-ooriented_javascript_encapsulation.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance_continued.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance_continued.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.nowamagic.net/librarys/veda/detail/1642&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.nowamagic.net/librarys/veda/detail/1642&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/fool/archive/2010/10/16/1853126.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/fool/archive/2010/10/16/1853126.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/sanshi/archive/2009/07/08/1519036.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/sanshi/archive/2009/07/08/1519036.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;this：&lt;br&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/cn/web/1207_wangqf_jsthis/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.ibm.com/developerworks/cn/web/1207_wangqf_jsthis/index.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/justany/archive/2012/11/01/the_keyword_this_in_javascript.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/justany/archive/2012/11/01/the_keyword_this_in_javascript.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.nowamagic.net/librarys/veda/detail/1647&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.nowamagic.net/librarys/veda/detail/1647&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原型：&lt;br&gt;&lt;a href=&quot;http://blog.jobbole.com/9648/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.jobbole.com/9648/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.nowamagic.net/librarys/veda/detail/1641&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.nowamagic.net/librarys/veda/detail/1641&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.nowamagic.net/librarys/veda/detail/1648&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.nowamagic.net/librarys/veda/detail/1648&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/wangfupeng1988/p/3977924.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/wangfupeng1988/p/3977924.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;闭包：&lt;br&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/rubylouvre/archive/2009/07/24/1530074.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/rubylouvre/archive/2009/07/24/1530074.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://coolshell.cn/articles/6731.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://coolshell.cn/articles/6731.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://kb.cnblogs.com/page/105708/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://kb.cnblogs.com/page/105708/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.nowamagic.net/librarys/veda/detail/1646&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.nowamagic.net/librarys/veda/detail/1646&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;原型&quot;&gt;&lt;a href=&quot;#原型&quot; class=&quot;headerlink&quot; title=&quot;原型&quot;&gt;&lt;/a&gt;原型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;理解一个函数的原型属性(function’s prototype property )其实和实际的原型(prototype)没有
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 174~185 天</title>
    <link href="http://archmee.github.io/201701/2017-01-08.html"/>
    <id>http://archmee.github.io/201701/2017-01-08.html</id>
    <published>2017-01-07T16:00:00.000Z</published>
    <updated>2017-03-12T18:50:14.996Z</updated>
    
    <content type="html">&lt;p&gt;这10天看完了《Head First HTML5》和IFE2015春Task3的参考资料，对this、闭包、作用域和作用域链、原型和原型链都有了更深的理解，但是自己的总结还没写，估计下一篇博客内容就是总结js中这几个非常核心的知识点，脑海中已经有了大概的雏形，希望尽量简洁，一针见血掐中要害。&lt;/p&gt;
&lt;h2 id=&quot;HTML5&quot;&gt;&lt;a href=&quot;#HTML5&quot; class=&quot;headerlink&quot; title=&quot;HTML5&quot;&gt;&lt;/a&gt;HTML5&lt;/h2&gt;&lt;p&gt;《Head First HTML5》在一年多以前看过一遍，当时在没有系统学习js基础的情况下看完了，但在现在看来当时并没有完全看懂，但至少h5的关键技术都知道了，想来和前面4章讲了js的基础还是有很大关系的，其实我更希望省略掉前面4章，因为毕竟作为想学习h5的人来说应该已经通过其他书籍对js有了系统的学习，所以这4章对js的入门讲解就显得很鸡肋，因为对没学过js的人通过这4章根本学不会js，已经学会js的又不需要，所以这4章只是徒增了这本书的厚度，导致读起来非常不爽快，而且违背了该书的“节约纸张”的基本信条（因为该书到处都在提醒读者他们为了节约纸张省略了部分代码）。但是后面6章还是真的深入浅出的讲解了h5的几个关键技术：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5.地理定位&lt;/li&gt;
&lt;li&gt;6.JSONP跨域（这个不属于h5）&lt;/li&gt;
&lt;li&gt;7.Canvas画布&lt;/li&gt;
&lt;li&gt;8.Video&lt;/li&gt;
&lt;li&gt;9.本地存储localStorage&lt;/li&gt;
&lt;li&gt;10.Web多线程（Worker）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;IFE2015-Task3&quot;&gt;&lt;a href=&quot;#IFE2015-Task3&quot; class=&quot;headerlink&quot; title=&quot;IFE2015 Task3&quot;&gt;&lt;/a&gt;IFE2015 Task3&lt;/h2&gt;&lt;p&gt;在&lt;a href=&quot;https://github.com/baidu-ife/ife/tree/master/2015_spring/task/task0003&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IFE2015 Task3&lt;/a&gt; 页面提供了很多深入学习js的参考资料，我看了大部分，除了《Eloquent JavaScript》和javascript设计模式相关的内容，因为我的案头边就有一本正在看的《JavaScript设计模式》，而且设计模式这个内容不是看看书就能学好的，而是要通过大量代码实践才能学习其精华，所以目前只需要了解即可。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;看完学习资料摘录片段也总结成了一篇博客&lt;/li&gt;
&lt;li&gt;和一篇学习笔记总结有关this、闭包、作用域作用域链、原型和原型链&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Next&quot;&gt;&lt;a href=&quot;#Next&quot; class=&quot;headerlink&quot; title=&quot;Next&quot;&gt;&lt;/a&gt;Next&lt;/h2&gt;&lt;p&gt;下一步主要有下面几件事&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;总结前面提到的javascript中关于this、闭包、作用域作用域链、原型和原型链的学习笔记&lt;/li&gt;
&lt;li&gt;完成IFE2015 Task3的TODO应用&lt;/li&gt;
&lt;li&gt;以及更多还没学习的东西如编码规范、响应式布局、CSS3、Less、Sass、PostCSS、BootStrap、ES6、webpack或gulp、JQ、移动端、SPA、NodeJS、Vue和React至少要学习一个&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这10天看完了《Head First HTML5》和IFE2015春Task3的参考资料，对this、闭包、作用域和作用域链、原型和原型链都有了更深的理解，但是自己的总结还没写，估计下一篇博客内容就是总结js中这几个非常核心的知识点，脑海中已经有了大概的雏形，希望尽量简洁，
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 159~173 天</title>
    <link href="http://archmee.github.io/201612/2016-12-27.html"/>
    <id>http://archmee.github.io/201612/2016-12-27.html</id>
    <published>2016-12-25T16:00:00.000Z</published>
    <updated>2016-12-26T20:00:29.258Z</updated>
    
    <content type="html">&lt;p&gt;这十几天做的事情很少，很少看书，都在写代码，但是代码也写得很少，最开始只是单纯想写一个手风琴图片效果，但是找到一个手风琴的菜单，也想尝试一下，就同时设计写了几个菜单效果，但在实现的时候，可能是在大半夜思路不清晰的原因，导致写的代码混乱，对事件的处理也很混乱，在终于完成了几个效果后，几天前开始了重构，一下子就思路清晰了很多，代码实现思路也更简单，省去了些代码行数，今天在终于实现了手风琴图盘效果后，才想起最近的总结还没完成。&lt;/p&gt;
&lt;p&gt;中间还看了IFE2015 task3的几篇关于作用域链和原型链的文章，除了理解作用域链和原型链外，还对其他几方面诸如闭包/this理解都更加清晰了。&lt;/p&gt;
&lt;p&gt;今晚上对move.js（个人在完善的一个动画函数）进行了更新，加入了对 &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;requestAnimationFrame&lt;/a&gt; 的支持，这个方法是用来在页面重绘之前，通知浏览器调用一个指定的函数，以满足开发者操作动画的需求。这样就可以将原来使用setTimeout的动画作为一种降级方案，当然只有比较新的浏览器才支持这个API，所以我是用了&lt;a href=&quot;https://www.paulirish.com/2011/requestanimationframe-for-smart-animating/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章: requestAnimationFrame for Smart Animating&lt;/a&gt;中提到的Erik Möller提供的Polyfill&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; lastTime = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; vendors = [&lt;span class=&quot;string&quot;&gt;&#39;webkit&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;moz&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; x &amp;lt; vendors.length &amp;amp;&amp;amp; !&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.requestAnimationFrame; ++x) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.requestAnimationFrame = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;[vendors[x]+&lt;span class=&quot;string&quot;&gt;&#39;RequestAnimationFrame&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.cancelAnimationFrame =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;[vendors[x]+&lt;span class=&quot;string&quot;&gt;&#39;CancelAnimationFrame&#39;&lt;/span&gt;] || &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;[vendors[x]+&lt;span class=&quot;string&quot;&gt;&#39;CancelRequestAnimationFrame&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.requestAnimationFrame)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.requestAnimationFrame = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;callback, element&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; currTime = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;().getTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; timeToCall = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.max(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt; - (currTime - lastTime));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; id = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; callback(currTime + timeToCall); &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              timeToCall);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            lastTime = currTime + timeToCall;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; id;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.cancelAnimationFrame)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.cancelAnimationFrame = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;id&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            clearTimeout(id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上文提到的几个效果：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Archmee/Front-End-Demo/tree/master/fancy/dropdown-menu&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;几个菜单&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/dropmenu.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Archmee/Front-End-Demo/blob/master/fancy/shoufengqin.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;手风琴图片&lt;/a&gt;（图片来自C&amp;amp;A官网，侵删）&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/shoufengqin.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这十几天做的事情很少，很少看书，都在写代码，但是代码也写得很少，最开始只是单纯想写一个手风琴图片效果，但是找到一个手风琴的菜单，也想尝试一下，就同时设计写了几个菜单效果，但在实现的时候，可能是在大半夜思路不清晰的原因，导致写的代码混乱，对事件的处理也很混乱，在终于完成了几个
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 158 天</title>
    <link href="http://archmee.github.io/201612/2016-12-12.html"/>
    <id>http://archmee.github.io/201612/2016-12-12.html</id>
    <published>2016-12-11T16:00:00.000Z</published>
    <updated>2017-04-07T22:32:35.835Z</updated>
    
    <content type="html">&lt;h1 id=&quot;javascript语言精粹简要笔记&quot;&gt;&lt;a href=&quot;#javascript语言精粹简要笔记&quot; class=&quot;headerlink&quot; title=&quot;javascript语言精粹简要笔记&quot;&gt;&lt;/a&gt;javascript语言精粹简要笔记&lt;/h1&gt;&lt;p&gt;由于个人很喜欢DC这本书的这种开篇方式，所以将其对莎士比亚著作的引用也写进来了，以下如未做特殊说明，引用内容均来自该书。&lt;/p&gt;
&lt;p&gt;##1. 精华&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;……我不过略有些讨人喜欢的地方而已，怎么会有什么迷人的魔力？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;2-语法&quot;&gt;&lt;a href=&quot;#2-语法&quot; class=&quot;headerlink&quot; title=&quot;2. 语法&quot;&gt;&lt;/a&gt;2. 语法&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;我很熟悉它，早就在文法书上念过了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作者用铁路图（语法图）来表示了js语法中的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空白，多行注释&lt;code&gt;/**/&lt;/code&gt;会和&lt;code&gt;/a*/&lt;/code&gt;这样的正则表达式冲突&lt;/li&gt;
&lt;li&gt;标识符，可以以字母、下划线、美元符号开头&lt;/li&gt;
&lt;li&gt;数字，js只有一个数字类型，内部表示为64位浮点数，isNaN可以检测NaN类型&lt;/li&gt;
&lt;li&gt;字符串，字符串一旦创建，就不可变&lt;/li&gt;
&lt;li&gt;语句，js的代码块不会创建新的作用域&lt;/li&gt;
&lt;li&gt;表达式&lt;/li&gt;
&lt;li&gt;字面量&lt;/li&gt;
&lt;li&gt;函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3-对象&quot;&gt;&lt;a href=&quot;#3-对象&quot; class=&quot;headerlink&quot; title=&quot;3. 对象&quot;&gt;&lt;/a&gt;3. 对象&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;对于丑陋的事物，爱会闭目无视&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;js对象是可变的键值对集合，属性名可以是包括空字符串在内的任意字符串，属性值可以是除了&lt;code&gt;undefined&lt;/code&gt;外的任何值&lt;/li&gt;
&lt;li&gt;每个对象都连接到一个原型对象，所有通过对象字面量创建的对象都连接到&lt;code&gt;Object.prototype&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;从原型链中检索属性值的过程称为委托&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;4-函数&quot;&gt;&lt;a href=&quot;#4-函数&quot; class=&quot;headerlink&quot; title=&quot;4. 函数&quot;&gt;&lt;/a&gt;4. 函数&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;所有的过失都在未犯以前，都已定下应处的惩罚&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;js中函数就是对象&lt;/li&gt;
&lt;li&gt;调用一个函数会暂停当前函数的执行，传递控制权和参数给新函数，除了声明时定义的形参，每个函数还接收两个附加参数&lt;code&gt;this&lt;/code&gt;和&lt;code&gt;arguments&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this&lt;/code&gt;的值取决于调用的模式，js中一共有4中调用模式：&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;方法调用模式&lt;/strong&gt;，一个函数作为对象的属性就是方法，当一个方法被调用时，&lt;code&gt;this&lt;/code&gt;被绑定到该对象&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;函数调用模式&lt;/strong&gt;，一个普通函数(非方法)被调用时，&lt;code&gt;this&lt;/code&gt;绑定到全局对象&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;构造器调用模式&lt;/strong&gt;，在一个函数前带上&lt;code&gt;new&lt;/code&gt;关键字来调用，内部会创建一个连接到该函数原型的新对象，同时&lt;code&gt;this&lt;/code&gt;被绑定到那个新对象上&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;apply调用模式&lt;/strong&gt;，js提供了&lt;code&gt;apply&lt;/code&gt;和&lt;code&gt;call&lt;/code&gt;两个方法来更改&lt;code&gt;this&lt;/code&gt;的绑定对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arguments&lt;/code&gt;保存了调用时的参数列表，它只是一个‘类数组对象’，除了有一个length属性外，没有任何数组方法&lt;/li&gt;
&lt;li&gt;js允许给语言的基本类型扩充功能&lt;/li&gt;
&lt;li&gt;js只有函数作用域和全局作用域&lt;/li&gt;
&lt;li&gt;可以使用函数和闭包来构建模块，模块模式的一般形式是：一个定义了私有变量和函数的的函数；利用闭包可以创建可以访问私有变量和函数的特权函数；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;5-继承&quot;&gt;&lt;a href=&quot;#5-继承&quot; class=&quot;headerlink&quot; title=&quot;5. 继承&quot;&gt;&lt;/a&gt;5. 继承&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;……往往会把一件完整的东西化成无数的形象，就像凹凸镜一般，从正面望去，只见一片模糊&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本章作者介绍了几种实现继承的方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;伪类：用繁琐的模仿其他面向对象语言的方式来实现继承&lt;/li&gt;
&lt;li&gt;原型：也叫差异化继承，通过创建一个父类对象，然后在其基础上添加自定义属性&lt;/li&gt;
&lt;li&gt;函数化：也叫应用模块模式，通过4个步骤来实现&lt;ol&gt;
&lt;li&gt;创建一个新对象&lt;/li&gt;
&lt;li&gt;有选择的定义私有变量和方法&lt;/li&gt;
&lt;li&gt;给这个新对象扩充方法&lt;/li&gt;
&lt;li&gt;返回那个对象&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;6-数组&quot;&gt;&lt;a href=&quot;#6-数组&quot; class=&quot;headerlink&quot; title=&quot;6. 数组&quot;&gt;&lt;/a&gt;6. 数组&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;你这披着羊皮的狼，我要把你赶走&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;js数组的length没有上界&lt;/li&gt;
&lt;li&gt;js数组也是对象，js中一切皆对象&lt;/li&gt;
&lt;li&gt;使用数组还是对象？一个简单的规则是：当属性名是小而连续的整数时，使用数组，否则使用对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;7-正则表达式&quot;&gt;&lt;a href=&quot;#7-正则表达式&quot; class=&quot;headerlink&quot; title=&quot;7. 正则表达式&quot;&gt;&lt;/a&gt;7. 正则表达式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;相反地，选到一个称心如意的配偶，就能百年谐和，幸福无穷&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;js中会用到正则表达式的方法有：&lt;code&gt;regexp.exec&lt;/code&gt;、 &lt;code&gt;regexp.test&lt;/code&gt;、&lt;code&gt;string.match&lt;/code&gt;、&lt;code&gt;string.replace&lt;/code&gt;、 &lt;code&gt;string.split&lt;/code&gt;、&lt;code&gt;string.search&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;正则表达式分组&lt;ul&gt;
&lt;li&gt;捕获型&lt;code&gt;()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;非捕获型&lt;code&gt;(?:)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;向前正匹配&lt;code&gt;(?=)&lt;/code&gt;（！bad）&lt;/li&gt;
&lt;li&gt;向前负匹配&lt;code&gt;(?!)&lt;/code&gt; （！bad）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;8-方法&quot;&gt;&lt;a href=&quot;#8-方法&quot; class=&quot;headerlink&quot; title=&quot;8. 方法&quot;&gt;&lt;/a&gt;8. 方法&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;他虽疯，但却有他的一套理论&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;9-代码风格&quot;&gt;&lt;a href=&quot;#9-代码风格&quot; class=&quot;headerlink&quot; title=&quot;9. 代码风格&quot;&gt;&lt;/a&gt;9. 代码风格&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;好一串嘟嘟囔囔的头衔！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;讲了作者推崇的一些风格，比如缩进4个空格、不允许case语句穿越、唯一全局变量等等&lt;/p&gt;
&lt;h2 id=&quot;10-优美的特性&quot;&gt;&lt;a href=&quot;#10-优美的特性&quot; class=&quot;headerlink&quot; title=&quot;10. 优美的特性&quot;&gt;&lt;/a&gt;10. 优美的特性&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;我让你的脚玷污我的嘴唇，让你的肖像玷污我的眼睛，让你的每一部分玷污我的心，等候着你的答复&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;附录A-毒瘤&quot;&gt;&lt;a href=&quot;#附录A-毒瘤&quot; class=&quot;headerlink&quot; title=&quot;附录A. 毒瘤&quot;&gt;&lt;/a&gt;附录A. 毒瘤&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;那会在一言一行中证明其可怕&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;js对全局变量的依赖降低了程序的可靠性&lt;/li&gt;
&lt;li&gt;由于js有函数作用域但是没有块级作用域，所以更好的方式是在每个函数开头部分声明所有变量&lt;/li&gt;
&lt;li&gt;由于js的自动插入分号机制，建议将&lt;code&gt;{&lt;/code&gt;放在上一行的结束而不是新行&lt;/li&gt;
&lt;li&gt;Unicode把一对字符视为一个单一字符，js认为一对字符是两个不同的字符&lt;/li&gt;
&lt;li&gt;第二个可选参数是基数，建议总是带上10作为基数&lt;/li&gt;
&lt;li&gt;js没有真正的数组&lt;/li&gt;
&lt;li&gt;js中的众多假值，如下表：&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;值&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;“abc”&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;null&lt;/td&gt;
&lt;td&gt;Object&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;undefined&lt;/td&gt;
&lt;td&gt;Undefined&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;hasOwnProperty可以被重写覆盖&lt;/li&gt;
&lt;li&gt;js中的对象永远不会是真的空对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;附录B-糟粕&quot;&gt;&lt;a href=&quot;#附录B-糟粕&quot; class=&quot;headerlink&quot; title=&quot;附录B. 糟粕&quot;&gt;&lt;/a&gt;附录B. 糟粕&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;现在要请你告诉我，你究竟为了我哪一点坏处而开始爱我起来呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;===&lt;/code&gt;和&lt;code&gt;!==&lt;/code&gt;来判断是否相等，而不是&lt;code&gt;==&lt;/code&gt;和&lt;code&gt;!=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;避免使用with，除了不可预料外，它还会阻断变量名的词法作用域绑定&lt;/li&gt;
&lt;li&gt;避免使用eval，由于它需要运行编译器，所以降低了语言的性能，还削弱了程序的安全性，除此之外，也尽量避免Function构造器、setTimeout和setInterval的字符串形式的参数&lt;/li&gt;
&lt;li&gt;移除continue会使性能得到改善&lt;/li&gt;
&lt;li&gt;避免使用switch语句的case条件穿越&lt;/li&gt;
&lt;li&gt;对&lt;code&gt;if&lt;/code&gt;,&lt;code&gt;while&lt;/code&gt;,&lt;code&gt;do&lt;/code&gt;,&lt;code&gt;for&lt;/code&gt;总是使用代码块&lt;/li&gt;
&lt;li&gt;将&lt;code&gt;++&lt;/code&gt;和&lt;code&gt;--&lt;/code&gt;替换为&lt;code&gt;+=&lt;/code&gt;和&lt;code&gt;-=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;js位运算的多次转换反而会降低位运算带来的性能提高&lt;/li&gt;
&lt;li&gt;使用function表达式而不是语句&lt;/li&gt;
&lt;li&gt;js有一套类型的包装对象，应该尽量避免使用基本类型值的包装对象来创建基本类型&lt;/li&gt;
&lt;li&gt;对于js中的对象，一个更好的策略是不使用new（个人感觉没必要）&lt;/li&gt;
&lt;li&gt;避免使用void&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;javascript语言精粹简要笔记&quot;&gt;&lt;a href=&quot;#javascript语言精粹简要笔记&quot; class=&quot;headerlink&quot; title=&quot;javascript语言精粹简要笔记&quot;&gt;&lt;/a&gt;javascript语言精粹简要笔记&lt;/h1&gt;&lt;p&gt;由于个人很喜
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 155~157 天</title>
    <link href="http://archmee.github.io/201612/2016-12-11.html"/>
    <id>http://archmee.github.io/201612/2016-12-11.html</id>
    <published>2016-12-11T05:11:00.000Z</published>
    <updated>2016-12-11T09:18:21.886Z</updated>
    
    <content type="html">&lt;p&gt;在完成任务ife2015任务二中遇到的问题和解决方案：&lt;br&gt;&lt;strong&gt;ps&lt;/strong&gt;：很多和 &lt;a href=&quot;https://github.com/baidu-ife/ife/blob/master/2015_spring/task/task0002/review/IFE-review.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ife review&lt;/a&gt; 重复的地方不再列出&lt;/p&gt;
&lt;h2 id=&quot;util-js&quot;&gt;&lt;a href=&quot;#util-js&quot; class=&quot;headerlink&quot; title=&quot;util.js&quot;&gt;&lt;/a&gt;util.js&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;低版本浏览器没有Array.indexOf方法，使用了&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MDN的indexOf Polyfill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;低版本浏览器没有Object.keys方法，也使用了&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MDN的keys Polyfill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;遍历对象的时候要使用hasDontEnumerBug和propertyIsEnumerable（已解决：用了MDN提供的object.keys的pollyfill）&lt;br&gt;疑：不是用hasOwnProperty方法可以解决吗???&lt;/li&gt;
&lt;li&gt;获取元素在窗口中的位置除了用offsetParent遍历的方法外还有getBoundingClientRect的方法（已解决，直接调用）&lt;/li&gt;
&lt;li&gt;setCookie调用差8个小时，好像UTC的问题(已解决，不用toUTCString()而用toString，在没找到好的解决方案前暂时这样)&lt;/li&gt;
&lt;li&gt;$方法的改进，比如按照属性值匹配那个没有加tag（已解决），比如是否可以采用更优的从右向左扫描(放弃)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;task0003&quot;&gt;&lt;a href=&quot;#task0003&quot; class=&quot;headerlink&quot; title=&quot;task0003&quot;&gt;&lt;/a&gt;task0003&lt;/h2&gt;&lt;h3 id=&quot;轮播图小点li在在父元素ul中水平居中方法&quot;&gt;&lt;a href=&quot;#轮播图小点li在在父元素ul中水平居中方法&quot; class=&quot;headerlink&quot; title=&quot;轮播图小点li在在父元素ul中水平居中方法&quot;&gt;&lt;/a&gt;轮播图小点li在在父元素ul中水平居中方法&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;父元素text-align:center,子元素要为inline或inline-block&lt;/li&gt;
&lt;li&gt;父元素不用设置，子元素要为block类型，子元素设置margin:0 auto; display:table;&lt;/li&gt;
&lt;li&gt;通过定位，父元素设置相对定位:&lt;ul&gt;
&lt;li&gt;子元素定宽，然后绝对定位，left和right都为0，margin:0 auto;&lt;/li&gt;
&lt;li&gt;子元素定宽，然后绝对定位，{left:50%; margin-left:-50%;} 问题是通常不确定子元素的宽度&lt;/li&gt;
&lt;li&gt;子元素绝对定位，{left:50%; transform:translateX(-50%);}（ie9不兼容）&lt;/li&gt;
&lt;li&gt;父和子之间需要一层包裹wrap，wrap要设置为绝对定位并left:50%; 然后子元素相对定位, 然后left:-50%（注意是负值）（未验证！！！）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;父元素用flex显示，个人还没学过，暂不详解，但兼容性不好&lt;ul&gt;
&lt;li&gt;父元素display:flex，然后justify-content: center;&lt;/li&gt;
&lt;li&gt;父元素display:flex，子元素margin:0 auto;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用以上方法需要定宽的，可以在js运行时获取子元素宽度，然后就好办了&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;轮播图上下一张按钮的垂直居中&quot;&gt;&lt;a href=&quot;#轮播图上下一张按钮的垂直居中&quot; class=&quot;headerlink&quot; title=&quot;轮播图上下一张按钮的垂直居中&quot;&gt;&lt;/a&gt;轮播图上下一张按钮的垂直居中&lt;/h3&gt;&lt;p&gt;绝对定位且是inline-block的a元素要实现在父元素中垂直居中，父元素中vertical-align不起作用，因为vertical-align是对inline元素，line-height设在a上是a的行高，结果是a中的元素垂直居中，而line-height设置在父元素上的话，a由于是绝对定位，所以会出现了a中的文字垂直居中了，而a还在绝对定位的初始位置，这并不是想要的效果。&lt;br&gt;针对绝对定位且定宽高的元素垂直居中，网上找到的解决方案是：&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123; &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;top&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;bottom&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; auto &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;小结：&lt;/strong&gt;&lt;br&gt;通过上两个居中案例得出，如果一个固定宽高绝对定位的block元素要在父元素中水平居中对齐或者垂直居中对齐，可用top和bottom为0(垂直)，left和bottom为0(水平)，或4个方向都为0(水平垂直居中)，并同时使用&lt;code&gt;margin:auto&lt;/code&gt;可实现，当然，如果如果该元素不是绝对定位且定宽高的block元素的话，可使用其他方案（上述中block也包括inline-block）&lt;/p&gt;
&lt;h3 id=&quot;背景透明，文字不透明的解决方案&quot;&gt;&lt;a href=&quot;#背景透明，文字不透明的解决方案&quot; class=&quot;headerlink&quot; title=&quot;背景透明，文字不透明的解决方案&quot;&gt;&lt;/a&gt;背景透明，文字不透明的解决方案&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/PeunZhang/p/4089894.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;来自该文章链接#10楼评论&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;兼容IE，栗如：&lt;br&gt;非IE：&lt;code&gt;background:rgba(0,0,0,0.5);&lt;/code&gt;&lt;br&gt;IE：&lt;code&gt;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#7f000000,endColorstr=#7f000000);&lt;/code&gt;&lt;br&gt;rgba和IE下filter数值的转换：&lt;br&gt;rgba透明值 =&amp;gt; IE filter值&lt;br&gt;0.1 =&amp;gt; 19&lt;br&gt;0.2 =&amp;gt; 33&lt;br&gt;0.3 =&amp;gt; 4C&lt;br&gt;0.4 =&amp;gt; 66&lt;br&gt;0.5 =&amp;gt; 7F&lt;br&gt;0.6 =&amp;gt; 99&lt;br&gt;0.7 =&amp;gt; B2&lt;br&gt;0.8 =&amp;gt; C8&lt;br&gt;0.9 =&amp;gt; E5&lt;br&gt;转换公式：alpha*255再转换成16进制即可&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意1&lt;/strong&gt;：使用filter的时候background要使用IE不支持的方式，比如rgba，否则话会导致background生效而filter无效&lt;br&gt;&lt;strong&gt;注意2&lt;/strong&gt;：最好和下面提到的兼容样式方法结合起来使用&lt;/p&gt;
&lt;h3 id=&quot;IE6-7的链接虚线外框&quot;&gt;&lt;a href=&quot;#IE6-7的链接虚线外框&quot; class=&quot;headerlink&quot; title=&quot;IE6/7的链接虚线外框&quot;&gt;&lt;/a&gt;IE6/7的链接虚线外框&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/something/archive/2013/05/21/3090428.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;css去掉a标签点击后的虚线框&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;&amp;#123; &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;blr&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;function&quot;&gt;expression&lt;/span&gt;(this.onFocus=this.&lt;span class=&quot;function&quot;&gt;blur&lt;/span&gt;())&lt;/span&gt;&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当然css表达式不是一种好的方案，但如果和下面提到的兼容样式结合起来就会好很多，至少可以将通用css和兼容特定浏览器的css分开来&lt;/p&gt;
&lt;h3 id=&quot;兼容样式&quot;&gt;&lt;a href=&quot;#兼容样式&quot; class=&quot;headerlink&quot; title=&quot;兼容样式&quot;&gt;&lt;/a&gt;兼容样式&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/PeunZhang/archive/2012/04/09/2437563.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS hack方案整理&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 支持IE6、7 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;at_rule&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;media&lt;/span&gt; screen\&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;comment&quot;&gt;/*兼容ie67的css*/&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 支持IE8 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;at_rule&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;media&lt;/span&gt; \&lt;span class=&quot;number&quot;&gt;0s&lt;/span&gt;creen\ &lt;/span&gt;&amp;#123;&lt;span class=&quot;comment&quot;&gt;/*兼容ie8的css*/&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 支持IE6、7、8 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;at_rule&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;media&lt;/span&gt;  \&lt;span class=&quot;number&quot;&gt;0s&lt;/span&gt;creen\,screen\&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;span class=&quot;comment&quot;&gt;/*兼容ie678的css*/&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;task0004&quot;&gt;&lt;a href=&quot;#task0004&quot; class=&quot;headerlink&quot; title=&quot;task0004&quot;&gt;&lt;/a&gt;task0004&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;监听text/search等文本框的输入时除了要监听input事件还要在ie8及低版本浏览器中监听propertychange事件&lt;/li&gt;
&lt;li&gt;唯独ie9在按删除键时不会触发input或propertychange事件，所以我们直接针对ie9检测keydown事件的keyCode是否是删除键做处理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;task0005&quot;&gt;&lt;a href=&quot;#task0005&quot; class=&quot;headerlink&quot; title=&quot;task0005&quot;&gt;&lt;/a&gt;task0005&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;拖动时的文字选中问题，其他浏览器在拖动过程中阻止默认事件即可，而IE拖动时的文字选中，要用setCapture/releaseCapture&lt;/li&gt;
&lt;li&gt;ie7的offset值和其他浏览器不一样，所以用getBoundingClientRect函数获取&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在完成任务ife2015任务二中遇到的问题和解决方案：&lt;br&gt;&lt;strong&gt;ps&lt;/strong&gt;：很多和 &lt;a href=&quot;https://github.com/baidu-ife/ife/blob/master/2015_spring/task/task0002/re
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 124~154 天</title>
    <link href="http://archmee.github.io/201612/2016-12-08.html"/>
    <id>http://archmee.github.io/201612/2016-12-08.html</id>
    <published>2016-12-07T16:00:00.000Z</published>
    <updated>2016-12-11T09:17:06.898Z</updated>
    
    <content type="html">&lt;p&gt;从上次更新博客以来，时间已经过去了一个月，在这一个月当中完成的事情则是相当少，如果非要找个借口的话，那就是今年成都的冬季来地措不及防的早，整个这一个月除了几天少见有太阳，其他时候则全都在阴霾的笼罩之下。而我的行动也因此变得迟缓，哈哈哈哈哈哈哈哈哈哈哈~，不过也并不是完全荒废的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开始看《CSS权威指南》，已经看到了第5章，本来看之前以为这书会像传说中的像字典一样无聊，可是当我真正开始看的时候，才发现并没有，相反让我沉浸在书中对技术的细节描写当中，但是确实这本书不是我的当务之急，所以我还是会放一放&lt;/li&gt;
&lt;li&gt;然后拿起了《JS语言精粹》这本书，目前正在看第5章。&lt;/li&gt;
&lt;li&gt;将上篇博客中提到的IFE2015任务二进行了重(chong)构(xie)，我翻了一下github的提交记录：&lt;ul&gt;
&lt;li&gt;11.20 完成util.js，所以差不多从7号到20这13天都是在修改util.js，在IFE2015任务仓库的提交页面下，我把初级班和中级班的一半人的实现都看了一遍，大部分代码都差不多，但我还是从中搜集了一些好的实现放在了我的代码中。在看别人的代码过程中，我也在思考对比实现孰优孰劣，甚至对于自己有些复杂的实现，都要重新拟清原来的实现思路，因此也发现了以前未发现的一些隐藏Bug&lt;/li&gt;
&lt;li&gt;11.21 调整task0002_1，将原来的内部脚本改为外部脚本文件，并对代码进行了调整，比如原来一个功能全部写在一个函数中完成，现在按照功能单独提出来调用。如果和util.js做的事情有重复的地方改为调用，所以现在task0002的5个小练习都依赖util.js&lt;/li&gt;
&lt;li&gt;11.22 调整task0002_2&lt;/li&gt;
&lt;li&gt;11.24 重构task0002_4&lt;/li&gt;
&lt;li&gt;11.26 更改task0002_5的实现方式使其更简洁优雅 :)&lt;/li&gt;
&lt;li&gt;12.07 完成task0002_3轮播的重构，&lt;a href=&quot;https://archmee.github.io/201608/2016-08-29.html&quot;&gt;以前实现过这个功能并写了篇博客分析实现思路&lt;/a&gt;，而现在花了点时间改用面向对象的思想实现，感觉和组件有点像了：)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面是5个小练习的完成效果截图，&lt;a href=&quot;https://github.com/Archmee/Front-End-Demo/tree/master/ife_task/ife_task_2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;代码见github&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;提取兴趣爱好（根据输入中的分隔符分割兴趣爱好条目，并创建成可勾选复选框）&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/task2_1.jpg&quot; alt=&quot;提取兴趣爱好&quot;&gt;&lt;/li&gt;
&lt;li&gt;倒计时（计算了每次定时器的产生的误差做误差补偿）&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/task2_2.jpg&quot; alt=&quot;倒计时&quot;&gt;&lt;/li&gt;
&lt;li&gt;轮播图（利用构造器可创建多个轮播，不过每个轮播器需要自定义大小）&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/task2_3.jpg&quot; alt=&quot;轮播图&quot;&gt;&lt;br&gt;（ps：轮播图来自jd.com，侵删)&lt;/li&gt;
&lt;li&gt;输入提示框（类似百度搜索框，不过是本地数据，输入匹配的部分会高亮，方向键上下移动，单击或回车选中）&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/task2_4.jpg&quot; alt=&quot;输入提示框&quot;&gt;&lt;/li&gt;
&lt;li&gt;拖拽界面交互（在有拖动类的容器内任意拖放）&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/task2_5.jpg&quot; alt=&quot;拖拽界面交互&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;从上次更新博客以来，时间已经过去了一个月，在这一个月当中完成的事情则是相当少，如果非要找个借口的话，那就是今年成都的冬季来地措不及防的早，整个这一个月除了几天少见有太阳，其他时候则全都在阴霾的笼罩之下。而我的行动也因此变得迟缓，哈哈哈哈哈哈哈哈哈哈哈~，不过也并不是完全荒废
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 117~123 天</title>
    <link href="http://archmee.github.io/201611/2016-11-06.html"/>
    <id>http://archmee.github.io/201611/2016-11-06.html</id>
    <published>2016-11-05T16:00:00.000Z</published>
    <updated>2016-12-11T06:04:42.728Z</updated>
    
    <content type="html">&lt;p&gt;这几天将之前未完成的IFE 2015 任务二完成了，但是代码结构和编程思想都不是很理想，尤其是看了当时IFE团队review了IFE 2015的同学们的代码，指出的一些问题以及改进建议，&lt;a href=&quot;https://github.com/baidu-ife/ife/blob/master/2015_spring/task/task0002/review/IFE-review.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IFE Team review地址&lt;/a&gt;。甚至还给出了&lt;a href=&quot;https://github.com/baidu-ife/ife/tree/master/2015_spring/task/task0002/review/demo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考代码&lt;/a&gt;，目前为止我只看了util js部分，其他都还没看。&lt;br&gt;我也对自己的代码中有的问题进行了小结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码：完成任务的时候图一时方便，所以css和js都直接写到了相应的标签中而没有单独写到各自的文件中，因为我认为这不是当下最要紧的问题&lt;/li&gt;
&lt;li&gt;编程思想：虽然代码中做到了结构行为样式分离，但是JS代码混成了一团，耦合度高，而且还是完全在使用以前的面向过程的编程思路，连最基本的使用函数分解任务降低耦合度都没有做到&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;针对以上出现的问题，接下来几天想将部分代码进行重构和调整。&lt;br&gt;以下是完成的任务二的小练习1、2、4、5的Demo，之所以没有做小练习3-轮播，是因为我之前做过同样的东西：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Archmee/Front-End-Demo/blob/master/ife_task/ife_task_2/task0002_1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;1. 文本框&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Archmee/Front-End-Demo/blob/master/ife_task/ife_task_2/task0002_2.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;2. 倒计时&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Archmee/Front-End-Demo/blob/master/ife_task/ife_task_2/task0002_4.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;4. Auto suggestion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Archmee/Front-End-Demo/blob/master/ife_task/ife_task_2/task0002_5.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;5. 界面拖拽&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;——2016.12.08更新——-&lt;br&gt;更新：重构了任务2的第3个小练习，地址如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Archmee/Front-End-Demo/blob/master/ife_task/ife_task_2/task0002_3.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;3. 轮播&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这几天将之前未完成的IFE 2015 任务二完成了，但是代码结构和编程思想都不是很理想，尤其是看了当时IFE团队review了IFE 2015的同学们的代码，指出的一些问题以及改进建议，&lt;a href=&quot;https://github.com/baidu-ife/ife/bl
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 107~116 天</title>
    <link href="http://archmee.github.io/201610/2016-10-30.html"/>
    <id>http://archmee.github.io/201610/2016-10-30.html</id>
    <published>2016-10-29T16:00:00.000Z</published>
    <updated>2016-10-30T13:24:13.665Z</updated>
    
    <content type="html">&lt;p&gt;在25号左右看完了JS《JS高级编程》一书。内容简要如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;23 离线应用与客户端缓存&lt;ul&gt;
&lt;li&gt;数据存储：Cookie、sessionStorage、localStorage、IndexedDB&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;24 最佳实践&lt;/li&gt;
&lt;li&gt;25 新兴的API&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在26号开始刷&lt;a href=&quot;http://www.imooc.com/course/programdetail/pid/32&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;慕课网的前端计划&lt;/a&gt;，但直接跳过了HTML、CSS、JS的初级部分，本想看完DOM事件后完成IFE2015任务二的部分，但是27号下午开始感冒了，28号高烧腰痛难忍不能坐立，甚至下午出去逛超市差不多是挪着步子回来的，本打算第二天去医院挂个急诊，结果29号好多了，本以为痊愈了，但晚上开始口苦鼻塞、头痛欲裂，侧夜难眠，30早上起来整个嘴唇都脱皮了，感觉上火比较严重，但是整个人感觉好多了，下午去药房随便拿了点药了事。我都觉得自己奇怪，病痛都差不多痊愈了才去买药来吃，想来也是因为自己忍受不了去医院挂号的麻烦。&lt;br&gt;接下来希望尽快完成IFE2015任务二&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在25号左右看完了JS《JS高级编程》一书。内容简要如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;23 离线应用与客户端缓存&lt;ul&gt;
&lt;li&gt;数据存储：Cookie、sessionStorage、localStorage、IndexedDB&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 97~106 天</title>
    <link href="http://archmee.github.io/201610/2016-10-20.html"/>
    <id>http://archmee.github.io/201610/2016-10-20.html</id>
    <published>2016-10-19T16:00:00.000Z</published>
    <updated>2016-10-26T14:21:25.034Z</updated>
    
    <content type="html">&lt;p&gt;这10天左右时间从js高程第14章看到了第22章，其中15、16、18、19章只是翻了一下，没有详读，因为html5的api部分，我想等到真正使用的时候再细读，现在只需要了解大概就行了，而XML也不是当务之急，何况现在已经是JSON的天下了。百度IFE2015春季的题目正在做任务2，虽然都是入门开始的，但是感觉题目还是偏难的，如果没有看过js高程这种大部头或者到网上找答案，初学者应该很难完成的，至少只看百度IFE给的资料是没办法完成任务的。&lt;br&gt;章节列表如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;15.使用Canvas绘图&lt;ul&gt;
&lt;li&gt;2D上下文&lt;/li&gt;
&lt;li&gt;WebGL&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;16.HTML5脚本编程&lt;ul&gt;
&lt;li&gt;原生拖放&lt;/li&gt;
&lt;li&gt;媒体元素（Audio和Video）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;17.错误处理与调试&lt;/li&gt;
&lt;li&gt;18.Javascript与XML&lt;/li&gt;
&lt;li&gt;19.E4X（ES原生支持XML）&lt;/li&gt;
&lt;li&gt;20.JSON&lt;/li&gt;
&lt;li&gt;21.Ajax与Comet&lt;ul&gt;
&lt;li&gt;XMLHttpRequest对象&lt;/li&gt;
&lt;li&gt;XMLHttpRequest 2级&lt;/li&gt;
&lt;li&gt;进度事件&lt;/li&gt;
&lt;li&gt;跨源资源共享&lt;/li&gt;
&lt;li&gt;图像Ping、JSONP、Comet、Web Sockets 等跨域技术&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;22.高级技巧&lt;ul&gt;
&lt;li&gt;高级函数（安全的类型检测、作用域安全的构造函数、惰性载入函数、函数绑定、函数柯里化）&lt;/li&gt;
&lt;li&gt;防篡改对象（不可扩展对象、密封的对象、冻结的对象）&lt;/li&gt;
&lt;li&gt;高级定时器（重复的定时器、Yielding Process、函数节流）&lt;/li&gt;
&lt;li&gt;自定义事件&lt;/li&gt;
&lt;li&gt;拖放&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;眼看这本书就要看完了，是时候做点东西再继续看书了，纠结到底是先刷百度IFE2015的任务3呢，还是2016的任务2呢？2015任务3直接开始做一个单页应用，我感觉自己虽然js快学完了，但是要构建这样一个应用还是很困难，当然如果只是基于已有的操作DOM的知识当然能够实现出来，但是这不算一种好的实现方式，在知乎上有人说是看了《基于javascript的MVC富应用开发》这本书才做出来的，也就是说根据我现有的知识储备可能做出来的东西也只是糟糕的实现。而2016的任务2算是开发一些常见的模块化的组件，应该难度会稍微简单一点，但是我只是浏览了一下题目，没有详细看任务要求，难度也不是非常确定。&lt;/p&gt;
&lt;p&gt;下一步要看的书也在计划当中了。。。&lt;br&gt;至于什么时候能找工作，就另说了，至少要完成一个项目后再说吧！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这10天左右时间从js高程第14章看到了第22章，其中15、16、18、19章只是翻了一下，没有详读，因为html5的api部分，我想等到真正使用的时候再细读，现在只需要了解大概就行了，而XML也不是当务之急，何况现在已经是JSON的天下了。百度IFE2015春季的题目正在
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 96 天</title>
    <link href="http://archmee.github.io/201610/2016-10-10.html"/>
    <id>http://archmee.github.io/201610/2016-10-10.html</id>
    <published>2016-10-09T16:00:00.000Z</published>
    <updated>2016-10-26T14:20:54.863Z</updated>
    
    <content type="html">&lt;p&gt;今天完成了JS高程的第14章，并且开始做百度前端学院2015任务二：JS部分。&lt;br&gt;看了一篇学习资料 &lt;a href=&quot;http://www.ibm.com/developerworks/cn/web/1308_caiys_jsload/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript 的性能优化：加载和执行&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;概要如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;每个文件必须等到前一个文件下载并执行完成才会开始下载。在这些文件逐个下载过程中，用户看到的是一片空白的页面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从 IE 8、Firefox 3.5、Safari 4 和 Chrome 2 开始都允许并行下载 JavaScript 文件。这是个好消息，因为&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签在下载外部资源时不会阻塞其他&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签。遗憾的是，JavaScript 下载过程仍然会阻塞其他资源的下载,比如样式文件和图片。尽管脚本的下载过程不会互相影响，但页面仍然必须等待所有 JavaScript 代码下载并执行完成才能继续。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;由于脚本会阻塞页面其他资源的下载，因此推荐将所有&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签尽可能放到&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;标签的底部，以尽量减少对整个页面下载的影响。这是优化 JavaScript 的首要规则：将脚本放在底部。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;浏览器在解析 HTML 页面的过程中每遇到一个&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签，都会因执行脚本而导致一定的延时，因此最小化延迟时间将会明显改善页面的总体性能。所以减少页面包含的&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签数量有助于改善这一情况，不管是内嵌的还是外链的。可以把多个文件合并成一个，这样只需要引用一个&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签，就可以减少性能消耗。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为了确保内嵌脚本在执行时能获得最精确的样式信息，建议不要把内嵌脚本紧跟在&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;标签后面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;尽管下载单个较大的 JavaScript 文件只产生一次 HTTP 请求，却会锁死浏览器的一大段时间。为避免这种情况，需要通过一些特定的技术向页面中逐步加载 JavaScript 文件，这样做在某种程度上来说不会阻塞浏览器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当一个带有 defer 属性的 JavaScript 文件下载时，它不会阻塞浏览器的其他进程，因此这类文件可以与其他资源文件一起并行下载。&lt;br&gt;任何带有 defer 属性的&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;元素在 DOM 完成加载之前都不会被执行，无论内嵌或者是外链脚本都是如此。&lt;br&gt;说明：defer只有 IE 和 Firefox 3.5支持&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HTML 5 为&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签定义了一个新的扩展属性：async。它的作用和 defer 一样，能够异步地加载和执行脚本，不因为加载脚本而阻塞页面的加载。&lt;br&gt;在有 async 的情况下，JS 脚本一旦下载好了就会执行，所以很有可能不是按照原本的顺序来执行的。如果 JavaScript 脚本前后有依赖性，使用 async 就很有可能出现错误。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过标准 DOM 函数创建&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;元素&lt;br&gt;Firefox、Opera, Chorme 和 Safari 3+会在&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;节点接收完成之后发出一个 onload 事件。您可以监听这一事件，以得到脚本准备好的通知。&lt;br&gt;大部分浏览器将按照服务器返回它们的次序下载并运行不同的JS代码文件。您可以将下载操作串联在一起以保证他们的次序。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过 XHR 对象加载 JavaScript 脚本最主要的限制是：JavaScript 文件必须与页面放置在同一个域内，不能从 CDN 下载，所以大型网页通常不采用 XHR 脚本注入技术。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原文总结：&lt;br&gt;采用阻塞方法加载JS：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将所有的&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签放到页面底部，也就是闭合标签之前，这能确保在脚本执行前页面已经完成了渲染。&lt;/li&gt;
&lt;li&gt;尽可能地合并脚本。页面中的&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签越少，加载也就越快，响应也越迅速。无论是外链脚本还是内嵌脚本都是如此。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;采用无阻塞下载 JavaScript 脚本的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签的 defer 属性（仅适用于 IE 和 Firefox 3.5 以上版本）或者HTML5添加的async属性；&lt;/li&gt;
&lt;li&gt;使用动态创建的&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;元素来下载并执行代码；&lt;/li&gt;
&lt;li&gt;使用 XHR 对象下载 JavaScript 代码并注入页面中。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天完成了JS高程的第14章，并且开始做百度前端学院2015任务二：JS部分。&lt;br&gt;看了一篇学习资料 &lt;a href=&quot;http://www.ibm.com/developerworks/cn/web/1308_caiys_jsload/index.html&quot; targe
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 84~95 天</title>
    <link href="http://archmee.github.io/201610/2016-10-09.html"/>
    <id>http://archmee.github.io/201610/2016-10-09.html</id>
    <published>2016-10-08T16:00:00.000Z</published>
    <updated>2016-10-26T14:19:24.952Z</updated>
    
    <content type="html">&lt;p&gt;在国庆节前后接近两周的时间学习了JS高程7~13章，第7章还属于比较重要的语法知识，而从第8章开始后面就是BOM和DOM等部分，讲解了大量api的用法，遂不打算一一做笔记了，这里仅仅列一下第7章的纲要&lt;/p&gt;
&lt;h2 id=&quot;7-函数表达式&quot;&gt;&lt;a href=&quot;#7-函数表达式&quot; class=&quot;headerlink&quot; title=&quot;7.函数表达式&quot;&gt;&lt;/a&gt;7.函数表达式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在使用递归调用时，用arguments.callee比使用函数名更保险&lt;/li&gt;
&lt;li&gt;闭包是指有权访问另一个函数作用域中的变量的函数。创建闭包的常见方式，就是在一个函数内部创建另一个函数&lt;/li&gt;
&lt;li&gt;闭包会引用包含函数的整个活动对象&lt;/li&gt;
&lt;li&gt;可以用匿名函数模仿块级作用域减少向全局作用域添加过多的变量和函数&lt;/li&gt;
&lt;li&gt;JS用特权方法来访问私有变量和函数&lt;/li&gt;
&lt;li&gt;JS是以对象字面量的方式来创建单例对象的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至于这段时间的主要工作，其一是想快点把JS高程刷完，并且同时刷百度前端学院的一些题，书完了之后，就做百度前端学院的大作业，2015春季和2016春季都可以选择&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在国庆节前后接近两周的时间学习了JS高程7~13章，第7章还属于比较重要的语法知识，而从第8章开始后面就是BOM和DOM等部分，讲解了大量api的用法，遂不打算一一做笔记了，这里仅仅列一下第7章的纲要&lt;/p&gt;
&lt;h2 id=&quot;7-函数表达式&quot;&gt;&lt;a href=&quot;#7-函数表
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 78~83 天</title>
    <link href="http://archmee.github.io/201609/2016-09-26.html"/>
    <id>http://archmee.github.io/201609/2016-09-26.html</id>
    <published>2016-09-25T16:00:00.000Z</published>
    <updated>2016-10-26T14:19:11.952Z</updated>
    
    <content type="html">&lt;p&gt;差不多用了一周时间才完成了第6章，感觉大脑开启了暴力模式&lt;/p&gt;
&lt;h2 id=&quot;6-面向对象&quot;&gt;&lt;a href=&quot;#6-面向对象&quot; class=&quot;headerlink&quot; title=&quot;6.面向对象&quot;&gt;&lt;/a&gt;6.面向对象&lt;/h2&gt;&lt;h3 id=&quot;属性&quot;&gt;&lt;a href=&quot;#属性&quot; class=&quot;headerlink&quot; title=&quot;属性&quot;&gt;&lt;/a&gt;属性&lt;/h3&gt;&lt;p&gt;ES中有两种属性：数据属性和访问器属性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据属性有4个描述其行为的特性：&lt;ul&gt;
&lt;li&gt;Configurable&lt;/li&gt;
&lt;li&gt;Enumerable&lt;/li&gt;
&lt;li&gt;Writable&lt;/li&gt;
&lt;li&gt;Value&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;访问器属性也有4个特性：&lt;ul&gt;
&lt;li&gt;Configurable&lt;/li&gt;
&lt;li&gt;Enumberable&lt;/li&gt;
&lt;li&gt;Get&lt;/li&gt;
&lt;li&gt;Set&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ES5提供了&lt;code&gt;Object.defineProperty()&lt;/code&gt;方法来修改属性默认的特性，&lt;code&gt;Object.defineProperties()&lt;/code&gt;方法可以通过描述符一次定义多个属性，&lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt;方法可以获取给定属性的描述符。&lt;/p&gt;
&lt;h3 id=&quot;创建对象&quot;&gt;&lt;a href=&quot;#创建对象&quot; class=&quot;headerlink&quot; title=&quot;创建对象&quot;&gt;&lt;/a&gt;创建对象&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;工厂模式&lt;/strong&gt;：在函数里面创建对象并初始化属性和方法，然后返回对象，创建对象直接调用函数即可。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;构造函数模式&lt;/strong&gt;：将利用函数是对象的本质，在函数内直接对this进行初始化。缺点是对象的方法没有达到复用的目的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;原型模式&lt;/strong&gt;：为了达到复用的目的，将对象属性和方法放进对象原型（object.prototype）中，这样每个对象就共享了属性和方法，而且每个实例可以定义自己专属的属性和方法，且会覆盖原型中的同名属性和方法。注意使用对象字面量语法会重写object.prototype，相当于是使用新对象覆盖了原型对象，导致某些引用关系丢失。这种模式的缺点是对原型对象中的引用类型的操作会共享给所有实例。&lt;br&gt;利用原型对象可以为原生对象添加新方法或重写&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;组合构造函数模式和原型模式&lt;/strong&gt;：对不需要共享的属性或方法用构造函数来定义，需要共享的属性或方法写进原型对象（推荐）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动态原型模式&lt;/strong&gt;：和组合模式类似，只是它把所有信息封装在构造函数中，也在构造函数初始化原型（经检查有必要时）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;寄生构造函数模式&lt;/strong&gt;：和工厂模式类似，只是在创建对象时不是直接调用函数，而是使用new关键字&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;稳妥构造函数模式&lt;/strong&gt;：和寄生模式类似，区别在：一是没有公共属性， 新创建对象的实例方法不引用this，二是不使用new操作符调用构造函数（这一点又和工厂模式类似）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一些有关的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;isPrototype()&lt;/code&gt;方法可以确定一个对象实例的原型，&lt;code&gt;Object.getPrototypeOf()&lt;/code&gt;返回一个对象的原型&lt;/li&gt;
&lt;li&gt;delete 操作符可以删除实例中定义的属性和方法。&lt;/li&gt;
&lt;li&gt;in 操作符用来确认是否能够访问指定对象的指定属性&lt;/li&gt;
&lt;li&gt;ES5中的&lt;code&gt;Object.keys()&lt;/code&gt;可以获取对象上所有可枚举的实例属性，而&lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt;方法可以获取所有实例属性，无论它是否可枚举&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;原型链&lt;/strong&gt;：使用要继承自的父类型的实例覆盖子类型的原型。所有函数的默认原型都是Object的实例。该种继承方法的缺点：一是父类型的实例属性顺理成章的成了现在对象的原型属性；二是在创建子类型实例时，不能向父类型构造函数传递参数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;借用构造函数&lt;/strong&gt;：方法是在子类型的构造函数内部调用父类型构造函数（用apply或call方法），这下可以传递参数了，但没有解决函数复用的问题，而且父类型的原型对象中的方法对子类型不可见。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;组合继承&lt;/strong&gt;：将原型链和借用构造函数的技术组合到一块，其背后的思想是使用原型链实现对原型属性和方法的继承。其缺点是在构造函数中和用实例覆盖子类型的原型对象的过程中，调用了2次父类型的构造函数，导致父类型的实例属性有2份，1份在子类型原型对象中，1份在子类型实例中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;原型式继承&lt;/strong&gt;：它的实现思路是在函数内借助给定的参数（对象）覆盖函数中一个全新的对象的原型，然后返回这个全新的对象，利用该函数实现了继承，每个实例都可以对自己的属性和方法进行自定义。这个技术和&lt;u&gt;原型继承&lt;/u&gt;的思路差不多，用对象实例去重写子类型的原型，只是它把步骤放到了函数里面，并且是返回了一个被更改过原型的空白对象。&lt;br&gt;  ES5的&lt;code&gt;Object.create()&lt;/code&gt;方法规范化了原型式继承，它用来创建并返回一个继承后的子对象。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;寄生式继承&lt;/strong&gt;：是和原型式继承紧密相关的一种方式，但是原型式继承返回的子类型没有任何自定义的属性和方法，所以寄生式继承是完成了二次封装，用来完善子类型的属性和方法。思路是创建一个函数，在函数中调用原型式继承中封装的步骤，然后定义子类型中应有的属性和方法。但是也没有解决方法复用的问题，相当于每个实例中都有一份自己的方法&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;寄生组合式继承&lt;/strong&gt;：通过借用构造函数继承来继承属性，通过原型链的混成形式来继承方法。基本思路是：不必为了指定子类型的原型而调用父类型的构造函数，我们需要的只是父类型的原型对象的一个副本而已。只是利用一个中间对象的实例覆盖了子类型的原型对象，而在子类型的构造函数中又调用父类型构造函数以达到继承属性的目的。（最常用最常用）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有关方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;instanceof 操作符可以测试实例与原型链中出现过的构造函数。&lt;code&gt;isPrototypeOf()&lt;/code&gt;测试调用该方法的原型是否是这个实例(参数)的原型&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;差不多用了一周时间才完成了第6章，感觉大脑开启了暴力模式&lt;/p&gt;
&lt;h2 id=&quot;6-面向对象&quot;&gt;&lt;a href=&quot;#6-面向对象&quot; class=&quot;headerlink&quot; title=&quot;6.面向对象&quot;&gt;&lt;/a&gt;6.面向对象&lt;/h2&gt;&lt;h3 id=&quot;属性&quot;&gt;&lt;a href=&quot;
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 77 天</title>
    <link href="http://archmee.github.io/201609/2016-09-19.html"/>
    <id>http://archmee.github.io/201609/2016-09-19.html</id>
    <published>2016-09-18T16:00:00.000Z</published>
    <updated>2016-10-26T14:17:49.553Z</updated>
    
    <content type="html">&lt;p&gt;后来想了一下，还是总结一下较好&lt;/p&gt;
&lt;h2 id=&quot;1-JS简介&quot;&gt;&lt;a href=&quot;#1-JS简介&quot; class=&quot;headerlink&quot; title=&quot;1. JS简介&quot;&gt;&lt;/a&gt;1. JS简介&lt;/h2&gt;&lt;p&gt;第1章主要讲了JS的起源和发展历程，以及JS的基本组成情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个完整的JS实现包含三个部分：&lt;ul&gt;
&lt;li&gt;核心（ECMAScript）&lt;/li&gt;
&lt;li&gt;文档对象模型（DOM）&lt;/li&gt;
&lt;li&gt;浏览器对象模型（BOM）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Web浏览器只是ES实现可能的宿主环境之一&lt;/li&gt;
&lt;li&gt;DOM级别&lt;ul&gt;
&lt;li&gt;DOM1级：由2个模块组成，DOM Core和DOM HTML&lt;/li&gt;
&lt;li&gt;DOM2级：引入了更多新模块，在原来DOM的基础上又扩充了鼠标和用户界面事件、范围、遍历等。而且通过对象接口增加了对CSS的支持&lt;/li&gt;
&lt;li&gt;DOM3级：进一步扩展了DOM，引入了以统一方式加载和保存文档的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BOM只处理浏览器和框架&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-在HTML中使用JS&quot;&gt;&lt;a href=&quot;#2-在HTML中使用JS&quot; class=&quot;headerlink&quot; title=&quot;2. 在HTML中使用JS&quot;&gt;&lt;/a&gt;2. 在HTML中使用JS&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;元素定义了6个属性：&lt;ul&gt;
&lt;li&gt;src：指定要执行的JS文件位置&lt;/li&gt;
&lt;li&gt;charset：JS文件的编码&lt;/li&gt;
&lt;li&gt;async：异步加载脚本，但不依赖引入顺序&lt;/li&gt;
&lt;li&gt;defer：在文档完全被解析和显示之后才执行脚本（立即下载，延迟执行）&lt;/li&gt;
&lt;li&gt;language：已废弃&lt;/li&gt;
&lt;li&gt;type：编写的代码的内容类型，常见&lt;code&gt;&amp;lt;text/javascript&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;不仅可以放在&lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;里面，还可以放在&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;里面（最好是结束标签之前）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;文档模式：混杂模式和标准模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;noscript&amp;gt;&lt;/code&gt;用在不支持JS的浏览器中显示替换内容&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3-基本概念&quot;&gt;&lt;a href=&quot;#3-基本概念&quot; class=&quot;headerlink&quot; title=&quot;3. 基本概念&quot;&gt;&lt;/a&gt;3. 基本概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;标识符：首字符必须是字母、下划线(_)、美元符号($)。其他字符可以是字母、数字、下划线和美元符号&lt;/li&gt;
&lt;li&gt;严格模式：&lt;code&gt;&amp;quot;use strict&amp;quot;&lt;/code&gt;可以放在脚本的开头对整个脚本开启严格模式，也可以放在函数内部让函数在严格模式下执行&lt;/li&gt;
&lt;li&gt;JS代码语句不强制使用&lt;code&gt;;&lt;/code&gt;结束代码，但是建议不要省略&lt;/li&gt;
&lt;li&gt;标识符不能是&lt;strong&gt;关键字&lt;/strong&gt;和&lt;strong&gt;保留字&lt;/strong&gt;（测试时发现标识符可以是汉字，但是不建议使用）&lt;/li&gt;
&lt;li&gt;JS变量是松散类型（弱类型），即可以用来保存任何类型的数据&lt;/li&gt;
&lt;li&gt;JS声明变量使用&lt;code&gt;var&lt;/code&gt;关键字就是局部变量，否则就是全局变量&lt;/li&gt;
&lt;li&gt;可以使用一条语句定义多个变量，用逗号隔开即可&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-4-数据类型&quot;&gt;&lt;a href=&quot;#3-4-数据类型&quot; class=&quot;headerlink&quot; title=&quot;3.4 数据类型&quot;&gt;&lt;/a&gt;3.4 数据类型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ES有5种简单数据类型：&lt;strong&gt;Undefined、Null、Boolean、Number、String&lt;/strong&gt;。还有1种复杂数据类型 &lt;strong&gt;Object&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;typeof&lt;/code&gt;用来检测数据类型，它是一个操作符而不是函数，所以调用时可以用圆括号也可以不用&lt;/li&gt;
&lt;li&gt;声明变量未初始化值是”undefined”，对于没有声明的变量只能执行typeof检测数据类型，结果是”undefined”&lt;/li&gt;
&lt;li&gt;null表示一个空对象引用，所以执行&lt;code&gt;typeof null;&lt;/code&gt;结果是”object”&lt;/li&gt;
&lt;li&gt;undefined值是派生自null值的，因此相等性测试结果是true&lt;/li&gt;
&lt;li&gt;Boolean类型的true和false是区分大小写的，其他形式的都只是标识符，&lt;code&gt;Boolean()&lt;/code&gt;可以将其他值转换为Boolean值&lt;/li&gt;
&lt;li&gt;保存浮点数需要的内存空间是保存整数值的2倍&lt;/li&gt;
&lt;li&gt;永远不要测试某个特定的浮点数值&lt;/li&gt;
&lt;li&gt;ES能够保存的最大数值保存在Number.MAX_VALUE中，最小数值是Number.MIN_VALUE&lt;/li&gt;
&lt;li&gt;超出JS数值范围的值被自动转换成-Infinite(负无穷)或Infinite(正无穷)，&lt;code&gt;isFinite()&lt;/code&gt;函数可以用来确定一个数值是不是&lt;strong&gt;有穷的&lt;/strong&gt;（在最大和最小之间）&lt;/li&gt;
&lt;li&gt;NaN（Not a Number），这个数值用于表示一个本来要返回数值的操作数未返回数值的情况。NaN与任何值都不相等，包括NaN自身。&lt;code&gt;isNaN()&lt;/code&gt;函数接收到参数后，会尝试将这个值转换为数值，然后确定这个参数是否“不是数值”&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Number()&lt;/code&gt;、&lt;code&gt;parseInt()&lt;/code&gt;和&lt;code&gt;parseFloat()&lt;/code&gt;可以将非数值转换为数值。parseInt第2个参数可以指定转换时使用的基数&lt;/li&gt;
&lt;li&gt;数值、布尔值、对象和字符串值都有&lt;code&gt;toString()&lt;/code&gt;方法，但null和undefined值没有这个方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String()&lt;/code&gt;方法可以将任何类型的值转换为字符串&lt;/li&gt;
&lt;li&gt;ES中的对象其实是一组数据和功能的集合，Object的每个实例都具有下列属性和方法，由于在ES中Object是所有对象的基础，因此所有对象都具有这些基本的属性和方法&lt;ul&gt;
&lt;li&gt;constructor&lt;/li&gt;
&lt;li&gt;hasOwnProperty(name)&lt;/li&gt;
&lt;li&gt;isPrototypeOf(object)&lt;/li&gt;
&lt;li&gt;propertyIsEnumerable(propertyName)&lt;/li&gt;
&lt;li&gt;toLocalString()&lt;/li&gt;
&lt;li&gt;toString()&lt;/li&gt;
&lt;li&gt;valueOf()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-5-操作符&quot;&gt;&lt;a href=&quot;#3-5-操作符&quot; class=&quot;headerlink&quot; title=&quot;3.5 操作符&quot;&gt;&lt;/a&gt;3.5 操作符&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;相等(==)和不相等(!=)是先转换再比较，全等(===)和不全等(！==)仅比较不转换，作者推荐使用全等和不全等&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-6-语句&quot;&gt;&lt;a href=&quot;#3-6-语句&quot; class=&quot;headerlink&quot; title=&quot;3.6 语句&quot;&gt;&lt;/a&gt;3.6 语句&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;label语句可以在代码中添加标签，以便将来使用（比如跳转），通常配合循环语句使用&lt;/li&gt;
&lt;li&gt;with语句的作用是将代码的作用域设置到一个特定的对象中（严格模式不允许使用，且with语句导致性能下降，也不建议使用）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-7-函数&quot;&gt;&lt;a href=&quot;#3-7-函数&quot; class=&quot;headerlink&quot; title=&quot;3.7 函数&quot;&gt;&lt;/a&gt;3.7 函数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ES函数不介意传递进来多少个参数，也不在乎传递进来的参数是什么数据类型，在函数内部可以通过访问arguments对象来访问这个参数数组&lt;/li&gt;
&lt;li&gt;如果在ES中定义了2个同名函数，则该名字只属于后定义的函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;4-变量、作用域和内存问题&quot;&gt;&lt;a href=&quot;#4-变量、作用域和内存问题&quot; class=&quot;headerlink&quot; title=&quot;4. 变量、作用域和内存问题&quot;&gt;&lt;/a&gt;4. 变量、作用域和内存问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;基本类型和引用类型的值&lt;ul&gt;
&lt;li&gt;基本类型占据固定大小的空间，保存在栈内存中；引用类型的值是对象，保存在堆内存中。&lt;/li&gt;
&lt;li&gt;ES中所有参数都是按值传递的&lt;/li&gt;
&lt;li&gt;instanceOf操作符用于识别该变量是否是某个对象的实例&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;执行环境及作用域&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个执行环境都有一个与之关联的&lt;strong&gt;变量对象&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;全局执行环境被认为是window对象&lt;/li&gt;
&lt;li&gt;标识符解析是沿着作用域链一级一级搜索标识符的过程。搜索的过程始终从作用域链的前端开始，然后逐级向后回溯，直到找到标识符为止，如果找到全局执行环境的变量对象还没有找到标识符，就会发生错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;执行环境的类型只有2种——全局和局部（函数）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;catch和with语句可以延长作用域链&lt;/li&gt;
&lt;li&gt;JS没有块级作用域&lt;/li&gt;
&lt;li&gt;垃圾收集通常有2个策略：标记清除和引用计数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;5-引用类型&quot;&gt;&lt;a href=&quot;#5-引用类型&quot; class=&quot;headerlink&quot; title=&quot;5. 引用类型&quot;&gt;&lt;/a&gt;5. 引用类型&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Object类型&lt;ul&gt;
&lt;li&gt;字面量语法用花括号包围&lt;code&gt;{}&lt;/code&gt;，各属性之间用逗号分隔&lt;/li&gt;
&lt;li&gt;一般用点表示法访问对象属性，也可以使用方括号表示法来访问，作者建议除非必须否则用点表示法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Array类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字面量语法用方括号包围&lt;code&gt;[]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;每一项可以保存任意类型的值&lt;/li&gt;
&lt;li&gt;数组大小可动态调整&lt;/li&gt;
&lt;li&gt;使用Array构造函数是，可以省略new操作符&lt;/li&gt;
&lt;li&gt;length属性不是只读的，所以可以使用它调整数组大小&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Array.isArray()&lt;/code&gt;方法用来检查一个参数是否是数组(ES5)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;join()&lt;/code&gt;方法用传入的分隔符参数连接字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;push()&lt;/code&gt;和&lt;code&gt;pop()&lt;/code&gt;向数组末尾添加和删除元素，类似对栈的操作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shift()&lt;/code&gt;和&lt;code&gt;unshift()&lt;/code&gt;在数组开始的位置删除和插入元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sort()&lt;/code&gt;方法对数组进行排序，传入的参数是比较函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;concat()&lt;/code&gt;方法可以将当前数组和传入的数组参数连接起来创建一个新的数组&lt;/li&gt;
&lt;li&gt;&lt;code&gt;slice()&lt;/code&gt;从当前数组提取一或连续多项创建一个新数组&lt;/li&gt;
&lt;li&gt;&lt;code&gt;splice()&lt;/code&gt;向数组中插入项，利用参数的组合则可以完成数组的删除替换插入项&lt;/li&gt;
&lt;li&gt;&lt;code&gt;indexOf()&lt;/code&gt;和&lt;code&gt;lastIndexOf()&lt;/code&gt;返回要查找的项在数组中的位置，没找到则返回-1。这两个方法的不同在于一个是顺序查找，一个是逆序查找&lt;/li&gt;
&lt;li&gt;&lt;code&gt;every()&lt;/code&gt;、&lt;code&gt;filter()&lt;/code&gt;、&lt;code&gt;forEach()&lt;/code&gt;、&lt;code&gt;map()&lt;/code&gt;、&lt;code&gt;some()&lt;/code&gt;都是用来迭代数组的方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reduce()&lt;/code&gt;和&lt;code&gt;reduceRight()&lt;/code&gt;是用来归并数组的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Date类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Date.parse()&lt;/code&gt;返回日期字符串参数的毫秒数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Date.UTC()&lt;/code&gt;也返回表示日期的毫秒数，但是和parse参数不同&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Date.now()&lt;/code&gt;返回当前时间的毫秒数&lt;/li&gt;
&lt;li&gt;Date类型还有一些专门用于将日期格式化为字符串的方法：&lt;code&gt;toDateString()&lt;/code&gt;、&lt;code&gt;toTimeString()&lt;/code&gt;、&lt;code&gt;toLocaleDateString()&lt;/code&gt;、&lt;code&gt;toLocaleTimeString()&lt;/code&gt;、&lt;code&gt;toUTCString&lt;/code&gt;，更多的日期时间方法可以看书&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RegExp类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;正则表达式的字面量语法：&lt;br&gt;&lt;code&gt;var express = /pattern/flags;&lt;/code&gt;&lt;br&gt;flags有3个值，可配合使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;g: 表示全局模式&lt;/li&gt;
&lt;li&gt;i: 表示不区分大小写&lt;/li&gt;
&lt;li&gt;m: 表示多行模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RegExp每个实例都有下列属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;global：表示是否设置了g标志&lt;/li&gt;
&lt;li&gt;ignoreCase：表示是否设置了i标志&lt;/li&gt;
&lt;li&gt;lastIndex：表示开始搜索下一个匹配项的字符位置，从0算起:&lt;/li&gt;
&lt;li&gt;multiline：表示是否设置了m标志&lt;/li&gt;
&lt;li&gt;source：正则表达式的字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RegExp实例方法&lt;ul&gt;
&lt;li&gt;&lt;code&gt;test()&lt;/code&gt;方法测试参数字符串是否匹配正则表达式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exec()&lt;/code&gt;方法接受一个字符串参数，返回第一个匹配项信息的数组，但包含两个额外的属性：index和input，index表示匹配项在字符串中的位置，input表示应用正则表达式的字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RegExp构造函数属性：input、lastMatch、lastParen、leftContext、rightContext、multiline&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Function类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数实际上是对象&lt;/li&gt;
&lt;li&gt;函数没有重载，因为函数名称只是一个变量，函数同名就像变量同名会被覆盖一样。&lt;/li&gt;
&lt;li&gt;函数可以作为值来使用，所以也可以用作函数参数，也可以将函数当作结果返回&lt;/li&gt;
&lt;li&gt;函数内部有两个特殊对象：arguments和this，arguments对象中还有一个名叫callee的属性，它是一个指针，指向拥有这个arguments对象的函数。ES5还有另一个函数对象的属性：caller，它保存着调用当前函数的函数的引用&lt;/li&gt;
&lt;li&gt;每个函数都包含两个属性：length和prototype，length表示函数希望接收的命名参数的个数，prototype是保存它们所在实例方法的真正所在&lt;br&gt;  每个函数都包含两个非继承而来的方法：&lt;code&gt;apply()&lt;/code&gt;和&lt;code&gt;call()&lt;/code&gt;，这两个方法都是在指定的作用域中调用函数，实际上等于设置函数体内this对象的值。&lt;br&gt;  ES5还定义了一个方法&lt;code&gt;bind()&lt;/code&gt;，这个方法会创建一个函数实例，其this值会被绑定到传给bind()的参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;基本包装类型&lt;br&gt;ES还定义了3个特殊的引用类型：Boolean、Number和String，它们是基本类型值的基本包装类型对象。不建议显示创建基本包装类型的对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;String类型&lt;ul&gt;
&lt;li&gt;字符方法：&lt;code&gt;charAt()&lt;/code&gt;和&lt;code&gt;charCodeAt()&lt;/code&gt;用来访问特定字符&lt;/li&gt;
&lt;li&gt;字符串操作方法：&lt;code&gt;concat()&lt;/code&gt;和&lt;code&gt;+&lt;/code&gt;可以实现连接字符串。&lt;code&gt;slice()&lt;/code&gt;、&lt;code&gt;substr()&lt;/code&gt;、&lt;code&gt;substring()&lt;/code&gt;都是提取子字符串创建新字符串的方法&lt;/li&gt;
&lt;li&gt;字符串位置方法：&lt;code&gt;indexOf()&lt;/code&gt;和&lt;code&gt;lastIndexOf()&lt;/code&gt;可以从字符串中查找子字符串的位置&lt;/li&gt;
&lt;li&gt;去除前后空格：&lt;code&gt;trim()&lt;/code&gt;会创建一个字符串的副本，删除前后空格并返回。&lt;/li&gt;
&lt;li&gt;大小写转换：&lt;code&gt;toLowerCase()&lt;/code&gt;、&lt;code&gt;toUpperCase()&lt;/code&gt;、&lt;code&gt;toLocaleLowerCase()&lt;/code&gt;、&lt;code&gt;toLocaleUpperCase()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;模式匹配：&lt;br&gt;&lt;code&gt;match()&lt;/code&gt;接收正则表达式为参数，本质上和调用RegExp的exec方法差不多。&lt;br&gt;&lt;code&gt;search()&lt;/code&gt;返回字符串中第一个匹配项的索引。&lt;br&gt;&lt;code&gt;replace()&lt;/code&gt;方法用于替换字符串匹配项。&lt;br&gt;&lt;code&gt;split()&lt;/code&gt;基于特定的分隔符将一个字符串分割成多个子字符串，并将结果放在一个数组中。&lt;br&gt;&lt;code&gt;localeCompare()&lt;/code&gt;用于比较字符串。&lt;br&gt;&lt;code&gt;fromCharCode()&lt;/code&gt;是一个静态方法，它接收一个或多个字符编码，并将它转换成一个字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;单体内置对象&lt;br&gt;定义：由ES实现提供的，不依赖于宿主环境的对象，这些对象在ES程序执行之前就已经存在了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Global对象：不属于任何其他对象的属性和方法，最终都是它的属性和方法。所有全局作用域中定义的属性和函数，都是Global对象的属性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;URI编解码方法：&lt;code&gt;encodeURI()&lt;/code&gt;和&lt;code&gt;encodeURIComponent()&lt;/code&gt;可以对URI进行编码。&lt;code&gt;decodeURI()&lt;/code&gt;和&lt;code&gt;decodeURIComponent()&lt;/code&gt;是对应的解码方法。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eval()&lt;/code&gt;将传入字符串当做实际JS语句来解析&lt;/li&gt;
&lt;li&gt;。。。还有其他Global对象的属性。。。&lt;/li&gt;
&lt;li&gt;window对象，Web浏览器都是讲Global对象作为window对象的一部分加以实现的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Math对象：它提供的计算功能比我们自己编写的计算功能执行起来要快得多&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包含的属性都是数学计算中常用的特殊值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min()&lt;/code&gt;和&lt;code&gt;max()&lt;/code&gt;方法用于确定一组数值中的最大值和最小值&lt;/li&gt;
&lt;li&gt;舍入方法：&lt;code&gt;ceil()&lt;/code&gt;、&lt;code&gt;floor()&lt;/code&gt;、&lt;code&gt;round()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;random()&lt;/code&gt;方法返回0~1之间的随机数&lt;/li&gt;
&lt;li&gt;还有很多完成简单或复杂计算的方法：&lt;code&gt;pow()&lt;/code&gt;、&lt;code&gt;sqrt()&lt;/code&gt;等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;6-面向对象&quot;&gt;&lt;a href=&quot;#6-面向对象&quot; class=&quot;headerlink&quot; title=&quot;6.面向对象&quot;&gt;&lt;/a&gt;6.面向对象&lt;/h2&gt;&lt;h3 id=&quot;属性&quot;&gt;&lt;a href=&quot;#属性&quot; class=&quot;headerlink&quot; title=&quot;属性&quot;&gt;&lt;/a&gt;属性&lt;/h3&gt;&lt;p&gt;ES中有两种属性：数据属性和访问器属性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据属性有4个描述其行为的特性：&lt;ul&gt;
&lt;li&gt;Configurable&lt;/li&gt;
&lt;li&gt;Enumerable&lt;/li&gt;
&lt;li&gt;Writable&lt;/li&gt;
&lt;li&gt;Value&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;访问器属性也有4个特性：&lt;ul&gt;
&lt;li&gt;Configurable&lt;/li&gt;
&lt;li&gt;Enumberable&lt;/li&gt;
&lt;li&gt;Get&lt;/li&gt;
&lt;li&gt;Set&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ES5提供了&lt;code&gt;Object.defineProperty()&lt;/code&gt;方法来修改属性默认的特性，&lt;code&gt;Object.defineProperties()&lt;/code&gt;方法可以通过描述符一次定义多个属性，&lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt;方法可以获取给定属性的描述符。&lt;/p&gt;
&lt;h3 id=&quot;创建对象&quot;&gt;&lt;a href=&quot;#创建对象&quot; class=&quot;headerlink&quot; title=&quot;创建对象&quot;&gt;&lt;/a&gt;创建对象&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;工厂模式&lt;/strong&gt;：在函数里面创建对象并初始化属性和方法，然后返回对象，创建对象直接调用函数即可。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;构造函数模式&lt;/strong&gt;：将利用函数是对象的本质，在函数内直接对this进行初始化。缺点是对象的方法没有达到复用的目的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;原型模式&lt;/strong&gt;：为了达到复用的目的，将对象属性和方法放进对象原型（object.prototype）中，这样每个对象就共享了属性和方法，而且每个实例可以定义自己专属的属性和方法，且会覆盖原型中的同名属性和方法。注意使用对象字面量语法会重写object.prototype，相当于是使用新对象覆盖了原型对象，导致某些引用关系丢失。这种模式的缺点是对原型对象中的引用类型的操作会共享给所有实例。&lt;br&gt;利用原型对象可以为原生对象添加新方法或重写&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;组合构造函数模式和原型模式&lt;/strong&gt;：对不需要共享的属性或方法用构造函数来定义，需要共享的属性或方法写进原型对象（推荐）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动态原型模式&lt;/strong&gt;：和组合模式类似，只是它把所有信息封装在构造函数中，也在构造函数初始化原型（经检查有必要时）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;寄生构造函数模式&lt;/strong&gt;：和工厂模式类似，只是在创建对象时不是直接调用函数，而是使用new关键字&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;稳妥构造函数模式&lt;/strong&gt;：和寄生模式类似，区别在：一是没有公共属性， 新创建对象的实例方法不引用this，二是不使用new操作符调用构造函数（这一点又和工厂模式类似）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一些有关的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;isPrototype()&lt;/code&gt;方法可以确定一个对象实例的原型，&lt;code&gt;Object.getPrototypeOf()&lt;/code&gt;返回一个对象的原型&lt;/li&gt;
&lt;li&gt;delete 操作符可以删除实例中定义的属性和方法。&lt;/li&gt;
&lt;li&gt;in 操作符用来确认是否能够访问指定对象的指定属性&lt;/li&gt;
&lt;li&gt;ES5中的&lt;code&gt;Object.keys()&lt;/code&gt;可以获取对象上所有可枚举的实例属性，而&lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt;方法可以获取所有实例属性，无论它是否可枚举&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;原型链&lt;/strong&gt;：使用要继承自的父类型的实例覆盖子类型的原型。所有函数的默认原型都是Object的实例。该种继承方法的缺点：一是父类型的实例属性顺理成章的成了现在对象的原型属性；二是在创建子类型实例时，不能向父类型构造函数传递参数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;借用构造函数&lt;/strong&gt;：方法是在子类型的构造函数内部调用父类型构造函数（用apply或call方法），这下可以传递参数了，但没有解决函数复用的问题，而且父类型的原型对象中的方法对子类型不可见。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;组合继承&lt;/strong&gt;：将原型链和借用构造函数的技术组合到一块，其背后的思想是使用原型链实现对原型属性和方法的继承。其缺点是在构造函数中和用实例覆盖子类型的原型对象的过程中，调用了2次父类型的构造函数，导致父类型的实例属性有2份，1份在子类型原型对象中，1份在子类型实例中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;原型式继承&lt;/strong&gt;：它的实现思路是在函数内借助给定的参数（对象）覆盖函数中一个全新的对象的原型，然后返回这个全新的对象，利用该函数实现了继承，每个实例都可以对自己的属性和方法进行自定义。这个技术和&lt;u&gt;原型继承&lt;/u&gt;的思路差不多，用对象实例去重写子类型的原型，只是它把步骤放到了函数里面，并且是返回了一个被更改过原型的空白对象。&lt;br&gt;  ES5的&lt;code&gt;Object.create()&lt;/code&gt;方法规范化了原型式继承，它用来创建并返回一个继承后的子对象。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;寄生式继承&lt;/strong&gt;：是和原型式继承紧密相关的一种方式，但是原型式继承返回的子类型没有任何自定义的属性和方法，所以寄生式继承是完成了二次封装，用来完善子类型的属性和方法。思路是创建一个函数，在函数中调用原型式继承中封装的步骤，然后定义子类型中应有的属性和方法。但是也没有解决方法复用的问题，相当于每个实例中都有一份自己的方法&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;寄生组合式继承&lt;/strong&gt;：通过借用构造函数继承来继承属性，通过原型链的混成形式来继承方法。基本思路是：不必为了指定子类型的原型而调用父类型的构造函数，我们需要的只是父类型的原型对象的一个副本而已。只是利用一个中间对象的实例覆盖了子类型的原型对象，而在子类型的构造函数中又调用父类型构造函数以达到继承属性的目的。（最常用最常用）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有关方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;instanceof 操作符可以测试实例与原型链中出现过的构造函数。&lt;code&gt;isPrototypeOf()&lt;/code&gt;测试调用该方法的原型是否是这个实例(参数)的原型&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;后来想了一下，还是总结一下较好&lt;/p&gt;
&lt;h2 id=&quot;1-JS简介&quot;&gt;&lt;a href=&quot;#1-JS简介&quot; class=&quot;headerlink&quot; title=&quot;1. JS简介&quot;&gt;&lt;/a&gt;1. JS简介&lt;/h2&gt;&lt;p&gt;第1章主要讲了JS的起源和发展历程，以及JS的基本组成情况
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 69~76 天</title>
    <link href="http://archmee.github.io/201609/2016-09-18.html"/>
    <id>http://archmee.github.io/201609/2016-09-18.html</id>
    <published>2016-09-17T16:00:00.000Z</published>
    <updated>2016-10-26T14:16:24.775Z</updated>
    
    <content type="html">&lt;p&gt;时逢中秋佳节，又废了3天&lt;br&gt;这几天学习了JS高级编程前5章，想法是尽快刷一遍全书，再开始做小东西&lt;br&gt;但是这本书没有做笔记，原因是书上讲得足够详细了，在抄一遍浪费时间用处不大，不过可以一段时间回顾一下，做点摘要性质的知识点大纲&lt;br&gt;。。。&lt;br&gt;居然没什么写的了，剩下的当作留白吧！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;时逢中秋佳节，又废了3天&lt;br&gt;这几天学习了JS高级编程前5章，想法是尽快刷一遍全书，再开始做小东西&lt;br&gt;但是这本书没有做笔记，原因是书上讲得足够详细了，在抄一遍浪费时间用处不大，不过可以一段时间回顾一下，做点摘要性质的知识点大纲&lt;br&gt;。。。&lt;br&gt;居然没什么写的了，剩
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 57~68 天</title>
    <link href="http://archmee.github.io/201609/2016-09-10.html"/>
    <id>http://archmee.github.io/201609/2016-09-10.html</id>
    <published>2016-09-09T16:00:00.000Z</published>
    <updated>2016-12-13T15:02:01.313Z</updated>
    
    <content type="html">&lt;p&gt;这段时间多是荒废了的，所以做的事情不多，把《精通CSS》看完了，剩余的两章都是项目的实现，我分析了示例中的代码，但没发觉什么新东西，所以笔记也省略了&lt;/p&gt;
&lt;p&gt;再来中途参加了朋友的婚礼，耽搁了点时间&lt;/p&gt;
&lt;p&gt;继续学习智能社的JS视频教程，发现这个老师讲得挺好，他基本很少讲直接得理论知识，都是根据循序渐进的列子来带出知识点，并且讲解了当下很实用的一些网页效果，比如缓冲运动、焦点图滚动、淡入淡出，当然这个视频可能对JS学习并不完善，但是对于学习DOM编程入门挺好的，一边学可以一边实现常见的网页效果，会更有学习上的成就感。&lt;br&gt;而且现在根据他讲的内容对之前徒手撸的轮播图有了改进的想法，可以使其更完善。&lt;br&gt;准备明天开始刷JS高级编程，争取开启暴走模式&lt;/p&gt;
&lt;p&gt;上一篇博客后模仿了慕课网首页的导航效果，我只是实现了静态效果，轮播图没有做，不过是把以前写的代码融合进来，下面放上效果截图和DEMO：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/2016-09-11_004601.jpg&quot; alt=&quot;模仿慕课首页导航&quot;&gt;&lt;/p&gt;
&lt;script async src=&quot;https://jsfiddle.net/wnxh0ujj/embed/result,html,css,js/&quot;&gt;&lt;/script&gt;

</content>
    
    <summary type="html">
    
      &lt;p&gt;这段时间多是荒废了的，所以做的事情不多，把《精通CSS》看完了，剩余的两章都是项目的实现，我分析了示例中的代码，但没发觉什么新东西，所以笔记也省略了&lt;/p&gt;
&lt;p&gt;再来中途参加了朋友的婚礼，耽搁了点时间&lt;/p&gt;
&lt;p&gt;继续学习智能社的JS视频教程，发现这个老师讲得挺好，他基
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>前端之旅第 55、56 天</title>
    <link href="http://archmee.github.io/201608/2016-08-29.html"/>
    <id>http://archmee.github.io/201608/2016-08-29.html</id>
    <published>2016-08-28T16:00:00.000Z</published>
    <updated>2016-08-29T16:07:37.668Z</updated>
    
    <content type="html">&lt;p&gt;最近在看智能社的JS视频教程，这两天学习了无缝滚动效果的实现，心想着感觉和轮播效果差不多，一冲动就徒手撸了一个图片轮播效果，其实两种东西差远了，如果非要说它们之间有什么关系的话，就是都要用JS&lt;/p&gt;
&lt;p&gt;哈哈哈.gif&lt;/p&gt;
&lt;p&gt;不过先声明，在实现这个轮播效果以前，只是在其他网站看过这种效果，并没有了解过技术上是怎么实现的，所以这里的轮播效果完全是按照自己的思路强撸的，bug。。。暂时没有，但不完善，也不算什么好的实践。&lt;/p&gt;
&lt;p&gt;下面是我的大概思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先html结构要一个图片列表，但用css全部隐藏。有切换上一张和下一张图片的按钮&lt;/li&gt;
&lt;li&gt;文档加载完成后，js取出图片列表，然后显示第1张图片&lt;/li&gt;
&lt;li&gt;创建图片上的那一排可以切换图片的小圆点，用ul生成，li个数取决于上一步列表长度，每个li嵌套一个a元素，并且将第一个小圆点添加到事先写好的css类，使其有激活的效果&lt;/li&gt;
&lt;li&gt;在生成li中a元素时，为每个a绑定onmouseover和onclick事件，在onmouseover时，保持原有游标和定时器，这里只是简单的将图片切换到当前图片，定时器时间到了，原来计算好的下一张图片是谁，现在还是切换谁。而onclick不一样，它首先会清除原有定时器，然后隐藏原有图片，修改游标值，淡入显示当前图片，并且启动定时器，保证切换的下一张图片是当前图片紧邻的下一张，而不是其他，其实这一个和自动切换图片代码是一样的，只是改了游标的值&lt;/li&gt;
&lt;li&gt;启动定时器（上一步中的定时器要点击事件发生时才会启动的），间隔多少秒后，开始自动切换下一张图片（目前没见过自动切换上一张）。刚开始我用的setInterval，后面发现如果切换的地方多了后，定时器之间有干扰，后面改为setTimeout，每次切换下一张，再次启动就ok了&lt;/li&gt;
&lt;li&gt;切换时，先取消小圆点的激活效果，再隐藏当前图片，然后移动游标位置，再显示下一张图片以及激活下一个小圆点&lt;/li&gt;
&lt;li&gt;在切换下一张图片时，加一点淡入效果，显得不那么突兀。淡入效果是我自己写的，设置一个初始的opacity，用setInterval定时器，渐变到1就ok了，淡出的话思路不变，opcity逐渐减小即可&lt;/li&gt;
&lt;li&gt;两个按钮分别绑定onclick事件，和切换下一张图片思路一样，只是这次变成手动切换而已，上一张就是把游标位置减1，并且判断是否小于0，小于0的话，要像求余数一样从倒数的位置开始了。下一张也要判断位置，如果超过列表长度，就要取余数并更新游标，自动切换时也要走这一步&lt;/li&gt;
&lt;li&gt;更复杂的切换效果还做不了，so……暂时到此为止……&lt;/li&gt;
&lt;li&gt;忘了提，小圆点上的onmouseover效果不是很理想，原因未知，所以先注释掉了&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面是最终效果截图和Demo&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Archmee/lkd2d97zvb5fvz89feyhwr98v/master/gitblog/images/2016-08-29_235232.jpg&quot; alt=&quot;轮播效果截图&quot;&gt;&lt;/p&gt;
&lt;script async src=&quot;https://jsfiddle.net/ycssuxpj/embed/result,html,css,js/&quot;&gt;&lt;/script&gt;

&lt;blockquote&gt;
&lt;p&gt;ps：图片来自网络，侵删。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近在看智能社的JS视频教程，这两天学习了无缝滚动效果的实现，心想着感觉和轮播效果差不多，一冲动就徒手撸了一个图片轮播效果，其实两种东西差远了，如果非要说它们之间有什么关系的话，就是都要用JS&lt;/p&gt;
&lt;p&gt;哈哈哈.gif&lt;/p&gt;
&lt;p&gt;不过先声明，在实现这个轮播效果以前，
    
    </summary>
    
      <category term="tech" scheme="http://archmee.github.io/categories/tech/"/>
    
    
      <category term="Front End" scheme="http://archmee.github.io/tags/Front-End/"/>
    
  </entry>
  
</feed>
